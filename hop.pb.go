//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: beerproto/v1/hop.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VarietyInformationType int32

const (
	VarietyInformationType_VARIETY_INFORMATION_TYPE_UNSPECIFIED VarietyInformationType = 0
	// aroma
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA VarietyInformationType = 1
	// bittering
	VarietyInformationType_VARIETY_INFORMATION_TYPE_BITTERING VarietyInformationType = 2
	// flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_FLAVOR VarietyInformationType = 3
	// aroma/bittering
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_BITTERING VarietyInformationType = 4
	// bittering/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR VarietyInformationType = 5
	// aroma/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_FLAVOR VarietyInformationType = 6
	// aroma/bittering/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR VarietyInformationType = 7
)

// Enum value maps for VarietyInformationType.
var (
	VarietyInformationType_name = map[int32]string{
		0: "VARIETY_INFORMATION_TYPE_UNSPECIFIED",
		1: "VARIETY_INFORMATION_TYPE_AROMA",
		2: "VARIETY_INFORMATION_TYPE_BITTERING",
		3: "VARIETY_INFORMATION_TYPE_FLAVOR",
		4: "VARIETY_INFORMATION_TYPE_AROMA_BITTERING",
		5: "VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR",
		6: "VARIETY_INFORMATION_TYPE_AROMA_FLAVOR",
		7: "VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR",
	}
	VarietyInformationType_value = map[string]int32{
		"VARIETY_INFORMATION_TYPE_UNSPECIFIED":            0,
		"VARIETY_INFORMATION_TYPE_AROMA":                  1,
		"VARIETY_INFORMATION_TYPE_BITTERING":              2,
		"VARIETY_INFORMATION_TYPE_FLAVOR":                 3,
		"VARIETY_INFORMATION_TYPE_AROMA_BITTERING":        4,
		"VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR":       5,
		"VARIETY_INFORMATION_TYPE_AROMA_FLAVOR":           6,
		"VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR": 7,
	}
)

func (x VarietyInformationType) Enum() *VarietyInformationType {
	p := new(VarietyInformationType)
	*p = x
	return p
}

func (x VarietyInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarietyInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[0].Descriptor()
}

func (VarietyInformationType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[0]
}

func (x VarietyInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarietyInformationType.Descriptor instead.
func (VarietyInformationType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{0}
}

type HopVarietyBaseForm int32

const (
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_UNSPECIFIED HopVarietyBaseForm = 0
	// extract
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_EXTRACT HopVarietyBaseForm = 1
	// leaf
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_LEAF HopVarietyBaseForm = 2
	// leaf (wet)
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_LEAFWET HopVarietyBaseForm = 3
	// pellet
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_PELLET HopVarietyBaseForm = 4
	// powder
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_POWDER HopVarietyBaseForm = 5
	// plug
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_PLUG HopVarietyBaseForm = 6
)

// Enum value maps for HopVarietyBaseForm.
var (
	HopVarietyBaseForm_name = map[int32]string{
		0: "HOP_VARIETY_BASE_FORM_UNSPECIFIED",
		1: "HOP_VARIETY_BASE_FORM_EXTRACT",
		2: "HOP_VARIETY_BASE_FORM_LEAF",
		3: "HOP_VARIETY_BASE_FORM_LEAFWET",
		4: "HOP_VARIETY_BASE_FORM_PELLET",
		5: "HOP_VARIETY_BASE_FORM_POWDER",
		6: "HOP_VARIETY_BASE_FORM_PLUG",
	}
	HopVarietyBaseForm_value = map[string]int32{
		"HOP_VARIETY_BASE_FORM_UNSPECIFIED": 0,
		"HOP_VARIETY_BASE_FORM_EXTRACT":     1,
		"HOP_VARIETY_BASE_FORM_LEAF":        2,
		"HOP_VARIETY_BASE_FORM_LEAFWET":     3,
		"HOP_VARIETY_BASE_FORM_PELLET":      4,
		"HOP_VARIETY_BASE_FORM_POWDER":      5,
		"HOP_VARIETY_BASE_FORM_PLUG":        6,
	}
)

func (x HopVarietyBaseForm) Enum() *HopVarietyBaseForm {
	p := new(HopVarietyBaseForm)
	*p = x
	return p
}

func (x HopVarietyBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HopVarietyBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[1].Descriptor()
}

func (HopVarietyBaseForm) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[1]
}

func (x HopVarietyBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HopVarietyBaseForm.Descriptor instead.
func (HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{1}
}

type IBUMethodUnit int32

const (
	IBUMethodUnit_IBU_METHOD_UNIT_UNSPECIFIED IBUMethodUnit = 0
	// Rager
	IBUMethodUnit_IBU_METHOD_UNIT_RAGER IBUMethodUnit = 1
	// Tinseth
	IBUMethodUnit_IBU_METHOD_UNIT_TINSETH IBUMethodUnit = 2
	// Garetz
	IBUMethodUnit_IBU_METHOD_UNIT_GARETZ IBUMethodUnit = 3
	// Other
	IBUMethodUnit_IBU_METHOD_UNIT_OTHER IBUMethodUnit = 4
)

// Enum value maps for IBUMethodUnit.
var (
	IBUMethodUnit_name = map[int32]string{
		0: "IBU_METHOD_UNIT_UNSPECIFIED",
		1: "IBU_METHOD_UNIT_RAGER",
		2: "IBU_METHOD_UNIT_TINSETH",
		3: "IBU_METHOD_UNIT_GARETZ",
		4: "IBU_METHOD_UNIT_OTHER",
	}
	IBUMethodUnit_value = map[string]int32{
		"IBU_METHOD_UNIT_UNSPECIFIED": 0,
		"IBU_METHOD_UNIT_RAGER":       1,
		"IBU_METHOD_UNIT_TINSETH":     2,
		"IBU_METHOD_UNIT_GARETZ":      3,
		"IBU_METHOD_UNIT_OTHER":       4,
	}
)

func (x IBUMethodUnit) Enum() *IBUMethodUnit {
	p := new(IBUMethodUnit)
	*p = x
	return p
}

func (x IBUMethodUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IBUMethodUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[2].Descriptor()
}

func (IBUMethodUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[2]
}

func (x IBUMethodUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IBUMethodUnit.Descriptor instead.
func (IBUMethodUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{2}
}

// VarietyInformation collects the attributes of a hop variety to store as record information
type VarietyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inventory *HopInventoryType      `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Type      VarietyInformationType `protobuf:"varint,3,opt,name=type,proto3,enum=beerproto.v1.VarietyInformationType" json:"type,omitempty"`
	// Oil Content information object.
	OilContent *OilContentType `protobuf:"bytes,4,opt,name=oil_content,json=oilContent,proto3" json:"oil_content,omitempty"`
	// Defined as the percentage of hop alpha lost in 6 months of storage.
	PercentLost *PercentType       `protobuf:"bytes,5,opt,name=percent_lost,json=percentLost,proto3" json:"percent_lost,omitempty"`
	ProductId   string             `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid   *PercentType       `protobuf:"bytes,7,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	BetaAcid    *PercentType       `protobuf:"bytes,8,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Name        string             `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Origin      string             `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
	Substitutes string             `protobuf:"bytes,11,opt,name=substitutes,proto3" json:"substitutes,omitempty"`
	Year        string             `protobuf:"bytes,12,opt,name=year,proto3" json:"year,omitempty"`
	Form        HopVarietyBaseForm `protobuf:"varint,13,opt,name=form,proto3,enum=beerproto.v1.HopVarietyBaseForm" json:"form,omitempty"`
	Producer    string             `protobuf:"bytes,14,opt,name=producer,proto3" json:"producer,omitempty"`
	Notes       string             `protobuf:"bytes,15,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *VarietyInformation) Reset() {
	*x = VarietyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_hop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarietyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarietyInformation) ProtoMessage() {}

func (x *VarietyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarietyInformation.ProtoReflect.Descriptor instead.
func (*VarietyInformation) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{0}
}

func (x *VarietyInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VarietyInformation) GetInventory() *HopInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *VarietyInformation) GetType() VarietyInformationType {
	if x != nil {
		return x.Type
	}
	return VarietyInformationType_VARIETY_INFORMATION_TYPE_UNSPECIFIED
}

func (x *VarietyInformation) GetOilContent() *OilContentType {
	if x != nil {
		return x.OilContent
	}
	return nil
}

func (x *VarietyInformation) GetPercentLost() *PercentType {
	if x != nil {
		return x.PercentLost
	}
	return nil
}

func (x *VarietyInformation) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VarietyInformation) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (x *VarietyInformation) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *VarietyInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VarietyInformation) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *VarietyInformation) GetSubstitutes() string {
	if x != nil {
		return x.Substitutes
	}
	return ""
}

func (x *VarietyInformation) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *VarietyInformation) GetForm() HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_UNSPECIFIED
}

func (x *VarietyInformation) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *VarietyInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bill.
type HopAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetaAcid *PercentType       `protobuf:"bytes,2,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Producer string             `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	Origin   string             `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	Year     string             `protobuf:"bytes,5,opt,name=year,proto3" json:"year,omitempty"`
	Form     HopVarietyBaseForm `protobuf:"varint,6,opt,name=form,proto3,enum=beerproto.v1.HopVarietyBaseForm" json:"form,omitempty"`
	// The timing object fully describes the timing of an addition with options for a basis on time, gravity, or pH at any process step
	Timing    *TimingType  `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	Name      string       `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	ProductId string       `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid *PercentType `protobuf:"bytes,10,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	// Types that are assignable to Amount:
	//
	//	*HopAdditionType_Mass
	//	*HopAdditionType_Volume
	Amount isHopAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *HopAdditionType) Reset() {
	*x = HopAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_hop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopAdditionType) ProtoMessage() {}

func (x *HopAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopAdditionType.ProtoReflect.Descriptor instead.
func (*HopAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{1}
}

func (x *HopAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HopAdditionType) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *HopAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *HopAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *HopAdditionType) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *HopAdditionType) GetForm() HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_UNSPECIFIED
}

func (x *HopAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *HopAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HopAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *HopAdditionType) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (m *HopAdditionType) GetAmount() isHopAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopAdditionType_Amount interface {
	isHopAdditionType_Amount()
}

type HopAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type HopAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*HopAdditionType_Mass) isHopAdditionType_Amount() {}

func (*HopAdditionType_Volume) isHopAdditionType_Amount() {}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
type IBUEstimateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method IBUMethodUnit `protobuf:"varint,1,opt,name=method,proto3,enum=beerproto.v1.IBUMethodUnit" json:"method,omitempty"`
}

func (x *IBUEstimateType) Reset() {
	*x = IBUEstimateType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_hop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IBUEstimateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IBUEstimateType) ProtoMessage() {}

func (x *IBUEstimateType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IBUEstimateType.ProtoReflect.Descriptor instead.
func (*IBUEstimateType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{2}
}

func (x *IBUEstimateType) GetMethod() IBUMethodUnit {
	if x != nil {
		return x.Method
	}
	return IBUMethodUnit_IBU_METHOD_UNIT_UNSPECIFIED
}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
type OilContentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Polyphenols *PercentType `protobuf:"bytes,1,opt,name=polyphenols,proto3" json:"polyphenols,omitempty"`
	// The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
	TotalOilMlPer_100G float64      `protobuf:"fixed64,2,opt,name=total_oil_ml_per_100g,json=totalOilMlPer100g,proto3" json:"total_oil_ml_per_100g,omitempty"`
	Farnesene          *PercentType `protobuf:"bytes,3,opt,name=farnesene,proto3" json:"farnesene,omitempty"`
	Limonene           *PercentType `protobuf:"bytes,4,opt,name=limonene,proto3" json:"limonene,omitempty"`
	Nerol              *PercentType `protobuf:"bytes,5,opt,name=nerol,proto3" json:"nerol,omitempty"`
	Geraniol           *PercentType `protobuf:"bytes,6,opt,name=geraniol,proto3" json:"geraniol,omitempty"`
	BPinene            *PercentType `protobuf:"bytes,7,opt,name=b_pinene,json=bPinene,proto3" json:"b_pinene,omitempty"`
	Linalool           *PercentType `protobuf:"bytes,8,opt,name=linalool,proto3" json:"linalool,omitempty"`
	Caryophyllene      *PercentType `protobuf:"bytes,9,opt,name=caryophyllene,proto3" json:"caryophyllene,omitempty"`
	Cohumulone         *PercentType `protobuf:"bytes,10,opt,name=cohumulone,proto3" json:"cohumulone,omitempty"`
	Xanthohumol        *PercentType `protobuf:"bytes,11,opt,name=xanthohumol,proto3" json:"xanthohumol,omitempty"`
	Humulene           *PercentType `protobuf:"bytes,12,opt,name=humulene,proto3" json:"humulene,omitempty"`
	Myrcene            *PercentType `protobuf:"bytes,13,opt,name=myrcene,proto3" json:"myrcene,omitempty"`
	Pinene             *PercentType `protobuf:"bytes,14,opt,name=pinene,proto3" json:"pinene,omitempty"`
}

func (x *OilContentType) Reset() {
	*x = OilContentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_hop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OilContentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OilContentType) ProtoMessage() {}

func (x *OilContentType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OilContentType.ProtoReflect.Descriptor instead.
func (*OilContentType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{3}
}

func (x *OilContentType) GetPolyphenols() *PercentType {
	if x != nil {
		return x.Polyphenols
	}
	return nil
}

func (x *OilContentType) GetTotalOilMlPer_100G() float64 {
	if x != nil {
		return x.TotalOilMlPer_100G
	}
	return 0
}

func (x *OilContentType) GetFarnesene() *PercentType {
	if x != nil {
		return x.Farnesene
	}
	return nil
}

func (x *OilContentType) GetLimonene() *PercentType {
	if x != nil {
		return x.Limonene
	}
	return nil
}

func (x *OilContentType) GetNerol() *PercentType {
	if x != nil {
		return x.Nerol
	}
	return nil
}

func (x *OilContentType) GetGeraniol() *PercentType {
	if x != nil {
		return x.Geraniol
	}
	return nil
}

func (x *OilContentType) GetBPinene() *PercentType {
	if x != nil {
		return x.BPinene
	}
	return nil
}

func (x *OilContentType) GetLinalool() *PercentType {
	if x != nil {
		return x.Linalool
	}
	return nil
}

func (x *OilContentType) GetCaryophyllene() *PercentType {
	if x != nil {
		return x.Caryophyllene
	}
	return nil
}

func (x *OilContentType) GetCohumulone() *PercentType {
	if x != nil {
		return x.Cohumulone
	}
	return nil
}

func (x *OilContentType) GetXanthohumol() *PercentType {
	if x != nil {
		return x.Xanthohumol
	}
	return nil
}

func (x *OilContentType) GetHumulene() *PercentType {
	if x != nil {
		return x.Humulene
	}
	return nil
}

func (x *OilContentType) GetMyrcene() *PercentType {
	if x != nil {
		return x.Myrcene
	}
	return nil
}

func (x *OilContentType) GetPinene() *PercentType {
	if x != nil {
		return x.Pinene
	}
	return nil
}

type HopInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//
	//	*HopInventoryType_Mass
	//	*HopInventoryType_Volume
	Amount isHopInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *HopInventoryType) Reset() {
	*x = HopInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_hop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopInventoryType) ProtoMessage() {}

func (x *HopInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopInventoryType.ProtoReflect.Descriptor instead.
func (*HopInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{4}
}

func (m *HopInventoryType) GetAmount() isHopInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopInventoryType_Amount interface {
	isHopInventoryType_Amount()
}

type HopInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type HopInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*HopInventoryType_Mass) isHopInventoryType_Amount() {}

func (*HopInventoryType_Volume) isHopInventoryType_Amount() {}

var File_beerproto_v1_hop_proto protoreflect.FileDescriptor

var file_beerproto_v1_hop_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x04, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x69, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61,
	0x41, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xe2,
	0x03, 0x0a, 0x0f, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0f, 0x49, 0x42, 0x55, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x42, 0x55, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x9c, 0x06, 0x0a, 0x0e,
	0x4f, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x69, 0x6c, 0x5f, 0x6d, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x31, 0x30, 0x30, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x69, 0x6c, 0x4d, 0x6c, 0x50, 0x65, 0x72, 0x31, 0x30, 0x30, 0x67, 0x12, 0x37, 0x0a,
	0x09, 0x66, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x65, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x6f, 0x6e, 0x65,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x6f, 0x6e, 0x65, 0x6e, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x6e, 0x65, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x65, 0x72, 0x6f, 0x6c, 0x12, 0x35,
	0x0a, 0x08, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x69, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x65, 0x72,
	0x61, 0x6e, 0x69, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x65, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x62, 0x50, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x61, 0x6c, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x61, 0x6c, 0x6f,
	0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c,
	0x65, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c,
	0x65, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x6f, 0x6e,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68, 0x75, 0x6d, 0x6f, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68, 0x75, 0x6d, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x68,
	0x75, 0x6d, 0x75, 0x6c, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x65,
	0x6e, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x79, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x79, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x65, 0x6e,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x48, 0x6f,
	0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xf0, 0x02, 0x0a, 0x16, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4f, 0x4d,
	0x41, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x56,
	0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x2c, 0x0a, 0x28, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4f,
	0x4d, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x2d,
	0x0a, 0x29, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x5f,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x56, 0x41, 0x52, 0x49,
	0x45, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0x85, 0x02,
	0x0a, 0x12, 0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x45, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x48,
	0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x57, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x45, 0x4c, 0x4c, 0x45,
	0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45,
	0x54, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x4f, 0x57,
	0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x45, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x10, 0x06, 0x2a, 0x9f, 0x01, 0x0a, 0x0d, 0x49, 0x42, 0x55, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x42, 0x55, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x42, 0x55, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x47, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x42, 0x55, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4e, 0x53, 0x45, 0x54, 0x48, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x42, 0x55, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x47, 0x41, 0x52, 0x45, 0x54, 0x5a, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x42, 0x55, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x42, 0xa9, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x48, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_hop_proto_rawDescOnce sync.Once
	file_beerproto_v1_hop_proto_rawDescData = file_beerproto_v1_hop_proto_rawDesc
)

func file_beerproto_v1_hop_proto_rawDescGZIP() []byte {
	file_beerproto_v1_hop_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_hop_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_hop_proto_rawDescData)
	})
	return file_beerproto_v1_hop_proto_rawDescData
}

var file_beerproto_v1_hop_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_beerproto_v1_hop_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_beerproto_v1_hop_proto_goTypes = []interface{}{
	(VarietyInformationType)(0), // 0: beerproto.v1.VarietyInformationType
	(HopVarietyBaseForm)(0),     // 1: beerproto.v1.HopVarietyBaseForm
	(IBUMethodUnit)(0),          // 2: beerproto.v1.IBUMethodUnit
	(*VarietyInformation)(nil),  // 3: beerproto.v1.VarietyInformation
	(*HopAdditionType)(nil),     // 4: beerproto.v1.HopAdditionType
	(*IBUEstimateType)(nil),     // 5: beerproto.v1.IBUEstimateType
	(*OilContentType)(nil),      // 6: beerproto.v1.OilContentType
	(*HopInventoryType)(nil),    // 7: beerproto.v1.HopInventoryType
	(*PercentType)(nil),         // 8: beerproto.v1.PercentType
	(*TimingType)(nil),          // 9: beerproto.v1.TimingType
	(*MassType)(nil),            // 10: beerproto.v1.MassType
	(*VolumeType)(nil),          // 11: beerproto.v1.VolumeType
}
var file_beerproto_v1_hop_proto_depIdxs = []int32{
	7,  // 0: beerproto.v1.VarietyInformation.inventory:type_name -> beerproto.v1.HopInventoryType
	0,  // 1: beerproto.v1.VarietyInformation.type:type_name -> beerproto.v1.VarietyInformationType
	6,  // 2: beerproto.v1.VarietyInformation.oil_content:type_name -> beerproto.v1.OilContentType
	8,  // 3: beerproto.v1.VarietyInformation.percent_lost:type_name -> beerproto.v1.PercentType
	8,  // 4: beerproto.v1.VarietyInformation.alpha_acid:type_name -> beerproto.v1.PercentType
	8,  // 5: beerproto.v1.VarietyInformation.beta_acid:type_name -> beerproto.v1.PercentType
	1,  // 6: beerproto.v1.VarietyInformation.form:type_name -> beerproto.v1.HopVarietyBaseForm
	8,  // 7: beerproto.v1.HopAdditionType.beta_acid:type_name -> beerproto.v1.PercentType
	1,  // 8: beerproto.v1.HopAdditionType.form:type_name -> beerproto.v1.HopVarietyBaseForm
	9,  // 9: beerproto.v1.HopAdditionType.timing:type_name -> beerproto.v1.TimingType
	8,  // 10: beerproto.v1.HopAdditionType.alpha_acid:type_name -> beerproto.v1.PercentType
	10, // 11: beerproto.v1.HopAdditionType.mass:type_name -> beerproto.v1.MassType
	11, // 12: beerproto.v1.HopAdditionType.volume:type_name -> beerproto.v1.VolumeType
	2,  // 13: beerproto.v1.IBUEstimateType.method:type_name -> beerproto.v1.IBUMethodUnit
	8,  // 14: beerproto.v1.OilContentType.polyphenols:type_name -> beerproto.v1.PercentType
	8,  // 15: beerproto.v1.OilContentType.farnesene:type_name -> beerproto.v1.PercentType
	8,  // 16: beerproto.v1.OilContentType.limonene:type_name -> beerproto.v1.PercentType
	8,  // 17: beerproto.v1.OilContentType.nerol:type_name -> beerproto.v1.PercentType
	8,  // 18: beerproto.v1.OilContentType.geraniol:type_name -> beerproto.v1.PercentType
	8,  // 19: beerproto.v1.OilContentType.b_pinene:type_name -> beerproto.v1.PercentType
	8,  // 20: beerproto.v1.OilContentType.linalool:type_name -> beerproto.v1.PercentType
	8,  // 21: beerproto.v1.OilContentType.caryophyllene:type_name -> beerproto.v1.PercentType
	8,  // 22: beerproto.v1.OilContentType.cohumulone:type_name -> beerproto.v1.PercentType
	8,  // 23: beerproto.v1.OilContentType.xanthohumol:type_name -> beerproto.v1.PercentType
	8,  // 24: beerproto.v1.OilContentType.humulene:type_name -> beerproto.v1.PercentType
	8,  // 25: beerproto.v1.OilContentType.myrcene:type_name -> beerproto.v1.PercentType
	8,  // 26: beerproto.v1.OilContentType.pinene:type_name -> beerproto.v1.PercentType
	10, // 27: beerproto.v1.HopInventoryType.mass:type_name -> beerproto.v1.MassType
	11, // 28: beerproto.v1.HopInventoryType.volume:type_name -> beerproto.v1.VolumeType
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_beerproto_v1_hop_proto_init() }
func file_beerproto_v1_hop_proto_init() {
	if File_beerproto_v1_hop_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_hop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarietyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_hop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_hop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IBUEstimateType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_hop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OilContentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_hop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beerproto_v1_hop_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*HopAdditionType_Mass)(nil),
		(*HopAdditionType_Volume)(nil),
	}
	file_beerproto_v1_hop_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*HopInventoryType_Mass)(nil),
		(*HopInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_hop_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_hop_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_hop_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_hop_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_hop_proto_msgTypes,
	}.Build()
	File_beerproto_v1_hop_proto = out.File
	file_beerproto_v1_hop_proto_rawDesc = nil
	file_beerproto_v1_hop_proto_goTypes = nil
	file_beerproto_v1_hop_proto_depIdxs = nil
}
