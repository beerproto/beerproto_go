//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/hop.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VarietyInformationType int32

const (
	VarietyInformationType_VARIETY_INFORMATION_TYPE_UNSPECIFIED VarietyInformationType = 0
	// aroma
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA VarietyInformationType = 1
	// bittering
	VarietyInformationType_VARIETY_INFORMATION_TYPE_BITTERING VarietyInformationType = 2
	// flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_FLAVOR VarietyInformationType = 3
	// aroma/bittering
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_BITTERING VarietyInformationType = 4
	// bittering/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR VarietyInformationType = 5
	// aroma/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_FLAVOR VarietyInformationType = 6
	// aroma/bittering/flavor
	VarietyInformationType_VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR VarietyInformationType = 7
)

// Enum value maps for VarietyInformationType.
var (
	VarietyInformationType_name = map[int32]string{
		0: "VARIETY_INFORMATION_TYPE_UNSPECIFIED",
		1: "VARIETY_INFORMATION_TYPE_AROMA",
		2: "VARIETY_INFORMATION_TYPE_BITTERING",
		3: "VARIETY_INFORMATION_TYPE_FLAVOR",
		4: "VARIETY_INFORMATION_TYPE_AROMA_BITTERING",
		5: "VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR",
		6: "VARIETY_INFORMATION_TYPE_AROMA_FLAVOR",
		7: "VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR",
	}
	VarietyInformationType_value = map[string]int32{
		"VARIETY_INFORMATION_TYPE_UNSPECIFIED":            0,
		"VARIETY_INFORMATION_TYPE_AROMA":                  1,
		"VARIETY_INFORMATION_TYPE_BITTERING":              2,
		"VARIETY_INFORMATION_TYPE_FLAVOR":                 3,
		"VARIETY_INFORMATION_TYPE_AROMA_BITTERING":        4,
		"VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR":       5,
		"VARIETY_INFORMATION_TYPE_AROMA_FLAVOR":           6,
		"VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR": 7,
	}
)

func (x VarietyInformationType) Enum() *VarietyInformationType {
	p := new(VarietyInformationType)
	*p = x
	return p
}

func (x VarietyInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarietyInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[0].Descriptor()
}

func (VarietyInformationType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[0]
}

func (x VarietyInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarietyInformationType.Descriptor instead.
func (VarietyInformationType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{0}
}

type HopVarietyBaseForm int32

const (
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_UNSPECIFIED HopVarietyBaseForm = 0
	// extract
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_EXTRACT HopVarietyBaseForm = 1
	// leaf
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_LEAF HopVarietyBaseForm = 2
	// leaf (wet)
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_LEAFWET HopVarietyBaseForm = 3
	// pellet
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_PELLET HopVarietyBaseForm = 4
	// powder
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_POWDER HopVarietyBaseForm = 5
	// plug
	HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_PLUG HopVarietyBaseForm = 6
)

// Enum value maps for HopVarietyBaseForm.
var (
	HopVarietyBaseForm_name = map[int32]string{
		0: "HOP_VARIETY_BASE_FORM_UNSPECIFIED",
		1: "HOP_VARIETY_BASE_FORM_EXTRACT",
		2: "HOP_VARIETY_BASE_FORM_LEAF",
		3: "HOP_VARIETY_BASE_FORM_LEAFWET",
		4: "HOP_VARIETY_BASE_FORM_PELLET",
		5: "HOP_VARIETY_BASE_FORM_POWDER",
		6: "HOP_VARIETY_BASE_FORM_PLUG",
	}
	HopVarietyBaseForm_value = map[string]int32{
		"HOP_VARIETY_BASE_FORM_UNSPECIFIED": 0,
		"HOP_VARIETY_BASE_FORM_EXTRACT":     1,
		"HOP_VARIETY_BASE_FORM_LEAF":        2,
		"HOP_VARIETY_BASE_FORM_LEAFWET":     3,
		"HOP_VARIETY_BASE_FORM_PELLET":      4,
		"HOP_VARIETY_BASE_FORM_POWDER":      5,
		"HOP_VARIETY_BASE_FORM_PLUG":        6,
	}
)

func (x HopVarietyBaseForm) Enum() *HopVarietyBaseForm {
	p := new(HopVarietyBaseForm)
	*p = x
	return p
}

func (x HopVarietyBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HopVarietyBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[1].Descriptor()
}

func (HopVarietyBaseForm) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[1]
}

func (x HopVarietyBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HopVarietyBaseForm.Descriptor instead.
func (HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{1}
}

type IBUMethodUnit int32

const (
	IBUMethodUnit_IBU_METHOD_UNIT_UNSPECIFIED IBUMethodUnit = 0
	// Rager
	IBUMethodUnit_IBU_METHOD_UNIT_RAGER IBUMethodUnit = 1
	// Tinseth
	IBUMethodUnit_IBU_METHOD_UNIT_TINSETH IBUMethodUnit = 2
	// Garetz
	IBUMethodUnit_IBU_METHOD_UNIT_GARETZ IBUMethodUnit = 3
	// Other
	IBUMethodUnit_IBU_METHOD_UNIT_OTHER IBUMethodUnit = 4
)

// Enum value maps for IBUMethodUnit.
var (
	IBUMethodUnit_name = map[int32]string{
		0: "IBU_METHOD_UNIT_UNSPECIFIED",
		1: "IBU_METHOD_UNIT_RAGER",
		2: "IBU_METHOD_UNIT_TINSETH",
		3: "IBU_METHOD_UNIT_GARETZ",
		4: "IBU_METHOD_UNIT_OTHER",
	}
	IBUMethodUnit_value = map[string]int32{
		"IBU_METHOD_UNIT_UNSPECIFIED": 0,
		"IBU_METHOD_UNIT_RAGER":       1,
		"IBU_METHOD_UNIT_TINSETH":     2,
		"IBU_METHOD_UNIT_GARETZ":      3,
		"IBU_METHOD_UNIT_OTHER":       4,
	}
)

func (x IBUMethodUnit) Enum() *IBUMethodUnit {
	p := new(IBUMethodUnit)
	*p = x
	return p
}

func (x IBUMethodUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IBUMethodUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_hop_proto_enumTypes[2].Descriptor()
}

func (IBUMethodUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_hop_proto_enumTypes[2]
}

func (x IBUMethodUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IBUMethodUnit.Descriptor instead.
func (IBUMethodUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{2}
}

// HopVarietyBase provides unique properties to identify individual records of a hop variety.
type HopVarietyBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Producer      string                 `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId     string                 `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Origin        string                 `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	Year          string                 `protobuf:"bytes,5,opt,name=year,proto3" json:"year,omitempty"`
	Form          HopVarietyBaseForm     `protobuf:"varint,6,opt,name=form,proto3,enum=beerproto.v1.HopVarietyBaseForm" json:"form,omitempty"`
	AlphaAcid     *PercentType           `protobuf:"bytes,7,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	BetaAcid      *PercentType           `protobuf:"bytes,8,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HopVarietyBase) Reset() {
	*x = HopVarietyBase{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HopVarietyBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopVarietyBase) ProtoMessage() {}

func (x *HopVarietyBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopVarietyBase.ProtoReflect.Descriptor instead.
func (*HopVarietyBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{0}
}

func (x *HopVarietyBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HopVarietyBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *HopVarietyBase) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *HopVarietyBase) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *HopVarietyBase) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *HopVarietyBase) GetForm() HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopVarietyBaseForm_HOP_VARIETY_BASE_FORM_UNSPECIFIED
}

func (x *HopVarietyBase) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (x *HopVarietyBase) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

// VarietyInformation collects the attributes of a hop variety to store as record information
type VarietyInformation struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Base      *HopVarietyBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id        string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Inventory *HopInventoryType      `protobuf:"bytes,3,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Type      VarietyInformationType `protobuf:"varint,4,opt,name=type,proto3,enum=beerproto.v1.VarietyInformationType" json:"type,omitempty"`
	// Oil Content information object.
	OilContent *OilContentType `protobuf:"bytes,5,opt,name=oil_content,json=oilContent,proto3" json:"oil_content,omitempty"`
	// Defined as the percentage of hop alpha lost in 6 months of storage.
	PercentLost   *PercentType `protobuf:"bytes,6,opt,name=percent_lost,json=percentLost,proto3" json:"percent_lost,omitempty"`
	Substitutes   string       `protobuf:"bytes,7,opt,name=substitutes,proto3" json:"substitutes,omitempty"`
	Notes         string       `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarietyInformation) Reset() {
	*x = VarietyInformation{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarietyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarietyInformation) ProtoMessage() {}

func (x *VarietyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarietyInformation.ProtoReflect.Descriptor instead.
func (*VarietyInformation) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{1}
}

func (x *VarietyInformation) GetBase() *HopVarietyBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *VarietyInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VarietyInformation) GetInventory() *HopInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *VarietyInformation) GetType() VarietyInformationType {
	if x != nil {
		return x.Type
	}
	return VarietyInformationType_VARIETY_INFORMATION_TYPE_UNSPECIFIED
}

func (x *VarietyInformation) GetOilContent() *OilContentType {
	if x != nil {
		return x.OilContent
	}
	return nil
}

func (x *VarietyInformation) GetPercentLost() *PercentType {
	if x != nil {
		return x.PercentLost
	}
	return nil
}

func (x *VarietyInformation) GetSubstitutes() string {
	if x != nil {
		return x.Substitutes
	}
	return ""
}

func (x *VarietyInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bill.
type HopAdditionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *HopVarietyBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The timing object fully describes the timing of an addition with options for a basis on time, gravity, or pH at any process step
	Timing *TimingType `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are valid to be assigned to Amount:
	//
	//	*HopAdditionType_Mass
	//	*HopAdditionType_Volume
	Amount        isHopAdditionType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HopAdditionType) Reset() {
	*x = HopAdditionType{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HopAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopAdditionType) ProtoMessage() {}

func (x *HopAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopAdditionType.ProtoReflect.Descriptor instead.
func (*HopAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{2}
}

func (x *HopAdditionType) GetBase() *HopVarietyBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HopAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HopAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *HopAdditionType) GetAmount() isHopAdditionType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *HopAdditionType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*HopAdditionType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *HopAdditionType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*HopAdditionType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isHopAdditionType_Amount interface {
	isHopAdditionType_Amount()
}

type HopAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,4,opt,name=mass,proto3,oneof"`
}

type HopAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,5,opt,name=volume,proto3,oneof"`
}

func (*HopAdditionType_Mass) isHopAdditionType_Amount() {}

func (*HopAdditionType_Volume) isHopAdditionType_Amount() {}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
type IBUEstimateType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        IBUMethodUnit          `protobuf:"varint,1,opt,name=method,proto3,enum=beerproto.v1.IBUMethodUnit" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IBUEstimateType) Reset() {
	*x = IBUEstimateType{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IBUEstimateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IBUEstimateType) ProtoMessage() {}

func (x *IBUEstimateType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IBUEstimateType.ProtoReflect.Descriptor instead.
func (*IBUEstimateType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{3}
}

func (x *IBUEstimateType) GetMethod() IBUMethodUnit {
	if x != nil {
		return x.Method
	}
	return IBUMethodUnit_IBU_METHOD_UNIT_UNSPECIFIED
}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
type OilContentType struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Polyphenols *PercentType           `protobuf:"bytes,1,opt,name=polyphenols,proto3" json:"polyphenols,omitempty"`
	// The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
	TotalOilMlPer_100G float64      `protobuf:"fixed64,2,opt,name=total_oil_ml_per_100g,json=totalOilMlPer100g,proto3" json:"total_oil_ml_per_100g,omitempty"`
	Farnesene          *PercentType `protobuf:"bytes,3,opt,name=farnesene,proto3" json:"farnesene,omitempty"`
	Limonene           *PercentType `protobuf:"bytes,4,opt,name=limonene,proto3" json:"limonene,omitempty"`
	Nerol              *PercentType `protobuf:"bytes,5,opt,name=nerol,proto3" json:"nerol,omitempty"`
	Geraniol           *PercentType `protobuf:"bytes,6,opt,name=geraniol,proto3" json:"geraniol,omitempty"`
	BPinene            *PercentType `protobuf:"bytes,7,opt,name=b_pinene,json=bPinene,proto3" json:"b_pinene,omitempty"`
	Linalool           *PercentType `protobuf:"bytes,8,opt,name=linalool,proto3" json:"linalool,omitempty"`
	Caryophyllene      *PercentType `protobuf:"bytes,9,opt,name=caryophyllene,proto3" json:"caryophyllene,omitempty"`
	Cohumulone         *PercentType `protobuf:"bytes,10,opt,name=cohumulone,proto3" json:"cohumulone,omitempty"`
	Xanthohumol        *PercentType `protobuf:"bytes,11,opt,name=xanthohumol,proto3" json:"xanthohumol,omitempty"`
	Humulene           *PercentType `protobuf:"bytes,12,opt,name=humulene,proto3" json:"humulene,omitempty"`
	Myrcene            *PercentType `protobuf:"bytes,13,opt,name=myrcene,proto3" json:"myrcene,omitempty"`
	Pinene             *PercentType `protobuf:"bytes,14,opt,name=pinene,proto3" json:"pinene,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OilContentType) Reset() {
	*x = OilContentType{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OilContentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OilContentType) ProtoMessage() {}

func (x *OilContentType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OilContentType.ProtoReflect.Descriptor instead.
func (*OilContentType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{4}
}

func (x *OilContentType) GetPolyphenols() *PercentType {
	if x != nil {
		return x.Polyphenols
	}
	return nil
}

func (x *OilContentType) GetTotalOilMlPer_100G() float64 {
	if x != nil {
		return x.TotalOilMlPer_100G
	}
	return 0
}

func (x *OilContentType) GetFarnesene() *PercentType {
	if x != nil {
		return x.Farnesene
	}
	return nil
}

func (x *OilContentType) GetLimonene() *PercentType {
	if x != nil {
		return x.Limonene
	}
	return nil
}

func (x *OilContentType) GetNerol() *PercentType {
	if x != nil {
		return x.Nerol
	}
	return nil
}

func (x *OilContentType) GetGeraniol() *PercentType {
	if x != nil {
		return x.Geraniol
	}
	return nil
}

func (x *OilContentType) GetBPinene() *PercentType {
	if x != nil {
		return x.BPinene
	}
	return nil
}

func (x *OilContentType) GetLinalool() *PercentType {
	if x != nil {
		return x.Linalool
	}
	return nil
}

func (x *OilContentType) GetCaryophyllene() *PercentType {
	if x != nil {
		return x.Caryophyllene
	}
	return nil
}

func (x *OilContentType) GetCohumulone() *PercentType {
	if x != nil {
		return x.Cohumulone
	}
	return nil
}

func (x *OilContentType) GetXanthohumol() *PercentType {
	if x != nil {
		return x.Xanthohumol
	}
	return nil
}

func (x *OilContentType) GetHumulene() *PercentType {
	if x != nil {
		return x.Humulene
	}
	return nil
}

func (x *OilContentType) GetMyrcene() *PercentType {
	if x != nil {
		return x.Myrcene
	}
	return nil
}

func (x *OilContentType) GetPinene() *PercentType {
	if x != nil {
		return x.Pinene
	}
	return nil
}

type HopInventoryType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Amount:
	//
	//	*HopInventoryType_Mass
	//	*HopInventoryType_Volume
	Amount        isHopInventoryType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HopInventoryType) Reset() {
	*x = HopInventoryType{}
	mi := &file_beerproto_v1_hop_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HopInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopInventoryType) ProtoMessage() {}

func (x *HopInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_hop_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopInventoryType.ProtoReflect.Descriptor instead.
func (*HopInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_hop_proto_rawDescGZIP(), []int{5}
}

func (x *HopInventoryType) GetAmount() isHopInventoryType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *HopInventoryType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*HopInventoryType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *HopInventoryType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*HopInventoryType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isHopInventoryType_Amount interface {
	isHopInventoryType_Amount()
}

type HopInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type HopInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*HopInventoryType_Mass) isHopInventoryType_Amount() {}

func (*HopInventoryType_Volume) isHopInventoryType_Amount() {}

var File_beerproto_v1_hop_proto protoreflect.FileDescriptor

const file_beerproto_v1_hop_proto_rawDesc = "" +
	"\n" +
	"\x16beerproto/v1/hop.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x19beerproto/v1/timing.proto\x1a\x1bbuf/validate/validate.proto\"\xc7\x02\n" +
	"\x0eHopVarietyBase\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12\x1a\n" +
	"\bproducer\x18\x02 \x01(\tR\bproducer\x12\x1d\n" +
	"\n" +
	"product_id\x18\x03 \x01(\tR\tproductId\x12\x16\n" +
	"\x06origin\x18\x04 \x01(\tR\x06origin\x12\x12\n" +
	"\x04year\x18\x05 \x01(\tR\x04year\x124\n" +
	"\x04form\x18\x06 \x01(\x0e2 .beerproto.v1.HopVarietyBaseFormR\x04form\x12@\n" +
	"\n" +
	"alpha_acid\x18\a \x01(\v2\x19.beerproto.v1.PercentTypeB\x06\xbaH\x03\xc8\x01\x01R\talphaAcid\x126\n" +
	"\tbeta_acid\x18\b \x01(\v2\x19.beerproto.v1.PercentTypeR\bbetaAcid\"\x98\x03\n" +
	"\x12VarietyInformation\x128\n" +
	"\x04base\x18\x01 \x01(\v2\x1c.beerproto.v1.HopVarietyBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12<\n" +
	"\tinventory\x18\x03 \x01(\v2\x1e.beerproto.v1.HopInventoryTypeR\tinventory\x128\n" +
	"\x04type\x18\x04 \x01(\x0e2$.beerproto.v1.VarietyInformationTypeR\x04type\x12=\n" +
	"\voil_content\x18\x05 \x01(\v2\x1c.beerproto.v1.OilContentTypeR\n" +
	"oilContent\x12<\n" +
	"\fpercent_lost\x18\x06 \x01(\v2\x19.beerproto.v1.PercentTypeR\vpercentLost\x12 \n" +
	"\vsubstitutes\x18\a \x01(\tR\vsubstitutes\x12\x14\n" +
	"\x05notes\x18\b \x01(\tR\x05notes\"\x95\x02\n" +
	"\x0fHopAdditionType\x128\n" +
	"\x04base\x18\x01 \x01(\v2\x1c.beerproto.v1.HopVarietyBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x128\n" +
	"\x06timing\x18\x03 \x01(\v2\x18.beerproto.v1.TimingTypeB\x06\xbaH\x03\xc8\x01\x01R\x06timing\x12,\n" +
	"\x04mass\x18\x04 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x122\n" +
	"\x06volume\x18\x05 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01\"F\n" +
	"\x0fIBUEstimateType\x123\n" +
	"\x06method\x18\x01 \x01(\x0e2\x1b.beerproto.v1.IBUMethodUnitR\x06method\"\x9c\x06\n" +
	"\x0eOilContentType\x12;\n" +
	"\vpolyphenols\x18\x01 \x01(\v2\x19.beerproto.v1.PercentTypeR\vpolyphenols\x120\n" +
	"\x15total_oil_ml_per_100g\x18\x02 \x01(\x01R\x11totalOilMlPer100g\x127\n" +
	"\tfarnesene\x18\x03 \x01(\v2\x19.beerproto.v1.PercentTypeR\tfarnesene\x125\n" +
	"\blimonene\x18\x04 \x01(\v2\x19.beerproto.v1.PercentTypeR\blimonene\x12/\n" +
	"\x05nerol\x18\x05 \x01(\v2\x19.beerproto.v1.PercentTypeR\x05nerol\x125\n" +
	"\bgeraniol\x18\x06 \x01(\v2\x19.beerproto.v1.PercentTypeR\bgeraniol\x124\n" +
	"\bb_pinene\x18\a \x01(\v2\x19.beerproto.v1.PercentTypeR\abPinene\x125\n" +
	"\blinalool\x18\b \x01(\v2\x19.beerproto.v1.PercentTypeR\blinalool\x12?\n" +
	"\rcaryophyllene\x18\t \x01(\v2\x19.beerproto.v1.PercentTypeR\rcaryophyllene\x129\n" +
	"\n" +
	"cohumulone\x18\n" +
	" \x01(\v2\x19.beerproto.v1.PercentTypeR\n" +
	"cohumulone\x12;\n" +
	"\vxanthohumol\x18\v \x01(\v2\x19.beerproto.v1.PercentTypeR\vxanthohumol\x125\n" +
	"\bhumulene\x18\f \x01(\v2\x19.beerproto.v1.PercentTypeR\bhumulene\x123\n" +
	"\amyrcene\x18\r \x01(\v2\x19.beerproto.v1.PercentTypeR\amyrcene\x121\n" +
	"\x06pinene\x18\x0e \x01(\v2\x19.beerproto.v1.PercentTypeR\x06pinene\"\x85\x01\n" +
	"\x10HopInventoryType\x12,\n" +
	"\x04mass\x18\x01 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x122\n" +
	"\x06volume\x18\x02 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01*\xf0\x02\n" +
	"\x16VarietyInformationType\x12(\n" +
	"$VARIETY_INFORMATION_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eVARIETY_INFORMATION_TYPE_AROMA\x10\x01\x12&\n" +
	"\"VARIETY_INFORMATION_TYPE_BITTERING\x10\x02\x12#\n" +
	"\x1fVARIETY_INFORMATION_TYPE_FLAVOR\x10\x03\x12,\n" +
	"(VARIETY_INFORMATION_TYPE_AROMA_BITTERING\x10\x04\x12-\n" +
	")VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR\x10\x05\x12)\n" +
	"%VARIETY_INFORMATION_TYPE_AROMA_FLAVOR\x10\x06\x123\n" +
	"/VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR\x10\a*\x85\x02\n" +
	"\x12HopVarietyBaseForm\x12%\n" +
	"!HOP_VARIETY_BASE_FORM_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dHOP_VARIETY_BASE_FORM_EXTRACT\x10\x01\x12\x1e\n" +
	"\x1aHOP_VARIETY_BASE_FORM_LEAF\x10\x02\x12!\n" +
	"\x1dHOP_VARIETY_BASE_FORM_LEAFWET\x10\x03\x12 \n" +
	"\x1cHOP_VARIETY_BASE_FORM_PELLET\x10\x04\x12 \n" +
	"\x1cHOP_VARIETY_BASE_FORM_POWDER\x10\x05\x12\x1e\n" +
	"\x1aHOP_VARIETY_BASE_FORM_PLUG\x10\x06*\x9f\x01\n" +
	"\rIBUMethodUnit\x12\x1f\n" +
	"\x1bIBU_METHOD_UNIT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15IBU_METHOD_UNIT_RAGER\x10\x01\x12\x1b\n" +
	"\x17IBU_METHOD_UNIT_TINSETH\x10\x02\x12\x1a\n" +
	"\x16IBU_METHOD_UNIT_GARETZ\x10\x03\x12\x19\n" +
	"\x15IBU_METHOD_UNIT_OTHER\x10\x04B\xa9\x01\n" +
	"\x10com.beerproto.v1B\bHopProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_hop_proto_rawDescOnce sync.Once
	file_beerproto_v1_hop_proto_rawDescData []byte
)

func file_beerproto_v1_hop_proto_rawDescGZIP() []byte {
	file_beerproto_v1_hop_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_hop_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_hop_proto_rawDesc), len(file_beerproto_v1_hop_proto_rawDesc)))
	})
	return file_beerproto_v1_hop_proto_rawDescData
}

var file_beerproto_v1_hop_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_beerproto_v1_hop_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_beerproto_v1_hop_proto_goTypes = []any{
	(VarietyInformationType)(0), // 0: beerproto.v1.VarietyInformationType
	(HopVarietyBaseForm)(0),     // 1: beerproto.v1.HopVarietyBaseForm
	(IBUMethodUnit)(0),          // 2: beerproto.v1.IBUMethodUnit
	(*HopVarietyBase)(nil),      // 3: beerproto.v1.HopVarietyBase
	(*VarietyInformation)(nil),  // 4: beerproto.v1.VarietyInformation
	(*HopAdditionType)(nil),     // 5: beerproto.v1.HopAdditionType
	(*IBUEstimateType)(nil),     // 6: beerproto.v1.IBUEstimateType
	(*OilContentType)(nil),      // 7: beerproto.v1.OilContentType
	(*HopInventoryType)(nil),    // 8: beerproto.v1.HopInventoryType
	(*PercentType)(nil),         // 9: beerproto.v1.PercentType
	(*TimingType)(nil),          // 10: beerproto.v1.TimingType
	(*MassType)(nil),            // 11: beerproto.v1.MassType
	(*VolumeType)(nil),          // 12: beerproto.v1.VolumeType
}
var file_beerproto_v1_hop_proto_depIdxs = []int32{
	1,  // 0: beerproto.v1.HopVarietyBase.form:type_name -> beerproto.v1.HopVarietyBaseForm
	9,  // 1: beerproto.v1.HopVarietyBase.alpha_acid:type_name -> beerproto.v1.PercentType
	9,  // 2: beerproto.v1.HopVarietyBase.beta_acid:type_name -> beerproto.v1.PercentType
	3,  // 3: beerproto.v1.VarietyInformation.base:type_name -> beerproto.v1.HopVarietyBase
	8,  // 4: beerproto.v1.VarietyInformation.inventory:type_name -> beerproto.v1.HopInventoryType
	0,  // 5: beerproto.v1.VarietyInformation.type:type_name -> beerproto.v1.VarietyInformationType
	7,  // 6: beerproto.v1.VarietyInformation.oil_content:type_name -> beerproto.v1.OilContentType
	9,  // 7: beerproto.v1.VarietyInformation.percent_lost:type_name -> beerproto.v1.PercentType
	3,  // 8: beerproto.v1.HopAdditionType.base:type_name -> beerproto.v1.HopVarietyBase
	10, // 9: beerproto.v1.HopAdditionType.timing:type_name -> beerproto.v1.TimingType
	11, // 10: beerproto.v1.HopAdditionType.mass:type_name -> beerproto.v1.MassType
	12, // 11: beerproto.v1.HopAdditionType.volume:type_name -> beerproto.v1.VolumeType
	2,  // 12: beerproto.v1.IBUEstimateType.method:type_name -> beerproto.v1.IBUMethodUnit
	9,  // 13: beerproto.v1.OilContentType.polyphenols:type_name -> beerproto.v1.PercentType
	9,  // 14: beerproto.v1.OilContentType.farnesene:type_name -> beerproto.v1.PercentType
	9,  // 15: beerproto.v1.OilContentType.limonene:type_name -> beerproto.v1.PercentType
	9,  // 16: beerproto.v1.OilContentType.nerol:type_name -> beerproto.v1.PercentType
	9,  // 17: beerproto.v1.OilContentType.geraniol:type_name -> beerproto.v1.PercentType
	9,  // 18: beerproto.v1.OilContentType.b_pinene:type_name -> beerproto.v1.PercentType
	9,  // 19: beerproto.v1.OilContentType.linalool:type_name -> beerproto.v1.PercentType
	9,  // 20: beerproto.v1.OilContentType.caryophyllene:type_name -> beerproto.v1.PercentType
	9,  // 21: beerproto.v1.OilContentType.cohumulone:type_name -> beerproto.v1.PercentType
	9,  // 22: beerproto.v1.OilContentType.xanthohumol:type_name -> beerproto.v1.PercentType
	9,  // 23: beerproto.v1.OilContentType.humulene:type_name -> beerproto.v1.PercentType
	9,  // 24: beerproto.v1.OilContentType.myrcene:type_name -> beerproto.v1.PercentType
	9,  // 25: beerproto.v1.OilContentType.pinene:type_name -> beerproto.v1.PercentType
	11, // 26: beerproto.v1.HopInventoryType.mass:type_name -> beerproto.v1.MassType
	12, // 27: beerproto.v1.HopInventoryType.volume:type_name -> beerproto.v1.VolumeType
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_beerproto_v1_hop_proto_init() }
func file_beerproto_v1_hop_proto_init() {
	if File_beerproto_v1_hop_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	file_beerproto_v1_hop_proto_msgTypes[2].OneofWrappers = []any{
		(*HopAdditionType_Mass)(nil),
		(*HopAdditionType_Volume)(nil),
	}
	file_beerproto_v1_hop_proto_msgTypes[5].OneofWrappers = []any{
		(*HopInventoryType_Mass)(nil),
		(*HopInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_hop_proto_rawDesc), len(file_beerproto_v1_hop_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_hop_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_hop_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_hop_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_hop_proto_msgTypes,
	}.Build()
	File_beerproto_v1_hop_proto = out.File
	file_beerproto_v1_hop_proto_goTypes = nil
	file_beerproto_v1_hop_proto_depIdxs = nil
}
