//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/beer.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Recipe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A collection of steps providing process information for common mashing procedures
	Mashes []*MashProcedureType `protobuf:"bytes,2,rep,name=mashes,proto3" json:"mashes,omitempty"`
	// Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer
	Recipes []*RecipeType `protobuf:"bytes,3,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// Records for adjuncts which do not contribute to the gravity of the beer
	MiscellaneousIngredients []*MiscellaneousType `protobuf:"bytes,4,rep,name=miscellaneous_ingredients,json=miscellaneousIngredients,proto3" json:"miscellaneous_ingredients,omitempty"`
	// Records detailing the characteristics of the beer styles for which judging guidelines have been established
	Styles []*StyleType `protobuf:"bytes,5,rep,name=styles,proto3" json:"styles,omitempty"`
	// A collection of steps providing process information for common fermentation procedures
	Fermentations []*FermentationProcedureType `protobuf:"bytes,6,rep,name=fermentations,proto3" json:"fermentations,omitempty"`
	// A collection of steps providing process information for common boil procedures
	Boil []*BoilProcedureType `protobuf:"bytes,7,rep,name=boil,proto3" json:"boil,omitempty"`
	// Explicitly encode version within list of records
	Version float64 `protobuf:"fixed64,8,opt,name=version,proto3" json:"version,omitempty"`
	// Records for any ingredient that contributes to the gravity of the beer
	Fermentables []*FermentableType `protobuf:"bytes,9,rep,name=fermentables,proto3" json:"fermentables,omitempty"`
	// Records detailing the wide array of unique cultures
	Cultures []*CultureInformation `protobuf:"bytes,10,rep,name=cultures,proto3" json:"cultures,omitempty"`
	// Provides necessary information for brewing equipment
	Equipments []*EquipmentType `protobuf:"bytes,11,rep,name=equipments,proto3" json:"equipments,omitempty"`
	// A collection of steps providing process information for common packaging procedures
	Packaging []*PackagingProcedureType `protobuf:"bytes,12,rep,name=packaging,proto3" json:"packaging,omitempty"`
	// Records detailing the many properties of unique hop varieties
	HopVarieties []*VarietyInformation `protobuf:"bytes,13,rep,name=hop_varieties,json=hopVarieties,proto3" json:"hop_varieties,omitempty"`
	// Records for water profiles used in brewing
	Profiles      []*WaterBase `protobuf:"bytes,14,rep,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_beerproto_v1_beer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_beer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_beer_proto_rawDescGZIP(), []int{0}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetMashes() []*MashProcedureType {
	if x != nil {
		return x.Mashes
	}
	return nil
}

func (x *Recipe) GetRecipes() []*RecipeType {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *Recipe) GetMiscellaneousIngredients() []*MiscellaneousType {
	if x != nil {
		return x.MiscellaneousIngredients
	}
	return nil
}

func (x *Recipe) GetStyles() []*StyleType {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *Recipe) GetFermentations() []*FermentationProcedureType {
	if x != nil {
		return x.Fermentations
	}
	return nil
}

func (x *Recipe) GetBoil() []*BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *Recipe) GetVersion() float64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Recipe) GetFermentables() []*FermentableType {
	if x != nil {
		return x.Fermentables
	}
	return nil
}

func (x *Recipe) GetCultures() []*CultureInformation {
	if x != nil {
		return x.Cultures
	}
	return nil
}

func (x *Recipe) GetEquipments() []*EquipmentType {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *Recipe) GetPackaging() []*PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *Recipe) GetHopVarieties() []*VarietyInformation {
	if x != nil {
		return x.HopVarieties
	}
	return nil
}

func (x *Recipe) GetProfiles() []*WaterBase {
	if x != nil {
		return x.Profiles
	}
	return nil
}

var File_beerproto_v1_beer_proto protoreflect.FileDescriptor

const file_beerproto_v1_beer_proto_rawDesc = "" +
	"\n" +
	"\x17beerproto/v1/beer.proto\x12\fbeerproto.v1\x1a\x17beerproto/v1/boil.proto\x1a\x1abeerproto/v1/culture.proto\x1a\x1cbeerproto/v1/equipment.proto\x1a\x1ebeerproto/v1/fermentable.proto\x1a\x1fbeerproto/v1/fermentation.proto\x1a\x16beerproto/v1/hop.proto\x1a\x17beerproto/v1/mash.proto\x1a\x17beerproto/v1/misc.proto\x1a\x1cbeerproto/v1/packaging.proto\x1a\x19beerproto/v1/recipe.proto\x1a\x18beerproto/v1/style.proto\x1a\x18beerproto/v1/water.proto\x1a\x1bbuf/validate/validate.proto\"\xc5\x06\n" +
	"\x06Recipe\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x127\n" +
	"\x06mashes\x18\x02 \x03(\v2\x1f.beerproto.v1.MashProcedureTypeR\x06mashes\x122\n" +
	"\arecipes\x18\x03 \x03(\v2\x18.beerproto.v1.RecipeTypeR\arecipes\x12\\\n" +
	"\x19miscellaneous_ingredients\x18\x04 \x03(\v2\x1f.beerproto.v1.MiscellaneousTypeR\x18miscellaneousIngredients\x12/\n" +
	"\x06styles\x18\x05 \x03(\v2\x17.beerproto.v1.StyleTypeR\x06styles\x12M\n" +
	"\rfermentations\x18\x06 \x03(\v2'.beerproto.v1.FermentationProcedureTypeR\rfermentations\x123\n" +
	"\x04boil\x18\a \x03(\v2\x1f.beerproto.v1.BoilProcedureTypeR\x04boil\x12 \n" +
	"\aversion\x18\b \x01(\x01B\x06\xbaH\x03\xc8\x01\x01R\aversion\x12A\n" +
	"\ffermentables\x18\t \x03(\v2\x1d.beerproto.v1.FermentableTypeR\ffermentables\x12<\n" +
	"\bcultures\x18\n" +
	" \x03(\v2 .beerproto.v1.CultureInformationR\bcultures\x12;\n" +
	"\n" +
	"equipments\x18\v \x03(\v2\x1b.beerproto.v1.EquipmentTypeR\n" +
	"equipments\x12B\n" +
	"\tpackaging\x18\f \x03(\v2$.beerproto.v1.PackagingProcedureTypeR\tpackaging\x12E\n" +
	"\rhop_varieties\x18\r \x03(\v2 .beerproto.v1.VarietyInformationR\fhopVarieties\x123\n" +
	"\bprofiles\x18\x0e \x03(\v2\x17.beerproto.v1.WaterBaseR\bprofilesB\xaa\x01\n" +
	"\x10com.beerproto.v1B\tBeerProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_beer_proto_rawDescOnce sync.Once
	file_beerproto_v1_beer_proto_rawDescData []byte
)

func file_beerproto_v1_beer_proto_rawDescGZIP() []byte {
	file_beerproto_v1_beer_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_beer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_beer_proto_rawDesc), len(file_beerproto_v1_beer_proto_rawDesc)))
	})
	return file_beerproto_v1_beer_proto_rawDescData
}

var file_beerproto_v1_beer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_beer_proto_goTypes = []any{
	(*Recipe)(nil),                    // 0: beerproto.v1.Recipe
	(*MashProcedureType)(nil),         // 1: beerproto.v1.MashProcedureType
	(*RecipeType)(nil),                // 2: beerproto.v1.RecipeType
	(*MiscellaneousType)(nil),         // 3: beerproto.v1.MiscellaneousType
	(*StyleType)(nil),                 // 4: beerproto.v1.StyleType
	(*FermentationProcedureType)(nil), // 5: beerproto.v1.FermentationProcedureType
	(*BoilProcedureType)(nil),         // 6: beerproto.v1.BoilProcedureType
	(*FermentableType)(nil),           // 7: beerproto.v1.FermentableType
	(*CultureInformation)(nil),        // 8: beerproto.v1.CultureInformation
	(*EquipmentType)(nil),             // 9: beerproto.v1.EquipmentType
	(*PackagingProcedureType)(nil),    // 10: beerproto.v1.PackagingProcedureType
	(*VarietyInformation)(nil),        // 11: beerproto.v1.VarietyInformation
	(*WaterBase)(nil),                 // 12: beerproto.v1.WaterBase
}
var file_beerproto_v1_beer_proto_depIdxs = []int32{
	1,  // 0: beerproto.v1.Recipe.mashes:type_name -> beerproto.v1.MashProcedureType
	2,  // 1: beerproto.v1.Recipe.recipes:type_name -> beerproto.v1.RecipeType
	3,  // 2: beerproto.v1.Recipe.miscellaneous_ingredients:type_name -> beerproto.v1.MiscellaneousType
	4,  // 3: beerproto.v1.Recipe.styles:type_name -> beerproto.v1.StyleType
	5,  // 4: beerproto.v1.Recipe.fermentations:type_name -> beerproto.v1.FermentationProcedureType
	6,  // 5: beerproto.v1.Recipe.boil:type_name -> beerproto.v1.BoilProcedureType
	7,  // 6: beerproto.v1.Recipe.fermentables:type_name -> beerproto.v1.FermentableType
	8,  // 7: beerproto.v1.Recipe.cultures:type_name -> beerproto.v1.CultureInformation
	9,  // 8: beerproto.v1.Recipe.equipments:type_name -> beerproto.v1.EquipmentType
	10, // 9: beerproto.v1.Recipe.packaging:type_name -> beerproto.v1.PackagingProcedureType
	11, // 10: beerproto.v1.Recipe.hop_varieties:type_name -> beerproto.v1.VarietyInformation
	12, // 11: beerproto.v1.Recipe.profiles:type_name -> beerproto.v1.WaterBase
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_beerproto_v1_beer_proto_init() }
func file_beerproto_v1_beer_proto_init() {
	if File_beerproto_v1_beer_proto != nil {
		return
	}
	file_beerproto_v1_boil_proto_init()
	file_beerproto_v1_culture_proto_init()
	file_beerproto_v1_equipment_proto_init()
	file_beerproto_v1_fermentable_proto_init()
	file_beerproto_v1_fermentation_proto_init()
	file_beerproto_v1_hop_proto_init()
	file_beerproto_v1_mash_proto_init()
	file_beerproto_v1_misc_proto_init()
	file_beerproto_v1_packaging_proto_init()
	file_beerproto_v1_recipe_proto_init()
	file_beerproto_v1_style_proto_init()
	file_beerproto_v1_water_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_beer_proto_rawDesc), len(file_beerproto_v1_beer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_beer_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_beer_proto_depIdxs,
		MessageInfos:      file_beerproto_v1_beer_proto_msgTypes,
	}.Build()
	File_beerproto_v1_beer_proto = out.File
	file_beerproto_v1_beer_proto_goTypes = nil
	file_beerproto_v1_beer_proto_depIdxs = nil
}
