//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/mash_step.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MashStepUnit int32

const (
	MashStepUnit_MASH_STEP_UNIT_UNSPECIFIED    MashStepUnit = 0
	MashStepUnit_MASH_STEP_UNIT_INFUSION       MashStepUnit = 1
	MashStepUnit_MASH_STEP_UNIT_TEMPERATURE    MashStepUnit = 2
	MashStepUnit_MASH_STEP_UNIT_DECOCTION      MashStepUnit = 3
	MashStepUnit_MASH_STEP_UNIT_SOURING_MASH   MashStepUnit = 4
	MashStepUnit_MASH_STEP_UNIT_SOURING_WORT   MashStepUnit = 5
	MashStepUnit_MASH_STEP_UNIT_DRAIN_MASH_TUN MashStepUnit = 6
	MashStepUnit_MASH_STEP_UNIT_SPARGE         MashStepUnit = 7
)

// Enum value maps for MashStepUnit.
var (
	MashStepUnit_name = map[int32]string{
		0: "MASH_STEP_UNIT_UNSPECIFIED",
		1: "MASH_STEP_UNIT_INFUSION",
		2: "MASH_STEP_UNIT_TEMPERATURE",
		3: "MASH_STEP_UNIT_DECOCTION",
		4: "MASH_STEP_UNIT_SOURING_MASH",
		5: "MASH_STEP_UNIT_SOURING_WORT",
		6: "MASH_STEP_UNIT_DRAIN_MASH_TUN",
		7: "MASH_STEP_UNIT_SPARGE",
	}
	MashStepUnit_value = map[string]int32{
		"MASH_STEP_UNIT_UNSPECIFIED":    0,
		"MASH_STEP_UNIT_INFUSION":       1,
		"MASH_STEP_UNIT_TEMPERATURE":    2,
		"MASH_STEP_UNIT_DECOCTION":      3,
		"MASH_STEP_UNIT_SOURING_MASH":   4,
		"MASH_STEP_UNIT_SOURING_WORT":   5,
		"MASH_STEP_UNIT_DRAIN_MASH_TUN": 6,
		"MASH_STEP_UNIT_SPARGE":         7,
	}
)

func (x MashStepUnit) Enum() *MashStepUnit {
	p := new(MashStepUnit)
	*p = x
	return p
}

func (x MashStepUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MashStepUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_mash_step_proto_enumTypes[0].Descriptor()
}

func (MashStepUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_mash_step_proto_enumTypes[0]
}

func (x MashStepUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MashStepUnit.Descriptor instead.
func (MashStepUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_mash_step_proto_rawDescGZIP(), []int{0}
}

// MashStepType - a per step representation occurring during the mash
type MashStepType struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StepTime *TimeType              `protobuf:"bytes,2,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
	RampTime       *TimeType        `protobuf:"bytes,3,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,4,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	Description    string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Temperature of the water for an infusion step
	InfuseTemperature *TemperatureType `protobuf:"bytes,6,opt,name=infuse_temperature,json=infuseTemperature,proto3" json:"infuse_temperature,omitempty"`
	StartPh           *AcidityType     `protobuf:"bytes,7,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh             *AcidityType     `protobuf:"bytes,8,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name              string           `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Type              MashStepUnit     `protobuf:"varint,10,opt,name=type,proto3,enum=beerproto.v1.MashStepUnit" json:"type,omitempty"`
	Amount            *VolumeType      `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	StepTemperature   *TemperatureType `protobuf:"bytes,12,opt,name=step_temperature,json=stepTemperature,proto3" json:"step_temperature,omitempty"`
	// Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
	WaterGrainRatio *SpecificVolumeType `protobuf:"bytes,13,opt,name=water_grain_ratio,json=waterGrainRatio,proto3" json:"water_grain_ratio,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MashStepType) Reset() {
	*x = MashStepType{}
	mi := &file_beerproto_v1_mash_step_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MashStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashStepType) ProtoMessage() {}

func (x *MashStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_mash_step_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashStepType.ProtoReflect.Descriptor instead.
func (*MashStepType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_mash_step_proto_rawDescGZIP(), []int{0}
}

func (x *MashStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MashStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *MashStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *MashStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *MashStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MashStepType) GetInfuseTemperature() *TemperatureType {
	if x != nil {
		return x.InfuseTemperature
	}
	return nil
}

func (x *MashStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *MashStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *MashStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MashStepType) GetType() MashStepUnit {
	if x != nil {
		return x.Type
	}
	return MashStepUnit_MASH_STEP_UNIT_UNSPECIFIED
}

func (x *MashStepType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MashStepType) GetStepTemperature() *TemperatureType {
	if x != nil {
		return x.StepTemperature
	}
	return nil
}

func (x *MashStepType) GetWaterGrainRatio() *SpecificVolumeType {
	if x != nil {
		return x.WaterGrainRatio
	}
	return nil
}

var File_beerproto_v1_mash_step_proto protoreflect.FileDescriptor

const file_beerproto_v1_mash_step_proto_rawDesc = "" +
	"\n" +
	"\x1cbeerproto/v1/mash_step.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\xec\x05\n" +
	"\fMashStepType\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12;\n" +
	"\tstep_time\x18\x02 \x01(\v2\x16.beerproto.v1.TimeTypeB\x06\xbaH\x03\xc8\x01\x01R\bstepTime\x123\n" +
	"\tramp_time\x18\x03 \x01(\v2\x16.beerproto.v1.TimeTypeR\brampTime\x12F\n" +
	"\x0fend_temperature\x18\x04 \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x0eendTemperature\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12L\n" +
	"\x12infuse_temperature\x18\x06 \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x11infuseTemperature\x124\n" +
	"\bstart_ph\x18\a \x01(\v2\x19.beerproto.v1.AcidityTypeR\astartPh\x120\n" +
	"\x06end_ph\x18\b \x01(\v2\x19.beerproto.v1.AcidityTypeR\x05endPh\x12\x1e\n" +
	"\x04name\x18\t \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12;\n" +
	"\x04type\x18\n" +
	" \x01(\x0e2\x1a.beerproto.v1.MashStepUnitB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04type\x120\n" +
	"\x06amount\x18\v \x01(\v2\x18.beerproto.v1.VolumeTypeR\x06amount\x12P\n" +
	"\x10step_temperature\x18\f \x01(\v2\x1d.beerproto.v1.TemperatureTypeB\x06\xbaH\x03\xc8\x01\x01R\x0fstepTemperature\x12L\n" +
	"\x11water_grain_ratio\x18\r \x01(\v2 .beerproto.v1.SpecificVolumeTypeR\x0fwaterGrainRatio*\x89\x02\n" +
	"\fMashStepUnit\x12\x1e\n" +
	"\x1aMASH_STEP_UNIT_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17MASH_STEP_UNIT_INFUSION\x10\x01\x12\x1e\n" +
	"\x1aMASH_STEP_UNIT_TEMPERATURE\x10\x02\x12\x1c\n" +
	"\x18MASH_STEP_UNIT_DECOCTION\x10\x03\x12\x1f\n" +
	"\x1bMASH_STEP_UNIT_SOURING_MASH\x10\x04\x12\x1f\n" +
	"\x1bMASH_STEP_UNIT_SOURING_WORT\x10\x05\x12!\n" +
	"\x1dMASH_STEP_UNIT_DRAIN_MASH_TUN\x10\x06\x12\x19\n" +
	"\x15MASH_STEP_UNIT_SPARGE\x10\aB\xae\x01\n" +
	"\x10com.beerproto.v1B\rMashStepProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_mash_step_proto_rawDescOnce sync.Once
	file_beerproto_v1_mash_step_proto_rawDescData []byte
)

func file_beerproto_v1_mash_step_proto_rawDescGZIP() []byte {
	file_beerproto_v1_mash_step_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_mash_step_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_mash_step_proto_rawDesc), len(file_beerproto_v1_mash_step_proto_rawDesc)))
	})
	return file_beerproto_v1_mash_step_proto_rawDescData
}

var file_beerproto_v1_mash_step_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_mash_step_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_mash_step_proto_goTypes = []any{
	(MashStepUnit)(0),          // 0: beerproto.v1.MashStepUnit
	(*MashStepType)(nil),       // 1: beerproto.v1.MashStepType
	(*TimeType)(nil),           // 2: beerproto.v1.TimeType
	(*TemperatureType)(nil),    // 3: beerproto.v1.TemperatureType
	(*AcidityType)(nil),        // 4: beerproto.v1.AcidityType
	(*VolumeType)(nil),         // 5: beerproto.v1.VolumeType
	(*SpecificVolumeType)(nil), // 6: beerproto.v1.SpecificVolumeType
}
var file_beerproto_v1_mash_step_proto_depIdxs = []int32{
	2,  // 0: beerproto.v1.MashStepType.step_time:type_name -> beerproto.v1.TimeType
	2,  // 1: beerproto.v1.MashStepType.ramp_time:type_name -> beerproto.v1.TimeType
	3,  // 2: beerproto.v1.MashStepType.end_temperature:type_name -> beerproto.v1.TemperatureType
	3,  // 3: beerproto.v1.MashStepType.infuse_temperature:type_name -> beerproto.v1.TemperatureType
	4,  // 4: beerproto.v1.MashStepType.start_ph:type_name -> beerproto.v1.AcidityType
	4,  // 5: beerproto.v1.MashStepType.end_ph:type_name -> beerproto.v1.AcidityType
	0,  // 6: beerproto.v1.MashStepType.type:type_name -> beerproto.v1.MashStepUnit
	5,  // 7: beerproto.v1.MashStepType.amount:type_name -> beerproto.v1.VolumeType
	3,  // 8: beerproto.v1.MashStepType.step_temperature:type_name -> beerproto.v1.TemperatureType
	6,  // 9: beerproto.v1.MashStepType.water_grain_ratio:type_name -> beerproto.v1.SpecificVolumeType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_beerproto_v1_mash_step_proto_init() }
func file_beerproto_v1_mash_step_proto_init() {
	if File_beerproto_v1_mash_step_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_mash_step_proto_rawDesc), len(file_beerproto_v1_mash_step_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_mash_step_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_mash_step_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_mash_step_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_mash_step_proto_msgTypes,
	}.Build()
	File_beerproto_v1_mash_step_proto = out.File
	file_beerproto_v1_mash_step_proto_goTypes = nil
	file_beerproto_v1_mash_step_proto_depIdxs = nil
}
