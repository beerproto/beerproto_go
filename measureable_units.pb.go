//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: beerproto/v1/measureable_units.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VolumeUnit int32

const (
	VolumeUnit_VOLUME_UNIT_UNSPECIFIED VolumeUnit = 0
	// ml
	VolumeUnit_VOLUME_UNIT_ML VolumeUnit = 1
	// l
	VolumeUnit_VOLUME_UNIT_L VolumeUnit = 2
	// tsp
	VolumeUnit_VOLUME_UNIT_TSP VolumeUnit = 3
	// tbsp
	VolumeUnit_VOLUME_UNIT_TBSP VolumeUnit = 4
	// floz
	VolumeUnit_VOLUME_UNIT_FLOZ VolumeUnit = 5
	// cup
	VolumeUnit_VOLUME_UNIT_CUP VolumeUnit = 6
	// pt
	VolumeUnit_VOLUME_UNIT_PT VolumeUnit = 7
	// qt
	VolumeUnit_VOLUME_UNIT_QT VolumeUnit = 8
	// gal
	VolumeUnit_VOLUME_UNIT_GAL VolumeUnit = 9
	// bbl
	VolumeUnit_VOLUME_UNIT_BBL VolumeUnit = 10
	// ifloz
	VolumeUnit_VOLUME_UNIT_IFOZ VolumeUnit = 11
	// ipt
	VolumeUnit_VOLUME_UNIT_IPT VolumeUnit = 12
	// iqt
	VolumeUnit_VOLUME_UNIT_IQT VolumeUnit = 13
	// igal
	VolumeUnit_VOLUME_UNIT_IGAL VolumeUnit = 14
	// ibbl
	VolumeUnit_VOLUME_UNIT_IBBL VolumeUnit = 15
)

// Enum value maps for VolumeUnit.
var (
	VolumeUnit_name = map[int32]string{
		0:  "VOLUME_UNIT_UNSPECIFIED",
		1:  "VOLUME_UNIT_ML",
		2:  "VOLUME_UNIT_L",
		3:  "VOLUME_UNIT_TSP",
		4:  "VOLUME_UNIT_TBSP",
		5:  "VOLUME_UNIT_FLOZ",
		6:  "VOLUME_UNIT_CUP",
		7:  "VOLUME_UNIT_PT",
		8:  "VOLUME_UNIT_QT",
		9:  "VOLUME_UNIT_GAL",
		10: "VOLUME_UNIT_BBL",
		11: "VOLUME_UNIT_IFOZ",
		12: "VOLUME_UNIT_IPT",
		13: "VOLUME_UNIT_IQT",
		14: "VOLUME_UNIT_IGAL",
		15: "VOLUME_UNIT_IBBL",
	}
	VolumeUnit_value = map[string]int32{
		"VOLUME_UNIT_UNSPECIFIED": 0,
		"VOLUME_UNIT_ML":          1,
		"VOLUME_UNIT_L":           2,
		"VOLUME_UNIT_TSP":         3,
		"VOLUME_UNIT_TBSP":        4,
		"VOLUME_UNIT_FLOZ":        5,
		"VOLUME_UNIT_CUP":         6,
		"VOLUME_UNIT_PT":          7,
		"VOLUME_UNIT_QT":          8,
		"VOLUME_UNIT_GAL":         9,
		"VOLUME_UNIT_BBL":         10,
		"VOLUME_UNIT_IFOZ":        11,
		"VOLUME_UNIT_IPT":         12,
		"VOLUME_UNIT_IQT":         13,
		"VOLUME_UNIT_IGAL":        14,
		"VOLUME_UNIT_IBBL":        15,
	}
)

func (x VolumeUnit) Enum() *VolumeUnit {
	p := new(VolumeUnit)
	*p = x
	return p
}

func (x VolumeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[0].Descriptor()
}

func (VolumeUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[0]
}

func (x VolumeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeUnit.Descriptor instead.
func (VolumeUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{0}
}

type MassUnit int32

const (
	MassUnit_MASS_UNIT_UNSPECIFIED MassUnit = 0
	// mg
	MassUnit_MASS_UNIT_MG MassUnit = 1
	// g
	MassUnit_MASS_UNIT_G MassUnit = 2
	// kg
	MassUnit_MASS_UNIT_KG MassUnit = 3
	// lb
	MassUnit_MASS_UNIT_LB MassUnit = 4
	// oz
	MassUnit_MASS_UNIT_OZ MassUnit = 5
)

// Enum value maps for MassUnit.
var (
	MassUnit_name = map[int32]string{
		0: "MASS_UNIT_UNSPECIFIED",
		1: "MASS_UNIT_MG",
		2: "MASS_UNIT_G",
		3: "MASS_UNIT_KG",
		4: "MASS_UNIT_LB",
		5: "MASS_UNIT_OZ",
	}
	MassUnit_value = map[string]int32{
		"MASS_UNIT_UNSPECIFIED": 0,
		"MASS_UNIT_MG":          1,
		"MASS_UNIT_G":           2,
		"MASS_UNIT_KG":          3,
		"MASS_UNIT_LB":          4,
		"MASS_UNIT_OZ":          5,
	}
)

func (x MassUnit) Enum() *MassUnit {
	p := new(MassUnit)
	*p = x
	return p
}

func (x MassUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[1].Descriptor()
}

func (MassUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[1]
}

func (x MassUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassUnit.Descriptor instead.
func (MassUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{1}
}

type DiastaticPowerUnit int32

const (
	DiastaticPowerUnit_DIASTATIC_POWER_UNIT_UNSPECIFIED DiastaticPowerUnit = 0
	// Lintner
	DiastaticPowerUnit_DIASTATIC_POWER_UNIT_LINTNER DiastaticPowerUnit = 1
	// Windischâ€“Kolbach
	DiastaticPowerUnit_DIASTATIC_POWER_UNIT_WK DiastaticPowerUnit = 2
)

// Enum value maps for DiastaticPowerUnit.
var (
	DiastaticPowerUnit_name = map[int32]string{
		0: "DIASTATIC_POWER_UNIT_UNSPECIFIED",
		1: "DIASTATIC_POWER_UNIT_LINTNER",
		2: "DIASTATIC_POWER_UNIT_WK",
	}
	DiastaticPowerUnit_value = map[string]int32{
		"DIASTATIC_POWER_UNIT_UNSPECIFIED": 0,
		"DIASTATIC_POWER_UNIT_LINTNER":     1,
		"DIASTATIC_POWER_UNIT_WK":          2,
	}
)

func (x DiastaticPowerUnit) Enum() *DiastaticPowerUnit {
	p := new(DiastaticPowerUnit)
	*p = x
	return p
}

func (x DiastaticPowerUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiastaticPowerUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[2].Descriptor()
}

func (DiastaticPowerUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[2]
}

func (x DiastaticPowerUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiastaticPowerUnit.Descriptor instead.
func (DiastaticPowerUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{2}
}

type TemperatureUnit int32

const (
	TemperatureUnit_TEMPERATURE_UNIT_UNSPECIFIED TemperatureUnit = 0
	TemperatureUnit_TEMPERATURE_UNIT_C           TemperatureUnit = 1
	TemperatureUnit_TEMPERATURE_UNIT_F           TemperatureUnit = 2
)

// Enum value maps for TemperatureUnit.
var (
	TemperatureUnit_name = map[int32]string{
		0: "TEMPERATURE_UNIT_UNSPECIFIED",
		1: "TEMPERATURE_UNIT_C",
		2: "TEMPERATURE_UNIT_F",
	}
	TemperatureUnit_value = map[string]int32{
		"TEMPERATURE_UNIT_UNSPECIFIED": 0,
		"TEMPERATURE_UNIT_C":           1,
		"TEMPERATURE_UNIT_F":           2,
	}
)

func (x TemperatureUnit) Enum() *TemperatureUnit {
	p := new(TemperatureUnit)
	*p = x
	return p
}

func (x TemperatureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[3].Descriptor()
}

func (TemperatureUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[3]
}

func (x TemperatureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureUnit.Descriptor instead.
func (TemperatureUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{3}
}

type AcidityUnit int32

const (
	AcidityUnit_ACIDITY_UNIT_UNSPECIFIED AcidityUnit = 0
	AcidityUnit_ACIDITY_UNIT_PH          AcidityUnit = 1
)

// Enum value maps for AcidityUnit.
var (
	AcidityUnit_name = map[int32]string{
		0: "ACIDITY_UNIT_UNSPECIFIED",
		1: "ACIDITY_UNIT_PH",
	}
	AcidityUnit_value = map[string]int32{
		"ACIDITY_UNIT_UNSPECIFIED": 0,
		"ACIDITY_UNIT_PH":          1,
	}
)

func (x AcidityUnit) Enum() *AcidityUnit {
	p := new(AcidityUnit)
	*p = x
	return p
}

func (x AcidityUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcidityUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[4].Descriptor()
}

func (AcidityUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[4]
}

func (x AcidityUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcidityUnit.Descriptor instead.
func (AcidityUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{4}
}

type TimeUnit int32

const (
	TimeUnit_TIME_UNIT_UNSPECIFIED TimeUnit = 0
	// sec
	TimeUnit_TIME_UNIT_SEC TimeUnit = 1
	// min
	TimeUnit_TIME_UNIT_MIN TimeUnit = 2
	// hr
	TimeUnit_TIME_UNIT_HR TimeUnit = 3
	// day
	TimeUnit_TIME_UNIT_DAY TimeUnit = 4
	// week
	TimeUnit_TIME_UNIT_WEEK TimeUnit = 5
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "TIME_UNIT_UNSPECIFIED",
		1: "TIME_UNIT_SEC",
		2: "TIME_UNIT_MIN",
		3: "TIME_UNIT_HR",
		4: "TIME_UNIT_DAY",
		5: "TIME_UNIT_WEEK",
	}
	TimeUnit_value = map[string]int32{
		"TIME_UNIT_UNSPECIFIED": 0,
		"TIME_UNIT_SEC":         1,
		"TIME_UNIT_MIN":         2,
		"TIME_UNIT_HR":          3,
		"TIME_UNIT_DAY":         4,
		"TIME_UNIT_WEEK":        5,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[5].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[5]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{5}
}

type ColorUnit int32

const (
	ColorUnit_COLOR_UNIT_UNSPECIFIED ColorUnit = 0
	// EBC
	ColorUnit_COLOR_UNIT_EBC ColorUnit = 1
	// Lovi
	ColorUnit_COLOR_UNIT_LOVI ColorUnit = 2
	// SRM
	ColorUnit_COLOR_UNIT_SRM ColorUnit = 3
)

// Enum value maps for ColorUnit.
var (
	ColorUnit_name = map[int32]string{
		0: "COLOR_UNIT_UNSPECIFIED",
		1: "COLOR_UNIT_EBC",
		2: "COLOR_UNIT_LOVI",
		3: "COLOR_UNIT_SRM",
	}
	ColorUnit_value = map[string]int32{
		"COLOR_UNIT_UNSPECIFIED": 0,
		"COLOR_UNIT_EBC":         1,
		"COLOR_UNIT_LOVI":        2,
		"COLOR_UNIT_SRM":         3,
	}
)

func (x ColorUnit) Enum() *ColorUnit {
	p := new(ColorUnit)
	*p = x
	return p
}

func (x ColorUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[6].Descriptor()
}

func (ColorUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[6]
}

func (x ColorUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorUnit.Descriptor instead.
func (ColorUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{6}
}

type CarbonationUnit int32

const (
	CarbonationUnit_CARBONATION_UNIT_UNSPECIFIED CarbonationUnit = 0
	// vols
	CarbonationUnit_CARBONATION_UNIT_VOLS CarbonationUnit = 1
	// g/l
	CarbonationUnit_CARBONATION_UNIT_GL CarbonationUnit = 2
)

// Enum value maps for CarbonationUnit.
var (
	CarbonationUnit_name = map[int32]string{
		0: "CARBONATION_UNIT_UNSPECIFIED",
		1: "CARBONATION_UNIT_VOLS",
		2: "CARBONATION_UNIT_GL",
	}
	CarbonationUnit_value = map[string]int32{
		"CARBONATION_UNIT_UNSPECIFIED": 0,
		"CARBONATION_UNIT_VOLS":        1,
		"CARBONATION_UNIT_GL":          2,
	}
)

func (x CarbonationUnit) Enum() *CarbonationUnit {
	p := new(CarbonationUnit)
	*p = x
	return p
}

func (x CarbonationUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarbonationUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[7].Descriptor()
}

func (CarbonationUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[7]
}

func (x CarbonationUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarbonationUnit.Descriptor instead.
func (CarbonationUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{7}
}

type BitternessUnit int32

const (
	BitternessUnit_BITTERNESS_UNIT_UNSPECIFIED BitternessUnit = 0
	// IBUs
	BitternessUnit_BITTERNESS_UNIT_IBUS BitternessUnit = 1
)

// Enum value maps for BitternessUnit.
var (
	BitternessUnit_name = map[int32]string{
		0: "BITTERNESS_UNIT_UNSPECIFIED",
		1: "BITTERNESS_UNIT_IBUS",
	}
	BitternessUnit_value = map[string]int32{
		"BITTERNESS_UNIT_UNSPECIFIED": 0,
		"BITTERNESS_UNIT_IBUS":        1,
	}
)

func (x BitternessUnit) Enum() *BitternessUnit {
	p := new(BitternessUnit)
	*p = x
	return p
}

func (x BitternessUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitternessUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[8].Descriptor()
}

func (BitternessUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[8]
}

func (x BitternessUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitternessUnit.Descriptor instead.
func (BitternessUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{8}
}

type GravityUnit int32

const (
	GravityUnit_GRAVITY_UNIT_UNSPECIFIED GravityUnit = 0
	// sg
	GravityUnit_GRAVITY_UNIT_SG GravityUnit = 1
	// plato
	GravityUnit_GRAVITY_UNIT_PLATO GravityUnit = 2
	// brix
	GravityUnit_GRAVITY_UNIT_BRIX GravityUnit = 3
)

// Enum value maps for GravityUnit.
var (
	GravityUnit_name = map[int32]string{
		0: "GRAVITY_UNIT_UNSPECIFIED",
		1: "GRAVITY_UNIT_SG",
		2: "GRAVITY_UNIT_PLATO",
		3: "GRAVITY_UNIT_BRIX",
	}
	GravityUnit_value = map[string]int32{
		"GRAVITY_UNIT_UNSPECIFIED": 0,
		"GRAVITY_UNIT_SG":          1,
		"GRAVITY_UNIT_PLATO":       2,
		"GRAVITY_UNIT_BRIX":        3,
	}
)

func (x GravityUnit) Enum() *GravityUnit {
	p := new(GravityUnit)
	*p = x
	return p
}

func (x GravityUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GravityUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[9].Descriptor()
}

func (GravityUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[9]
}

func (x GravityUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GravityUnit.Descriptor instead.
func (GravityUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{9}
}

type SpecificHeatUnit int32

const (
	SpecificHeatUnit_SPECIFIC_HEAT_UNIT_UNSPECIFIED SpecificHeatUnit = 0
	// Cal/(g C)
	SpecificHeatUnit_SPECIFIC_HEAT_UNIT_CALGC SpecificHeatUnit = 1
	// J/(kg K)
	SpecificHeatUnit_SPECIFIC_HEAT_UNIT_JKGK SpecificHeatUnit = 2
	// BTU/(lb F)
	SpecificHeatUnit_SPECIFIC_HEAT_UNIT_BTULBF SpecificHeatUnit = 3
)

// Enum value maps for SpecificHeatUnit.
var (
	SpecificHeatUnit_name = map[int32]string{
		0: "SPECIFIC_HEAT_UNIT_UNSPECIFIED",
		1: "SPECIFIC_HEAT_UNIT_CALGC",
		2: "SPECIFIC_HEAT_UNIT_JKGK",
		3: "SPECIFIC_HEAT_UNIT_BTULBF",
	}
	SpecificHeatUnit_value = map[string]int32{
		"SPECIFIC_HEAT_UNIT_UNSPECIFIED": 0,
		"SPECIFIC_HEAT_UNIT_CALGC":       1,
		"SPECIFIC_HEAT_UNIT_JKGK":        2,
		"SPECIFIC_HEAT_UNIT_BTULBF":      3,
	}
)

func (x SpecificHeatUnit) Enum() *SpecificHeatUnit {
	p := new(SpecificHeatUnit)
	*p = x
	return p
}

func (x SpecificHeatUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificHeatUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[10].Descriptor()
}

func (SpecificHeatUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[10]
}

func (x SpecificHeatUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificHeatUnit.Descriptor instead.
func (SpecificHeatUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{10}
}

type ConcentrationUnit int32

const (
	ConcentrationUnit_CONCENTRATION_UNIT_UNSPECIFIED ConcentrationUnit = 0
	// ppm
	ConcentrationUnit_CONCENTRATION_UNIT_PPM ConcentrationUnit = 1
	// ppb
	ConcentrationUnit_CONCENTRATION_UNIT_PPB ConcentrationUnit = 2
	// mg/l
	ConcentrationUnit_CONCENTRATION_UNIT_MGL ConcentrationUnit = 3
	// mg/100g
	ConcentrationUnit_CONCENTRATION_UNIT_MG100L ConcentrationUnit = 4
)

// Enum value maps for ConcentrationUnit.
var (
	ConcentrationUnit_name = map[int32]string{
		0: "CONCENTRATION_UNIT_UNSPECIFIED",
		1: "CONCENTRATION_UNIT_PPM",
		2: "CONCENTRATION_UNIT_PPB",
		3: "CONCENTRATION_UNIT_MGL",
		4: "CONCENTRATION_UNIT_MG100L",
	}
	ConcentrationUnit_value = map[string]int32{
		"CONCENTRATION_UNIT_UNSPECIFIED": 0,
		"CONCENTRATION_UNIT_PPM":         1,
		"CONCENTRATION_UNIT_PPB":         2,
		"CONCENTRATION_UNIT_MGL":         3,
		"CONCENTRATION_UNIT_MG100L":      4,
	}
)

func (x ConcentrationUnit) Enum() *ConcentrationUnit {
	p := new(ConcentrationUnit)
	*p = x
	return p
}

func (x ConcentrationUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcentrationUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[11].Descriptor()
}

func (ConcentrationUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[11]
}

func (x ConcentrationUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcentrationUnit.Descriptor instead.
func (ConcentrationUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{11}
}

type SpecificVolumeUnit int32

const (
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_UNSPECIFIED SpecificVolumeUnit = 0
	// qt/lb
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_QTLB SpecificVolumeUnit = 1
	// gal/lb
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_GALLB SpecificVolumeUnit = 2
	// gal/oz
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_GALOZ SpecificVolumeUnit = 3
	// l/g
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_LG SpecificVolumeUnit = 4
	// l/kg
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_LKG SpecificVolumeUnit = 5
	// floz/oz
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_FLOZOZ SpecificVolumeUnit = 6
	// m^3/kg
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_M3KG SpecificVolumeUnit = 7
	// ft^3/lb
	SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_FT3LB SpecificVolumeUnit = 8
)

// Enum value maps for SpecificVolumeUnit.
var (
	SpecificVolumeUnit_name = map[int32]string{
		0: "SPECIFIC_VOLUME_UNIT_UNSPECIFIED",
		1: "SPECIFIC_VOLUME_UNIT_QTLB",
		2: "SPECIFIC_VOLUME_UNIT_GALLB",
		3: "SPECIFIC_VOLUME_UNIT_GALOZ",
		4: "SPECIFIC_VOLUME_UNIT_LG",
		5: "SPECIFIC_VOLUME_UNIT_LKG",
		6: "SPECIFIC_VOLUME_UNIT_FLOZOZ",
		7: "SPECIFIC_VOLUME_UNIT_M3KG",
		8: "SPECIFIC_VOLUME_UNIT_FT3LB",
	}
	SpecificVolumeUnit_value = map[string]int32{
		"SPECIFIC_VOLUME_UNIT_UNSPECIFIED": 0,
		"SPECIFIC_VOLUME_UNIT_QTLB":        1,
		"SPECIFIC_VOLUME_UNIT_GALLB":       2,
		"SPECIFIC_VOLUME_UNIT_GALOZ":       3,
		"SPECIFIC_VOLUME_UNIT_LG":          4,
		"SPECIFIC_VOLUME_UNIT_LKG":         5,
		"SPECIFIC_VOLUME_UNIT_FLOZOZ":      6,
		"SPECIFIC_VOLUME_UNIT_M3KG":        7,
		"SPECIFIC_VOLUME_UNIT_FT3LB":       8,
	}
)

func (x SpecificVolumeUnit) Enum() *SpecificVolumeUnit {
	p := new(SpecificVolumeUnit)
	*p = x
	return p
}

func (x SpecificVolumeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificVolumeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[12].Descriptor()
}

func (SpecificVolumeUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[12]
}

func (x SpecificVolumeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificVolumeUnit.Descriptor instead.
func (SpecificVolumeUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{12}
}

type UnitUnit int32

const (
	UnitUnit_UNIT_UNIT_UNSPECIFIED UnitUnit = 0
	// 1
	UnitUnit_UNIT_UNIT_ONE UnitUnit = 1
	// unit
	UnitUnit_UNIT_UNIT_UNIT UnitUnit = 2
	// each
	UnitUnit_UNIT_UNIT_EACH UnitUnit = 3
	// dimensionless
	UnitUnit_UNIT_UNIT_DIMENSIONLESS UnitUnit = 4
	// pkg
	UnitUnit_UNIT_UNIT_PKG UnitUnit = 5
)

// Enum value maps for UnitUnit.
var (
	UnitUnit_name = map[int32]string{
		0: "UNIT_UNIT_UNSPECIFIED",
		1: "UNIT_UNIT_ONE",
		2: "UNIT_UNIT_UNIT",
		3: "UNIT_UNIT_EACH",
		4: "UNIT_UNIT_DIMENSIONLESS",
		5: "UNIT_UNIT_PKG",
	}
	UnitUnit_value = map[string]int32{
		"UNIT_UNIT_UNSPECIFIED":   0,
		"UNIT_UNIT_ONE":           1,
		"UNIT_UNIT_UNIT":          2,
		"UNIT_UNIT_EACH":          3,
		"UNIT_UNIT_DIMENSIONLESS": 4,
		"UNIT_UNIT_PKG":           5,
	}
)

func (x UnitUnit) Enum() *UnitUnit {
	p := new(UnitUnit)
	*p = x
	return p
}

func (x UnitUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[13].Descriptor()
}

func (UnitUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[13]
}

func (x UnitUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitUnit.Descriptor instead.
func (UnitUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{13}
}

type PercentUnit int32

const (
	PercentUnit_PERCENT_UNIT_UNSPECIFIED PercentUnit = 0
	// %
	PercentUnit_PERCENT_UNIT_PERCENT_SIGN PercentUnit = 1
)

// Enum value maps for PercentUnit.
var (
	PercentUnit_name = map[int32]string{
		0: "PERCENT_UNIT_UNSPECIFIED",
		1: "PERCENT_UNIT_PERCENT_SIGN",
	}
	PercentUnit_value = map[string]int32{
		"PERCENT_UNIT_UNSPECIFIED":  0,
		"PERCENT_UNIT_PERCENT_SIGN": 1,
	}
)

func (x PercentUnit) Enum() *PercentUnit {
	p := new(PercentUnit)
	*p = x
	return p
}

func (x PercentUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[14].Descriptor()
}

func (PercentUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[14]
}

func (x PercentUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentUnit.Descriptor instead.
func (PercentUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{14}
}

type ViscosityUnit int32

const (
	ViscosityUnit_VISCOSITY_UNIT_UNSPECIFIED ViscosityUnit = 0
	// cP
	ViscosityUnit_VISCOSITY_UNIT_CP ViscosityUnit = 1
	// mPa-s
	ViscosityUnit_VISCOSITY_UNIT_MPAS ViscosityUnit = 2
)

// Enum value maps for ViscosityUnit.
var (
	ViscosityUnit_name = map[int32]string{
		0: "VISCOSITY_UNIT_UNSPECIFIED",
		1: "VISCOSITY_UNIT_CP",
		2: "VISCOSITY_UNIT_MPAS",
	}
	ViscosityUnit_value = map[string]int32{
		"VISCOSITY_UNIT_UNSPECIFIED": 0,
		"VISCOSITY_UNIT_CP":          1,
		"VISCOSITY_UNIT_MPAS":        2,
	}
)

func (x ViscosityUnit) Enum() *ViscosityUnit {
	p := new(ViscosityUnit)
	*p = x
	return p
}

func (x ViscosityUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViscosityUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_measureable_units_proto_enumTypes[15].Descriptor()
}

func (ViscosityUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_measureable_units_proto_enumTypes[15]
}

func (x ViscosityUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViscosityUnit.Descriptor instead.
func (ViscosityUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{15}
}

type VolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64    `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  VolumeUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.VolumeUnit" json:"unit,omitempty"`
}

func (x *VolumeType) Reset() {
	*x = VolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeType) ProtoMessage() {}

func (x *VolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeType.ProtoReflect.Descriptor instead.
func (*VolumeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *VolumeType) GetUnit() VolumeUnit {
	if x != nil {
		return x.Unit
	}
	return VolumeUnit_VOLUME_UNIT_UNSPECIFIED
}

type MassType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  MassUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.MassUnit" json:"unit,omitempty"`
}

func (x *MassType) Reset() {
	*x = MassType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassType) ProtoMessage() {}

func (x *MassType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassType.ProtoReflect.Descriptor instead.
func (*MassType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{1}
}

func (x *MassType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MassType) GetUnit() MassUnit {
	if x != nil {
		return x.Unit
	}
	return MassUnit_MASS_UNIT_UNSPECIFIED
}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
type DiastaticPowerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64            `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  DiastaticPowerUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.DiastaticPowerUnit" json:"unit,omitempty"`
}

func (x *DiastaticPowerType) Reset() {
	*x = DiastaticPowerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiastaticPowerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiastaticPowerType) ProtoMessage() {}

func (x *DiastaticPowerType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiastaticPowerType.ProtoReflect.Descriptor instead.
func (*DiastaticPowerType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{2}
}

func (x *DiastaticPowerType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DiastaticPowerType) GetUnit() DiastaticPowerUnit {
	if x != nil {
		return x.Unit
	}
	return DiastaticPowerUnit_DIASTATIC_POWER_UNIT_UNSPECIFIED
}

type TemperatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64         `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TemperatureUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.TemperatureUnit" json:"unit,omitempty"`
}

func (x *TemperatureType) Reset() {
	*x = TemperatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureType) ProtoMessage() {}

func (x *TemperatureType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureType.ProtoReflect.Descriptor instead.
func (*TemperatureType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{3}
}

func (x *TemperatureType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TemperatureType) GetUnit() TemperatureUnit {
	if x != nil {
		return x.Unit
	}
	return TemperatureUnit_TEMPERATURE_UNIT_UNSPECIFIED
}

type AcidityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  AcidityUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.AcidityUnit" json:"unit,omitempty"`
}

func (x *AcidityType) Reset() {
	*x = AcidityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcidityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcidityType) ProtoMessage() {}

func (x *AcidityType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcidityType.ProtoReflect.Descriptor instead.
func (*AcidityType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{4}
}

func (x *AcidityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AcidityType) GetUnit() AcidityUnit {
	if x != nil {
		return x.Unit
	}
	return AcidityUnit_ACIDITY_UNIT_UNSPECIFIED
}

type TimeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TimeUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.TimeUnit" json:"unit,omitempty"`
}

func (x *TimeType) Reset() {
	*x = TimeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeType) ProtoMessage() {}

func (x *TimeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeType.ProtoReflect.Descriptor instead.
func (*TimeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{5}
}

func (x *TimeType) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeType) GetUnit() TimeUnit {
	if x != nil {
		return x.Unit
	}
	return TimeUnit_TIME_UNIT_UNSPECIFIED
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
type ColorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ColorUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.ColorUnit" json:"unit,omitempty"`
}

func (x *ColorType) Reset() {
	*x = ColorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorType) ProtoMessage() {}

func (x *ColorType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorType.ProtoReflect.Descriptor instead.
func (*ColorType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{6}
}

func (x *ColorType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ColorType) GetUnit() ColorUnit {
	if x != nil {
		return x.Unit
	}
	return ColorUnit_COLOR_UNIT_UNSPECIFIED
}

type CarbonationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64         `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  CarbonationUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.CarbonationUnit" json:"unit,omitempty"`
}

func (x *CarbonationType) Reset() {
	*x = CarbonationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationType) ProtoMessage() {}

func (x *CarbonationType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationType.ProtoReflect.Descriptor instead.
func (*CarbonationType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{7}
}

func (x *CarbonationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CarbonationType) GetUnit() CarbonationUnit {
	if x != nil {
		return x.Unit
	}
	return CarbonationUnit_CARBONATION_UNIT_UNSPECIFIED
}

type BitternessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64        `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  BitternessUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.BitternessUnit" json:"unit,omitempty"`
}

func (x *BitternessType) Reset() {
	*x = BitternessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessType) ProtoMessage() {}

func (x *BitternessType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessType.ProtoReflect.Descriptor instead.
func (*BitternessType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{8}
}

func (x *BitternessType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BitternessType) GetUnit() BitternessUnit {
	if x != nil {
		return x.Unit
	}
	return BitternessUnit_BITTERNESS_UNIT_UNSPECIFIED
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
type GravityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  GravityUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.GravityUnit" json:"unit,omitempty"`
}

func (x *GravityType) Reset() {
	*x = GravityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityType) ProtoMessage() {}

func (x *GravityType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityType.ProtoReflect.Descriptor instead.
func (*GravityType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{9}
}

func (x *GravityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GravityType) GetUnit() GravityUnit {
	if x != nil {
		return x.Unit
	}
	return GravityUnit_GRAVITY_UNIT_UNSPECIFIED
}

type SpecificHeatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64          `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificHeatUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.SpecificHeatUnit" json:"unit,omitempty"`
}

func (x *SpecificHeatType) Reset() {
	*x = SpecificHeatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificHeatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificHeatType) ProtoMessage() {}

func (x *SpecificHeatType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificHeatType.ProtoReflect.Descriptor instead.
func (*SpecificHeatType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{10}
}

func (x *SpecificHeatType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificHeatType) GetUnit() SpecificHeatUnit {
	if x != nil {
		return x.Unit
	}
	return SpecificHeatUnit_SPECIFIC_HEAT_UNIT_UNSPECIFIED
}

type ConcentrationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64           `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ConcentrationUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.ConcentrationUnit" json:"unit,omitempty"`
}

func (x *ConcentrationType) Reset() {
	*x = ConcentrationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationType) ProtoMessage() {}

func (x *ConcentrationType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationType.ProtoReflect.Descriptor instead.
func (*ConcentrationType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{11}
}

func (x *ConcentrationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConcentrationType) GetUnit() ConcentrationUnit {
	if x != nil {
		return x.Unit
	}
	return ConcentrationUnit_CONCENTRATION_UNIT_UNSPECIFIED
}

type SpecificVolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64            `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificVolumeUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.SpecificVolumeUnit" json:"unit,omitempty"`
}

func (x *SpecificVolumeType) Reset() {
	*x = SpecificVolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVolumeType) ProtoMessage() {}

func (x *SpecificVolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVolumeType.ProtoReflect.Descriptor instead.
func (*SpecificVolumeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{12}
}

func (x *SpecificVolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificVolumeType) GetUnit() SpecificVolumeUnit {
	if x != nil {
		return x.Unit
	}
	return SpecificVolumeUnit_SPECIFIC_VOLUME_UNIT_UNSPECIFIED
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
type UnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  UnitUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.UnitUnit" json:"unit,omitempty"`
}

func (x *UnitType) Reset() {
	*x = UnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitType) ProtoMessage() {}

func (x *UnitType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitType.ProtoReflect.Descriptor instead.
func (*UnitType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{13}
}

func (x *UnitType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnitType) GetUnit() UnitUnit {
	if x != nil {
		return x.Unit
	}
	return UnitUnit_UNIT_UNIT_UNSPECIFIED
}

type PercentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  PercentUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.PercentUnit" json:"unit,omitempty"`
}

func (x *PercentType) Reset() {
	*x = PercentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentType) ProtoMessage() {}

func (x *PercentType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentType.ProtoReflect.Descriptor instead.
func (*PercentType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{14}
}

func (x *PercentType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PercentType) GetUnit() PercentUnit {
	if x != nil {
		return x.Unit
	}
	return PercentUnit_PERCENT_UNIT_UNSPECIFIED
}

type ViscosityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64       `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ViscosityUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.v1.ViscosityUnit" json:"unit,omitempty"`
}

func (x *ViscosityType) Reset() {
	*x = ViscosityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViscosityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViscosityType) ProtoMessage() {}

func (x *ViscosityType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViscosityType.ProtoReflect.Descriptor instead.
func (*ViscosityType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{15}
}

func (x *ViscosityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ViscosityType) GetUnit() ViscosityUnit {
	if x != nil {
		return x.Unit
	}
	return ViscosityUnit_VISCOSITY_UNIT_UNSPECIFIED
}

type CarbonationRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *CarbonationType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *CarbonationType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *CarbonationRangeType) Reset() {
	*x = CarbonationRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationRangeType) ProtoMessage() {}

func (x *CarbonationRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationRangeType.ProtoReflect.Descriptor instead.
func (*CarbonationRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{16}
}

func (x *CarbonationRangeType) GetMinimum() *CarbonationType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *CarbonationRangeType) GetMaximum() *CarbonationType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type BitternessRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *BitternessType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *BitternessType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *BitternessRangeType) Reset() {
	*x = BitternessRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessRangeType) ProtoMessage() {}

func (x *BitternessRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessRangeType.ProtoReflect.Descriptor instead.
func (*BitternessRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{17}
}

func (x *BitternessRangeType) GetMinimum() *BitternessType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *BitternessRangeType) GetMaximum() *BitternessType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type TemperatureRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *TemperatureType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *TemperatureType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *TemperatureRangeType) Reset() {
	*x = TemperatureRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRangeType) ProtoMessage() {}

func (x *TemperatureRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRangeType.ProtoReflect.Descriptor instead.
func (*TemperatureRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{18}
}

func (x *TemperatureRangeType) GetMinimum() *TemperatureType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *TemperatureRangeType) GetMaximum() *TemperatureType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type ColorRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *ColorType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *ColorType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *ColorRangeType) Reset() {
	*x = ColorRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorRangeType) ProtoMessage() {}

func (x *ColorRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorRangeType.ProtoReflect.Descriptor instead.
func (*ColorRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{19}
}

func (x *ColorRangeType) GetMinimum() *ColorType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *ColorRangeType) GetMaximum() *ColorType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type GravityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *GravityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *GravityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *GravityRangeType) Reset() {
	*x = GravityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityRangeType) ProtoMessage() {}

func (x *GravityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityRangeType.ProtoReflect.Descriptor instead.
func (*GravityRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{20}
}

func (x *GravityRangeType) GetMinimum() *GravityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *GravityRangeType) GetMaximum() *GravityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type PercentRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *PercentType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *PercentType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *PercentRangeType) Reset() {
	*x = PercentRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentRangeType) ProtoMessage() {}

func (x *PercentRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentRangeType.ProtoReflect.Descriptor instead.
func (*PercentRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{21}
}

func (x *PercentRangeType) GetMinimum() *PercentType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *PercentRangeType) GetMaximum() *PercentType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type TimeRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *TimeType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *TimeType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *TimeRangeType) Reset() {
	*x = TimeRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRangeType) ProtoMessage() {}

func (x *TimeRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRangeType.ProtoReflect.Descriptor instead.
func (*TimeRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{22}
}

func (x *TimeRangeType) GetMinimum() *TimeType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *TimeRangeType) GetMaximum() *TimeType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type ViscosityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *ViscosityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *ViscosityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *ViscosityRangeType) Reset() {
	*x = ViscosityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViscosityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViscosityRangeType) ProtoMessage() {}

func (x *ViscosityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViscosityRangeType.ProtoReflect.Descriptor instead.
func (*ViscosityRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{23}
}

func (x *ViscosityRangeType) GetMinimum() *ViscosityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *ViscosityRangeType) GetMaximum() *ViscosityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type DiastaticPowerRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *DiastaticPowerType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *DiastaticPowerType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *DiastaticPowerRangeType) Reset() {
	*x = DiastaticPowerRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiastaticPowerRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiastaticPowerRangeType) ProtoMessage() {}

func (x *DiastaticPowerRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiastaticPowerRangeType.ProtoReflect.Descriptor instead.
func (*DiastaticPowerRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{24}
}

func (x *DiastaticPowerRangeType) GetMinimum() *DiastaticPowerType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *DiastaticPowerRangeType) GetMaximum() *DiastaticPowerType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type SpecificVolumeRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *SpecificVolumeType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *SpecificVolumeType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *SpecificVolumeRangeType) Reset() {
	*x = SpecificVolumeRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVolumeRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVolumeRangeType) ProtoMessage() {}

func (x *SpecificVolumeRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVolumeRangeType.ProtoReflect.Descriptor instead.
func (*SpecificVolumeRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{25}
}

func (x *SpecificVolumeRangeType) GetMinimum() *SpecificVolumeType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *SpecificVolumeRangeType) GetMaximum() *SpecificVolumeType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type AcidityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *AcidityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *AcidityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *AcidityRangeType) Reset() {
	*x = AcidityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcidityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcidityRangeType) ProtoMessage() {}

func (x *AcidityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcidityRangeType.ProtoReflect.Descriptor instead.
func (*AcidityRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{26}
}

func (x *AcidityRangeType) GetMinimum() *AcidityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *AcidityRangeType) GetMaximum() *AcidityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type ConcentrationRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *ConcentrationType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *ConcentrationType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *ConcentrationRangeType) Reset() {
	*x = ConcentrationRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_measureable_units_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationRangeType) ProtoMessage() {}

func (x *ConcentrationRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_measureable_units_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationRangeType.ProtoReflect.Descriptor instead.
func (*ConcentrationRangeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_measureable_units_proto_rawDescGZIP(), []int{27}
}

func (x *ConcentrationRangeType) GetMinimum() *ConcentrationType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *ConcentrationRangeType) GetMaximum() *ConcentrationType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

var File_beerproto_v1_measureable_units_proto protoreflect.FileDescriptor

var file_beerproto_v1_measureable_units_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x22, 0x50, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x52, 0x0a, 0x0b, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0x58, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x52, 0x0a, 0x0b, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x5c,
	0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65,
	0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x12,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4c,
	0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x52, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0x56, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x14,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x7c,
	0x0a, 0x10, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x7c, 0x0a, 0x10,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x73, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22,
	0x82, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x35, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x7c, 0x0a, 0x10,
	0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x39, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2a, 0xe4, 0x02, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x53,
	0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x54, 0x42, 0x53, 0x50, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x5a, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43,
	0x55, 0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x50, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x51, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x41, 0x4c, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x42, 0x42, 0x4c, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x46, 0x4f, 0x5a, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x50, 0x54, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x49, 0x51, 0x54, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x47, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x42, 0x42, 0x4c,
	0x10, 0x0f, 0x2a, 0x7e, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x47, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x42, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x5a,
	0x10, 0x05, 0x2a, 0x79, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x41, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x49, 0x41, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x41, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x57, 0x4b, 0x10, 0x02, 0x2a, 0x63, 0x0a,
	0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45,
	0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x46,
	0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0b, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x43, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x50, 0x48, 0x10, 0x01, 0x2a, 0x84, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x48, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x05, 0x2a, 0x64, 0x0a, 0x09, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x45, 0x42, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x56, 0x49, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x52, 0x4d, 0x10,
	0x03, 0x2a, 0x67, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x53, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x4c, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x0e, 0x42, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x49, 0x42, 0x55, 0x53, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x41,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x4f, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x42, 0x52, 0x49, 0x58, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x48, 0x45,
	0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x47, 0x43, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4a, 0x4b, 0x47, 0x4b, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x42, 0x54, 0x55, 0x4c, 0x42, 0x46, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x50, 0x4d, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x50, 0x42, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x47, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e,
	0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4d, 0x47, 0x31, 0x30, 0x30, 0x4c, 0x10, 0x04, 0x2a, 0xb4, 0x02, 0x0a, 0x12, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x51, 0x54,
	0x4c, 0x42, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x41, 0x4c,
	0x4c, 0x42, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x47, 0x41, 0x4c,
	0x4f, 0x5a, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x47, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4b, 0x47, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x5a, 0x4f, 0x5a, 0x10, 0x06,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x33, 0x4b, 0x47, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x54, 0x33, 0x4c, 0x42, 0x10, 0x08, 0x2a,
	0x90, 0x01, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x41, 0x43, 0x48,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x4b, 0x47,
	0x10, 0x05, 0x2a, 0x4a, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x2a, 0x5f,
	0x0a, 0x0d, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x1a, 0x56, 0x49, 0x53, 0x43, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x56, 0x49, 0x53, 0x43, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x43, 0x4f, 0x53,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x50, 0x41, 0x53, 0x10, 0x02, 0x42,
	0xb6, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f,
	0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa,
	0x02, 0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18,
	0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_measureable_units_proto_rawDescOnce sync.Once
	file_beerproto_v1_measureable_units_proto_rawDescData = file_beerproto_v1_measureable_units_proto_rawDesc
)

func file_beerproto_v1_measureable_units_proto_rawDescGZIP() []byte {
	file_beerproto_v1_measureable_units_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_measureable_units_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_measureable_units_proto_rawDescData)
	})
	return file_beerproto_v1_measureable_units_proto_rawDescData
}

var file_beerproto_v1_measureable_units_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_beerproto_v1_measureable_units_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_beerproto_v1_measureable_units_proto_goTypes = []interface{}{
	(VolumeUnit)(0),                 // 0: beerproto.v1.VolumeUnit
	(MassUnit)(0),                   // 1: beerproto.v1.MassUnit
	(DiastaticPowerUnit)(0),         // 2: beerproto.v1.DiastaticPowerUnit
	(TemperatureUnit)(0),            // 3: beerproto.v1.TemperatureUnit
	(AcidityUnit)(0),                // 4: beerproto.v1.AcidityUnit
	(TimeUnit)(0),                   // 5: beerproto.v1.TimeUnit
	(ColorUnit)(0),                  // 6: beerproto.v1.ColorUnit
	(CarbonationUnit)(0),            // 7: beerproto.v1.CarbonationUnit
	(BitternessUnit)(0),             // 8: beerproto.v1.BitternessUnit
	(GravityUnit)(0),                // 9: beerproto.v1.GravityUnit
	(SpecificHeatUnit)(0),           // 10: beerproto.v1.SpecificHeatUnit
	(ConcentrationUnit)(0),          // 11: beerproto.v1.ConcentrationUnit
	(SpecificVolumeUnit)(0),         // 12: beerproto.v1.SpecificVolumeUnit
	(UnitUnit)(0),                   // 13: beerproto.v1.UnitUnit
	(PercentUnit)(0),                // 14: beerproto.v1.PercentUnit
	(ViscosityUnit)(0),              // 15: beerproto.v1.ViscosityUnit
	(*VolumeType)(nil),              // 16: beerproto.v1.VolumeType
	(*MassType)(nil),                // 17: beerproto.v1.MassType
	(*DiastaticPowerType)(nil),      // 18: beerproto.v1.DiastaticPowerType
	(*TemperatureType)(nil),         // 19: beerproto.v1.TemperatureType
	(*AcidityType)(nil),             // 20: beerproto.v1.AcidityType
	(*TimeType)(nil),                // 21: beerproto.v1.TimeType
	(*ColorType)(nil),               // 22: beerproto.v1.ColorType
	(*CarbonationType)(nil),         // 23: beerproto.v1.CarbonationType
	(*BitternessType)(nil),          // 24: beerproto.v1.BitternessType
	(*GravityType)(nil),             // 25: beerproto.v1.GravityType
	(*SpecificHeatType)(nil),        // 26: beerproto.v1.SpecificHeatType
	(*ConcentrationType)(nil),       // 27: beerproto.v1.ConcentrationType
	(*SpecificVolumeType)(nil),      // 28: beerproto.v1.SpecificVolumeType
	(*UnitType)(nil),                // 29: beerproto.v1.UnitType
	(*PercentType)(nil),             // 30: beerproto.v1.PercentType
	(*ViscosityType)(nil),           // 31: beerproto.v1.ViscosityType
	(*CarbonationRangeType)(nil),    // 32: beerproto.v1.CarbonationRangeType
	(*BitternessRangeType)(nil),     // 33: beerproto.v1.BitternessRangeType
	(*TemperatureRangeType)(nil),    // 34: beerproto.v1.TemperatureRangeType
	(*ColorRangeType)(nil),          // 35: beerproto.v1.ColorRangeType
	(*GravityRangeType)(nil),        // 36: beerproto.v1.GravityRangeType
	(*PercentRangeType)(nil),        // 37: beerproto.v1.PercentRangeType
	(*TimeRangeType)(nil),           // 38: beerproto.v1.TimeRangeType
	(*ViscosityRangeType)(nil),      // 39: beerproto.v1.ViscosityRangeType
	(*DiastaticPowerRangeType)(nil), // 40: beerproto.v1.DiastaticPowerRangeType
	(*SpecificVolumeRangeType)(nil), // 41: beerproto.v1.SpecificVolumeRangeType
	(*AcidityRangeType)(nil),        // 42: beerproto.v1.AcidityRangeType
	(*ConcentrationRangeType)(nil),  // 43: beerproto.v1.ConcentrationRangeType
}
var file_beerproto_v1_measureable_units_proto_depIdxs = []int32{
	0,  // 0: beerproto.v1.VolumeType.unit:type_name -> beerproto.v1.VolumeUnit
	1,  // 1: beerproto.v1.MassType.unit:type_name -> beerproto.v1.MassUnit
	2,  // 2: beerproto.v1.DiastaticPowerType.unit:type_name -> beerproto.v1.DiastaticPowerUnit
	3,  // 3: beerproto.v1.TemperatureType.unit:type_name -> beerproto.v1.TemperatureUnit
	4,  // 4: beerproto.v1.AcidityType.unit:type_name -> beerproto.v1.AcidityUnit
	5,  // 5: beerproto.v1.TimeType.unit:type_name -> beerproto.v1.TimeUnit
	6,  // 6: beerproto.v1.ColorType.unit:type_name -> beerproto.v1.ColorUnit
	7,  // 7: beerproto.v1.CarbonationType.unit:type_name -> beerproto.v1.CarbonationUnit
	8,  // 8: beerproto.v1.BitternessType.unit:type_name -> beerproto.v1.BitternessUnit
	9,  // 9: beerproto.v1.GravityType.unit:type_name -> beerproto.v1.GravityUnit
	10, // 10: beerproto.v1.SpecificHeatType.unit:type_name -> beerproto.v1.SpecificHeatUnit
	11, // 11: beerproto.v1.ConcentrationType.unit:type_name -> beerproto.v1.ConcentrationUnit
	12, // 12: beerproto.v1.SpecificVolumeType.unit:type_name -> beerproto.v1.SpecificVolumeUnit
	13, // 13: beerproto.v1.UnitType.unit:type_name -> beerproto.v1.UnitUnit
	14, // 14: beerproto.v1.PercentType.unit:type_name -> beerproto.v1.PercentUnit
	15, // 15: beerproto.v1.ViscosityType.unit:type_name -> beerproto.v1.ViscosityUnit
	23, // 16: beerproto.v1.CarbonationRangeType.minimum:type_name -> beerproto.v1.CarbonationType
	23, // 17: beerproto.v1.CarbonationRangeType.maximum:type_name -> beerproto.v1.CarbonationType
	24, // 18: beerproto.v1.BitternessRangeType.minimum:type_name -> beerproto.v1.BitternessType
	24, // 19: beerproto.v1.BitternessRangeType.maximum:type_name -> beerproto.v1.BitternessType
	19, // 20: beerproto.v1.TemperatureRangeType.minimum:type_name -> beerproto.v1.TemperatureType
	19, // 21: beerproto.v1.TemperatureRangeType.maximum:type_name -> beerproto.v1.TemperatureType
	22, // 22: beerproto.v1.ColorRangeType.minimum:type_name -> beerproto.v1.ColorType
	22, // 23: beerproto.v1.ColorRangeType.maximum:type_name -> beerproto.v1.ColorType
	25, // 24: beerproto.v1.GravityRangeType.minimum:type_name -> beerproto.v1.GravityType
	25, // 25: beerproto.v1.GravityRangeType.maximum:type_name -> beerproto.v1.GravityType
	30, // 26: beerproto.v1.PercentRangeType.minimum:type_name -> beerproto.v1.PercentType
	30, // 27: beerproto.v1.PercentRangeType.maximum:type_name -> beerproto.v1.PercentType
	21, // 28: beerproto.v1.TimeRangeType.minimum:type_name -> beerproto.v1.TimeType
	21, // 29: beerproto.v1.TimeRangeType.maximum:type_name -> beerproto.v1.TimeType
	31, // 30: beerproto.v1.ViscosityRangeType.minimum:type_name -> beerproto.v1.ViscosityType
	31, // 31: beerproto.v1.ViscosityRangeType.maximum:type_name -> beerproto.v1.ViscosityType
	18, // 32: beerproto.v1.DiastaticPowerRangeType.minimum:type_name -> beerproto.v1.DiastaticPowerType
	18, // 33: beerproto.v1.DiastaticPowerRangeType.maximum:type_name -> beerproto.v1.DiastaticPowerType
	28, // 34: beerproto.v1.SpecificVolumeRangeType.minimum:type_name -> beerproto.v1.SpecificVolumeType
	28, // 35: beerproto.v1.SpecificVolumeRangeType.maximum:type_name -> beerproto.v1.SpecificVolumeType
	20, // 36: beerproto.v1.AcidityRangeType.minimum:type_name -> beerproto.v1.AcidityType
	20, // 37: beerproto.v1.AcidityRangeType.maximum:type_name -> beerproto.v1.AcidityType
	27, // 38: beerproto.v1.ConcentrationRangeType.minimum:type_name -> beerproto.v1.ConcentrationType
	27, // 39: beerproto.v1.ConcentrationRangeType.maximum:type_name -> beerproto.v1.ConcentrationType
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_beerproto_v1_measureable_units_proto_init() }
func file_beerproto_v1_measureable_units_proto_init() {
	if File_beerproto_v1_measureable_units_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_measureable_units_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiastaticPowerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcidityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificHeatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViscosityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViscosityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiastaticPowerRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVolumeRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcidityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_measureable_units_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_measureable_units_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_measureable_units_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_measureable_units_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_measureable_units_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_measureable_units_proto_msgTypes,
	}.Build()
	File_beerproto_v1_measureable_units_proto = out.File
	file_beerproto_v1_measureable_units_proto_rawDesc = nil
	file_beerproto_v1_measureable_units_proto_goTypes = nil
	file_beerproto_v1_measureable_units_proto_depIdxs = nil
}
