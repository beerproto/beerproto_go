//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/boil_step.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BoilStepTypeChillingType int32

const (
	BoilStepTypeChillingType_BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED BoilStepTypeChillingType = 0
	// batch
	BoilStepTypeChillingType_BOIL_STEP_TYPE_CHILLING_TYPE_BATCH BoilStepTypeChillingType = 1
	// inline
	BoilStepTypeChillingType_BOIL_STEP_TYPE_CHILLING_TYPE_INLINE BoilStepTypeChillingType = 2
)

// Enum value maps for BoilStepTypeChillingType.
var (
	BoilStepTypeChillingType_name = map[int32]string{
		0: "BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED",
		1: "BOIL_STEP_TYPE_CHILLING_TYPE_BATCH",
		2: "BOIL_STEP_TYPE_CHILLING_TYPE_INLINE",
	}
	BoilStepTypeChillingType_value = map[string]int32{
		"BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED": 0,
		"BOIL_STEP_TYPE_CHILLING_TYPE_BATCH":       1,
		"BOIL_STEP_TYPE_CHILLING_TYPE_INLINE":      2,
	}
)

func (x BoilStepTypeChillingType) Enum() *BoilStepTypeChillingType {
	p := new(BoilStepTypeChillingType)
	*p = x
	return p
}

func (x BoilStepTypeChillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoilStepTypeChillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_boil_step_proto_enumTypes[0].Descriptor()
}

func (BoilStepTypeChillingType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_boil_step_proto_enumTypes[0]
}

func (x BoilStepTypeChillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoilStepTypeChillingType.Descriptor instead.
func (BoilStepTypeChillingType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_boil_step_proto_rawDescGZIP(), []int{0}
}

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
type BoilStepType struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Id             string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EndGravity     *GravityType             `protobuf:"bytes,2,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	ChillingType   BoilStepTypeChillingType `protobuf:"varint,3,opt,name=chilling_type,json=chillingType,proto3,enum=beerproto.v1.BoilStepTypeChillingType" json:"chilling_type,omitempty"`
	Description    string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	EndTemperature *TemperatureType         `protobuf:"bytes,5,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	// The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
	RampTime         *TimeType        `protobuf:"bytes,6,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	StepTime         *TimeType        `protobuf:"bytes,7,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,8,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,9,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,10,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name             string           `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,12,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BoilStepType) Reset() {
	*x = BoilStepType{}
	mi := &file_beerproto_v1_boil_step_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoilStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoilStepType) ProtoMessage() {}

func (x *BoilStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_boil_step_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoilStepType.ProtoReflect.Descriptor instead.
func (*BoilStepType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_boil_step_proto_rawDescGZIP(), []int{0}
}

func (x *BoilStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BoilStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *BoilStepType) GetChillingType() BoilStepTypeChillingType {
	if x != nil {
		return x.ChillingType
	}
	return BoilStepTypeChillingType_BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED
}

func (x *BoilStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BoilStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *BoilStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *BoilStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *BoilStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *BoilStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *BoilStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *BoilStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoilStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

var File_beerproto_v1_boil_step_proto protoreflect.FileDescriptor

const file_beerproto_v1_boil_step_proto_rawDesc = "" +
	"\n" +
	"\x1cbeerproto/v1/boil_step.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\x90\x05\n" +
	"\fBoilStepType\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12:\n" +
	"\vend_gravity\x18\x02 \x01(\v2\x19.beerproto.v1.GravityTypeR\n" +
	"endGravity\x12K\n" +
	"\rchilling_type\x18\x03 \x01(\x0e2&.beerproto.v1.BoilStepTypeChillingTypeR\fchillingType\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12F\n" +
	"\x0fend_temperature\x18\x05 \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x0eendTemperature\x123\n" +
	"\tramp_time\x18\x06 \x01(\v2\x16.beerproto.v1.TimeTypeR\brampTime\x123\n" +
	"\tstep_time\x18\a \x01(\v2\x16.beerproto.v1.TimeTypeR\bstepTime\x12>\n" +
	"\rstart_gravity\x18\b \x01(\v2\x19.beerproto.v1.GravityTypeR\fstartGravity\x124\n" +
	"\bstart_ph\x18\t \x01(\v2\x19.beerproto.v1.AcidityTypeR\astartPh\x120\n" +
	"\x06end_ph\x18\n" +
	" \x01(\v2\x19.beerproto.v1.AcidityTypeR\x05endPh\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12J\n" +
	"\x11start_temperature\x18\f \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x10startTemperature*\x99\x01\n" +
	"\x18BoilStepTypeChillingType\x12,\n" +
	"(BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"BOIL_STEP_TYPE_CHILLING_TYPE_BATCH\x10\x01\x12'\n" +
	"#BOIL_STEP_TYPE_CHILLING_TYPE_INLINE\x10\x02B\xae\x01\n" +
	"\x10com.beerproto.v1B\rBoilStepProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_boil_step_proto_rawDescOnce sync.Once
	file_beerproto_v1_boil_step_proto_rawDescData []byte
)

func file_beerproto_v1_boil_step_proto_rawDescGZIP() []byte {
	file_beerproto_v1_boil_step_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_boil_step_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_boil_step_proto_rawDesc), len(file_beerproto_v1_boil_step_proto_rawDesc)))
	})
	return file_beerproto_v1_boil_step_proto_rawDescData
}

var file_beerproto_v1_boil_step_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_boil_step_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_boil_step_proto_goTypes = []any{
	(BoilStepTypeChillingType)(0), // 0: beerproto.v1.BoilStepTypeChillingType
	(*BoilStepType)(nil),          // 1: beerproto.v1.BoilStepType
	(*GravityType)(nil),           // 2: beerproto.v1.GravityType
	(*TemperatureType)(nil),       // 3: beerproto.v1.TemperatureType
	(*TimeType)(nil),              // 4: beerproto.v1.TimeType
	(*AcidityType)(nil),           // 5: beerproto.v1.AcidityType
}
var file_beerproto_v1_boil_step_proto_depIdxs = []int32{
	2, // 0: beerproto.v1.BoilStepType.end_gravity:type_name -> beerproto.v1.GravityType
	0, // 1: beerproto.v1.BoilStepType.chilling_type:type_name -> beerproto.v1.BoilStepTypeChillingType
	3, // 2: beerproto.v1.BoilStepType.end_temperature:type_name -> beerproto.v1.TemperatureType
	4, // 3: beerproto.v1.BoilStepType.ramp_time:type_name -> beerproto.v1.TimeType
	4, // 4: beerproto.v1.BoilStepType.step_time:type_name -> beerproto.v1.TimeType
	2, // 5: beerproto.v1.BoilStepType.start_gravity:type_name -> beerproto.v1.GravityType
	5, // 6: beerproto.v1.BoilStepType.start_ph:type_name -> beerproto.v1.AcidityType
	5, // 7: beerproto.v1.BoilStepType.end_ph:type_name -> beerproto.v1.AcidityType
	3, // 8: beerproto.v1.BoilStepType.start_temperature:type_name -> beerproto.v1.TemperatureType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_beerproto_v1_boil_step_proto_init() }
func file_beerproto_v1_boil_step_proto_init() {
	if File_beerproto_v1_boil_step_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_boil_step_proto_rawDesc), len(file_beerproto_v1_boil_step_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_boil_step_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_boil_step_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_boil_step_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_boil_step_proto_msgTypes,
	}.Build()
	File_beerproto_v1_boil_step_proto = out.File
	file_beerproto_v1_boil_step_proto_goTypes = nil
	file_beerproto_v1_boil_step_proto_depIdxs = nil
}
