//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/style.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StyleCategories int32

const (
	StyleCategories_STYLE_CATEGORIES_UNSPECIFIED StyleCategories = 0
	// beer
	StyleCategories_STYLE_CATEGORIES_BEER StyleCategories = 1
	// cider
	StyleCategories_STYLE_CATEGORIES_CIDER StyleCategories = 2
	// kombucha
	StyleCategories_STYLE_CATEGORIES_KOMBUCHA StyleCategories = 3
	// mead
	StyleCategories_STYLE_CATEGORIES_MEAD StyleCategories = 4
	// soda
	StyleCategories_STYLE_CATEGORIES_SODA StyleCategories = 5
	// wine
	StyleCategories_STYLE_CATEGORIES_WINE StyleCategories = 6
	// other
	StyleCategories_STYLE_CATEGORIES_OTHER StyleCategories = 7
)

// Enum value maps for StyleCategories.
var (
	StyleCategories_name = map[int32]string{
		0: "STYLE_CATEGORIES_UNSPECIFIED",
		1: "STYLE_CATEGORIES_BEER",
		2: "STYLE_CATEGORIES_CIDER",
		3: "STYLE_CATEGORIES_KOMBUCHA",
		4: "STYLE_CATEGORIES_MEAD",
		5: "STYLE_CATEGORIES_SODA",
		6: "STYLE_CATEGORIES_WINE",
		7: "STYLE_CATEGORIES_OTHER",
	}
	StyleCategories_value = map[string]int32{
		"STYLE_CATEGORIES_UNSPECIFIED": 0,
		"STYLE_CATEGORIES_BEER":        1,
		"STYLE_CATEGORIES_CIDER":       2,
		"STYLE_CATEGORIES_KOMBUCHA":    3,
		"STYLE_CATEGORIES_MEAD":        4,
		"STYLE_CATEGORIES_SODA":        5,
		"STYLE_CATEGORIES_WINE":        6,
		"STYLE_CATEGORIES_OTHER":       7,
	}
)

func (x StyleCategories) Enum() *StyleCategories {
	p := new(StyleCategories)
	*p = x
	return p
}

func (x StyleCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_style_proto_enumTypes[0].Descriptor()
}

func (StyleCategories) Type() protoreflect.EnumType {
	return &file_beerproto_v1_style_proto_enumTypes[0]
}

func (x StyleCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StyleCategories.Descriptor instead.
func (StyleCategories) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_style_proto_rawDescGZIP(), []int{0}
}

type StyleBase struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category       string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	CategoryNumber int32                  `protobuf:"varint,3,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	StyleLetter    string                 `protobuf:"bytes,4,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	StyleGuide     string                 `protobuf:"bytes,5,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
	Type           StyleCategories        `protobuf:"varint,6,opt,name=type,proto3,enum=beerproto.v1.StyleCategories" json:"type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StyleBase) Reset() {
	*x = StyleBase{}
	mi := &file_beerproto_v1_style_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StyleBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleBase) ProtoMessage() {}

func (x *StyleBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_style_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleBase.ProtoReflect.Descriptor instead.
func (*StyleBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_style_proto_rawDescGZIP(), []int{0}
}

func (x *StyleBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StyleBase) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StyleBase) GetCategoryNumber() int32 {
	if x != nil {
		return x.CategoryNumber
	}
	return 0
}

func (x *StyleBase) GetStyleLetter() string {
	if x != nil {
		return x.StyleLetter
	}
	return ""
}

func (x *StyleBase) GetStyleGuide() string {
	if x != nil {
		return x.StyleGuide
	}
	return ""
}

func (x *StyleBase) GetType() StyleCategories {
	if x != nil {
		return x.Type
	}
	return StyleCategories_STYLE_CATEGORIES_UNSPECIFIED
}

// StyleType provide information for Style categorization
type StyleType struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Base                         *StyleBase             `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id                           string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Aroma                        string                 `protobuf:"bytes,3,opt,name=aroma,proto3" json:"aroma,omitempty"`
	Ingredients                  string                 `protobuf:"bytes,4,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	Notes                        string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	Flavor                       string                 `protobuf:"bytes,6,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mouthfeel                    string                 `protobuf:"bytes,7,opt,name=mouthfeel,proto3" json:"mouthfeel,omitempty"`
	FinalGravity                 *GravityRangeType      `protobuf:"bytes,8,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	Color                        *ColorRangeType        `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`
	OriginalGravity              *GravityRangeType      `protobuf:"bytes,10,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	Examples                     string                 `protobuf:"bytes,11,opt,name=examples,proto3" json:"examples,omitempty"`
	Carbonation                  *CarbonationRangeType  `protobuf:"bytes,12,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	AlcoholByVolume              *PercentRangeType      `protobuf:"bytes,13,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	InternationalBitternessUnits *BitternessRangeType   `protobuf:"bytes,14,opt,name=international_bitterness_units,json=internationalBitternessUnits,proto3" json:"international_bitterness_units,omitempty"`
	Appearance                   string                 `protobuf:"bytes,15,opt,name=appearance,proto3" json:"appearance,omitempty"`
	OverallImpression            string                 `protobuf:"bytes,16,opt,name=overall_impression,json=overallImpression,proto3" json:"overall_impression,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *StyleType) Reset() {
	*x = StyleType{}
	mi := &file_beerproto_v1_style_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleType) ProtoMessage() {}

func (x *StyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_style_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleType.ProtoReflect.Descriptor instead.
func (*StyleType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_style_proto_rawDescGZIP(), []int{1}
}

func (x *StyleType) GetBase() *StyleBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StyleType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StyleType) GetAroma() string {
	if x != nil {
		return x.Aroma
	}
	return ""
}

func (x *StyleType) GetIngredients() string {
	if x != nil {
		return x.Ingredients
	}
	return ""
}

func (x *StyleType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StyleType) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *StyleType) GetMouthfeel() string {
	if x != nil {
		return x.Mouthfeel
	}
	return ""
}

func (x *StyleType) GetFinalGravity() *GravityRangeType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *StyleType) GetColor() *ColorRangeType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *StyleType) GetOriginalGravity() *GravityRangeType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *StyleType) GetExamples() string {
	if x != nil {
		return x.Examples
	}
	return ""
}

func (x *StyleType) GetCarbonation() *CarbonationRangeType {
	if x != nil {
		return x.Carbonation
	}
	return nil
}

func (x *StyleType) GetAlcoholByVolume() *PercentRangeType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *StyleType) GetInternationalBitternessUnits() *BitternessRangeType {
	if x != nil {
		return x.InternationalBitternessUnits
	}
	return nil
}

func (x *StyleType) GetAppearance() string {
	if x != nil {
		return x.Appearance
	}
	return ""
}

func (x *StyleType) GetOverallImpression() string {
	if x != nil {
		return x.OverallImpression
	}
	return ""
}

// RecipeStyleType defines style information stored in a recipe record
type RecipeStyleType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *StyleBase             `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeStyleType) Reset() {
	*x = RecipeStyleType{}
	mi := &file_beerproto_v1_style_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStyleType) ProtoMessage() {}

func (x *RecipeStyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_style_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStyleType.ProtoReflect.Descriptor instead.
func (*RecipeStyleType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_style_proto_rawDescGZIP(), []int{2}
}

func (x *RecipeStyleType) GetBase() *StyleBase {
	if x != nil {
		return x.Base
	}
	return nil
}

var File_beerproto_v1_style_proto protoreflect.FileDescriptor

const file_beerproto_v1_style_proto_rawDesc = "" +
	"\n" +
	"\x18beerproto/v1/style.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\x84\x02\n" +
	"\tStyleBase\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12\"\n" +
	"\bcategory\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bcategory\x12'\n" +
	"\x0fcategory_number\x18\x03 \x01(\x05R\x0ecategoryNumber\x12!\n" +
	"\fstyle_letter\x18\x04 \x01(\tR\vstyleLetter\x12'\n" +
	"\vstyle_guide\x18\x05 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"styleGuide\x12>\n" +
	"\x04type\x18\x06 \x01(\x0e2\x1d.beerproto.v1.StyleCategoriesB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04type\"\x8b\x06\n" +
	"\tStyleType\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x17.beerproto.v1.StyleBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x14\n" +
	"\x05aroma\x18\x03 \x01(\tR\x05aroma\x12 \n" +
	"\vingredients\x18\x04 \x01(\tR\vingredients\x12\x14\n" +
	"\x05notes\x18\x05 \x01(\tR\x05notes\x12\x16\n" +
	"\x06flavor\x18\x06 \x01(\tR\x06flavor\x12\x1c\n" +
	"\tmouthfeel\x18\a \x01(\tR\tmouthfeel\x12C\n" +
	"\rfinal_gravity\x18\b \x01(\v2\x1e.beerproto.v1.GravityRangeTypeR\ffinalGravity\x122\n" +
	"\x05color\x18\t \x01(\v2\x1c.beerproto.v1.ColorRangeTypeR\x05color\x12I\n" +
	"\x10original_gravity\x18\n" +
	" \x01(\v2\x1e.beerproto.v1.GravityRangeTypeR\x0foriginalGravity\x12\x1a\n" +
	"\bexamples\x18\v \x01(\tR\bexamples\x12D\n" +
	"\vcarbonation\x18\f \x01(\v2\".beerproto.v1.CarbonationRangeTypeR\vcarbonation\x12J\n" +
	"\x11alcohol_by_volume\x18\r \x01(\v2\x1e.beerproto.v1.PercentRangeTypeR\x0falcoholByVolume\x12g\n" +
	"\x1einternational_bitterness_units\x18\x0e \x01(\v2!.beerproto.v1.BitternessRangeTypeR\x1cinternationalBitternessUnits\x12\x1e\n" +
	"\n" +
	"appearance\x18\x0f \x01(\tR\n" +
	"appearance\x12-\n" +
	"\x12overall_impression\x18\x10 \x01(\tR\x11overallImpression\"F\n" +
	"\x0fRecipeStyleType\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x17.beerproto.v1.StyleBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base*\xf6\x01\n" +
	"\x0fStyleCategories\x12 \n" +
	"\x1cSTYLE_CATEGORIES_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15STYLE_CATEGORIES_BEER\x10\x01\x12\x1a\n" +
	"\x16STYLE_CATEGORIES_CIDER\x10\x02\x12\x1d\n" +
	"\x19STYLE_CATEGORIES_KOMBUCHA\x10\x03\x12\x19\n" +
	"\x15STYLE_CATEGORIES_MEAD\x10\x04\x12\x19\n" +
	"\x15STYLE_CATEGORIES_SODA\x10\x05\x12\x19\n" +
	"\x15STYLE_CATEGORIES_WINE\x10\x06\x12\x1a\n" +
	"\x16STYLE_CATEGORIES_OTHER\x10\aB\xab\x01\n" +
	"\x10com.beerproto.v1B\n" +
	"StyleProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_style_proto_rawDescOnce sync.Once
	file_beerproto_v1_style_proto_rawDescData []byte
)

func file_beerproto_v1_style_proto_rawDescGZIP() []byte {
	file_beerproto_v1_style_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_style_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_style_proto_rawDesc), len(file_beerproto_v1_style_proto_rawDesc)))
	})
	return file_beerproto_v1_style_proto_rawDescData
}

var file_beerproto_v1_style_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_style_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beerproto_v1_style_proto_goTypes = []any{
	(StyleCategories)(0),         // 0: beerproto.v1.StyleCategories
	(*StyleBase)(nil),            // 1: beerproto.v1.StyleBase
	(*StyleType)(nil),            // 2: beerproto.v1.StyleType
	(*RecipeStyleType)(nil),      // 3: beerproto.v1.RecipeStyleType
	(*GravityRangeType)(nil),     // 4: beerproto.v1.GravityRangeType
	(*ColorRangeType)(nil),       // 5: beerproto.v1.ColorRangeType
	(*CarbonationRangeType)(nil), // 6: beerproto.v1.CarbonationRangeType
	(*PercentRangeType)(nil),     // 7: beerproto.v1.PercentRangeType
	(*BitternessRangeType)(nil),  // 8: beerproto.v1.BitternessRangeType
}
var file_beerproto_v1_style_proto_depIdxs = []int32{
	0, // 0: beerproto.v1.StyleBase.type:type_name -> beerproto.v1.StyleCategories
	1, // 1: beerproto.v1.StyleType.base:type_name -> beerproto.v1.StyleBase
	4, // 2: beerproto.v1.StyleType.final_gravity:type_name -> beerproto.v1.GravityRangeType
	5, // 3: beerproto.v1.StyleType.color:type_name -> beerproto.v1.ColorRangeType
	4, // 4: beerproto.v1.StyleType.original_gravity:type_name -> beerproto.v1.GravityRangeType
	6, // 5: beerproto.v1.StyleType.carbonation:type_name -> beerproto.v1.CarbonationRangeType
	7, // 6: beerproto.v1.StyleType.alcohol_by_volume:type_name -> beerproto.v1.PercentRangeType
	8, // 7: beerproto.v1.StyleType.international_bitterness_units:type_name -> beerproto.v1.BitternessRangeType
	1, // 8: beerproto.v1.RecipeStyleType.base:type_name -> beerproto.v1.StyleBase
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_beerproto_v1_style_proto_init() }
func file_beerproto_v1_style_proto_init() {
	if File_beerproto_v1_style_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_style_proto_rawDesc), len(file_beerproto_v1_style_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_style_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_style_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_style_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_style_proto_msgTypes,
	}.Build()
	File_beerproto_v1_style_proto = out.File
	file_beerproto_v1_style_proto_goTypes = nil
	file_beerproto_v1_style_proto_depIdxs = nil
}
