//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/equipment.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EquipmentBaseForm int32

const (
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_UNSPECIFIED EquipmentBaseForm = 0
	// HLT
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_HLT EquipmentBaseForm = 1
	// Mash Tun
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_MASH_TUN EquipmentBaseForm = 2
	// Lauter Tun
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_LAUTER_TUN EquipmentBaseForm = 3
	// Brew Kettle
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_BREW_KETTLE EquipmentBaseForm = 4
	// Fermenter
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_FERMENTER EquipmentBaseForm = 5
	// Aging Vessel
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_AGING_VESSEL EquipmentBaseForm = 6
	// Packaging Vessel
	EquipmentBaseForm_EQUIPMENT_BASE_FORM_PACKAGING_VESSEL EquipmentBaseForm = 7
)

// Enum value maps for EquipmentBaseForm.
var (
	EquipmentBaseForm_name = map[int32]string{
		0: "EQUIPMENT_BASE_FORM_UNSPECIFIED",
		1: "EQUIPMENT_BASE_FORM_HLT",
		2: "EQUIPMENT_BASE_FORM_MASH_TUN",
		3: "EQUIPMENT_BASE_FORM_LAUTER_TUN",
		4: "EQUIPMENT_BASE_FORM_BREW_KETTLE",
		5: "EQUIPMENT_BASE_FORM_FERMENTER",
		6: "EQUIPMENT_BASE_FORM_AGING_VESSEL",
		7: "EQUIPMENT_BASE_FORM_PACKAGING_VESSEL",
	}
	EquipmentBaseForm_value = map[string]int32{
		"EQUIPMENT_BASE_FORM_UNSPECIFIED":      0,
		"EQUIPMENT_BASE_FORM_HLT":              1,
		"EQUIPMENT_BASE_FORM_MASH_TUN":         2,
		"EQUIPMENT_BASE_FORM_LAUTER_TUN":       3,
		"EQUIPMENT_BASE_FORM_BREW_KETTLE":      4,
		"EQUIPMENT_BASE_FORM_FERMENTER":        5,
		"EQUIPMENT_BASE_FORM_AGING_VESSEL":     6,
		"EQUIPMENT_BASE_FORM_PACKAGING_VESSEL": 7,
	}
)

func (x EquipmentBaseForm) Enum() *EquipmentBaseForm {
	p := new(EquipmentBaseForm)
	*p = x
	return p
}

func (x EquipmentBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_equipment_proto_enumTypes[0].Descriptor()
}

func (EquipmentBaseForm) Type() protoreflect.EnumType {
	return &file_beerproto_v1_equipment_proto_enumTypes[0]
}

func (x EquipmentBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentBaseForm.Descriptor instead.
func (EquipmentBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_equipment_proto_rawDescGZIP(), []int{0}
}

// EquipmentBase The descriptive base type for brew day equipment. Provides unique properties to fully describe the recipe.
type EquipmentBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Form          EquipmentBaseForm      `protobuf:"varint,3,opt,name=form,proto3,enum=beerproto.v1.EquipmentBaseForm" json:"form,omitempty"`
	MaximumVolume *VolumeType            `protobuf:"bytes,4,opt,name=maximum_volume,json=maximumVolume,proto3" json:"maximum_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipmentBase) Reset() {
	*x = EquipmentBase{}
	mi := &file_beerproto_v1_equipment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentBase) ProtoMessage() {}

func (x *EquipmentBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_equipment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentBase.ProtoReflect.Descriptor instead.
func (*EquipmentBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_equipment_proto_rawDescGZIP(), []int{0}
}

func (x *EquipmentBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentBase) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EquipmentBase) GetForm() EquipmentBaseForm {
	if x != nil {
		return x.Form
	}
	return EquipmentBaseForm_EQUIPMENT_BASE_FORM_UNSPECIFIED
}

func (x *EquipmentBase) GetMaximumVolume() *VolumeType {
	if x != nil {
		return x.MaximumVolume
	}
	return nil
}

// EquipmentType provides necessary information for individual brewing equipment
type EquipmentItemType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *EquipmentBase         `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Notes string                 `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	// The volume boiled off during 1 hour, measured before and after at room temperature.
	BoilRatePerHour *VolumeType `protobuf:"bytes,4,opt,name=boil_rate_per_hour,json=boilRatePerHour,proto3" json:"boil_rate_per_hour,omitempty"`
	// The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
	DrainRatePerMinute *VolumeType `protobuf:"bytes,5,opt,name=drain_rate_per_minute,json=drainRatePerMinute,proto3" json:"drain_rate_per_minute,omitempty"`
	// The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
	SpecificHeat *SpecificHeatType `protobuf:"bytes,6,opt,name=specific_heat,json=specificHeat,proto3" json:"specific_heat,omitempty"`
	// The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
	GrainAbsorptionRate *SpecificVolumeType `protobuf:"bytes,7,opt,name=grain_absorption_rate,json=grainAbsorptionRate,proto3" json:"grain_absorption_rate,omitempty"`
	// The weight of the piece of equipment, especially important for when the mashtun is not preheated.
	Weight        *MassType    `protobuf:"bytes,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Loss          *VolumeType  `protobuf:"bytes,9,opt,name=loss,proto3" json:"loss,omitempty"`
	Efficiency    *PercentType `protobuf:"bytes,10,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipmentItemType) Reset() {
	*x = EquipmentItemType{}
	mi := &file_beerproto_v1_equipment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentItemType) ProtoMessage() {}

func (x *EquipmentItemType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_equipment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentItemType.ProtoReflect.Descriptor instead.
func (*EquipmentItemType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_equipment_proto_rawDescGZIP(), []int{1}
}

func (x *EquipmentItemType) GetBase() *EquipmentBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *EquipmentItemType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EquipmentItemType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *EquipmentItemType) GetBoilRatePerHour() *VolumeType {
	if x != nil {
		return x.BoilRatePerHour
	}
	return nil
}

func (x *EquipmentItemType) GetDrainRatePerMinute() *VolumeType {
	if x != nil {
		return x.DrainRatePerMinute
	}
	return nil
}

func (x *EquipmentItemType) GetSpecificHeat() *SpecificHeatType {
	if x != nil {
		return x.SpecificHeat
	}
	return nil
}

func (x *EquipmentItemType) GetGrainAbsorptionRate() *SpecificVolumeType {
	if x != nil {
		return x.GrainAbsorptionRate
	}
	return nil
}

func (x *EquipmentItemType) GetWeight() *MassType {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *EquipmentItemType) GetLoss() *VolumeType {
	if x != nil {
		return x.Loss
	}
	return nil
}

func (x *EquipmentItemType) GetEfficiency() *PercentType {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

// Provides necessary information for brewing equipment set
type EquipmentType struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EquipmentItems      []*EquipmentItemType   `protobuf:"bytes,3,rep,name=equipment_items,json=equipmentItems,proto3" json:"equipment_items,omitempty"`
	BrewhouseEfficiency *PercentType           `protobuf:"bytes,4,opt,name=brewhouse_efficiency,json=brewhouseEfficiency,proto3" json:"brewhouse_efficiency,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EquipmentType) Reset() {
	*x = EquipmentType{}
	mi := &file_beerproto_v1_equipment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentType) ProtoMessage() {}

func (x *EquipmentType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_equipment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentType.ProtoReflect.Descriptor instead.
func (*EquipmentType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_equipment_proto_rawDescGZIP(), []int{2}
}

func (x *EquipmentType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EquipmentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentType) GetEquipmentItems() []*EquipmentItemType {
	if x != nil {
		return x.EquipmentItems
	}
	return nil
}

func (x *EquipmentType) GetBrewhouseEfficiency() *PercentType {
	if x != nil {
		return x.BrewhouseEfficiency
	}
	return nil
}

var File_beerproto_v1_equipment_proto protoreflect.FileDescriptor

const file_beerproto_v1_equipment_proto_rawDesc = "" +
	"\n" +
	"\x1cbeerproto/v1/equipment.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\xce\x01\n" +
	"\rEquipmentBase\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12@\n" +
	"\x04form\x18\x03 \x01(\x0e2\x1f.beerproto.v1.EquipmentBaseFormB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04form\x12G\n" +
	"\x0emaximum_volume\x18\x04 \x01(\v2\x18.beerproto.v1.VolumeTypeB\x06\xbaH\x03\xc8\x01\x01R\rmaximumVolume\"\xcf\x04\n" +
	"\x11EquipmentItemType\x127\n" +
	"\x04base\x18\x01 \x01(\v2\x1b.beerproto.v1.EquipmentBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x14\n" +
	"\x05notes\x18\x03 \x01(\tR\x05notes\x12E\n" +
	"\x12boil_rate_per_hour\x18\x04 \x01(\v2\x18.beerproto.v1.VolumeTypeR\x0fboilRatePerHour\x12K\n" +
	"\x15drain_rate_per_minute\x18\x05 \x01(\v2\x18.beerproto.v1.VolumeTypeR\x12drainRatePerMinute\x12C\n" +
	"\rspecific_heat\x18\x06 \x01(\v2\x1e.beerproto.v1.SpecificHeatTypeR\fspecificHeat\x12T\n" +
	"\x15grain_absorption_rate\x18\a \x01(\v2 .beerproto.v1.SpecificVolumeTypeR\x13grainAbsorptionRate\x12.\n" +
	"\x06weight\x18\b \x01(\v2\x16.beerproto.v1.MassTypeR\x06weight\x124\n" +
	"\x04loss\x18\t \x01(\v2\x18.beerproto.v1.VolumeTypeB\x06\xbaH\x03\xc8\x01\x01R\x04loss\x129\n" +
	"\n" +
	"efficiency\x18\n" +
	" \x01(\v2\x19.beerproto.v1.PercentTypeR\n" +
	"efficiency\"\xee\x01\n" +
	"\rEquipmentType\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12R\n" +
	"\x0fequipment_items\x18\x03 \x03(\v2\x1f.beerproto.v1.EquipmentItemTypeB\b\xbaH\x05\x92\x01\x02\b\x01R\x0eequipmentItems\x12L\n" +
	"\x14brewhouse_efficiency\x18\x04 \x01(\v2\x19.beerproto.v1.PercentTypeR\x13brewhouseEfficiency*\xb3\x02\n" +
	"\x11EquipmentBaseForm\x12#\n" +
	"\x1fEQUIPMENT_BASE_FORM_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17EQUIPMENT_BASE_FORM_HLT\x10\x01\x12 \n" +
	"\x1cEQUIPMENT_BASE_FORM_MASH_TUN\x10\x02\x12\"\n" +
	"\x1eEQUIPMENT_BASE_FORM_LAUTER_TUN\x10\x03\x12#\n" +
	"\x1fEQUIPMENT_BASE_FORM_BREW_KETTLE\x10\x04\x12!\n" +
	"\x1dEQUIPMENT_BASE_FORM_FERMENTER\x10\x05\x12$\n" +
	" EQUIPMENT_BASE_FORM_AGING_VESSEL\x10\x06\x12(\n" +
	"$EQUIPMENT_BASE_FORM_PACKAGING_VESSEL\x10\aB\xaf\x01\n" +
	"\x10com.beerproto.v1B\x0eEquipmentProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_equipment_proto_rawDescOnce sync.Once
	file_beerproto_v1_equipment_proto_rawDescData []byte
)

func file_beerproto_v1_equipment_proto_rawDescGZIP() []byte {
	file_beerproto_v1_equipment_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_equipment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_equipment_proto_rawDesc), len(file_beerproto_v1_equipment_proto_rawDesc)))
	})
	return file_beerproto_v1_equipment_proto_rawDescData
}

var file_beerproto_v1_equipment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_equipment_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beerproto_v1_equipment_proto_goTypes = []any{
	(EquipmentBaseForm)(0),     // 0: beerproto.v1.EquipmentBaseForm
	(*EquipmentBase)(nil),      // 1: beerproto.v1.EquipmentBase
	(*EquipmentItemType)(nil),  // 2: beerproto.v1.EquipmentItemType
	(*EquipmentType)(nil),      // 3: beerproto.v1.EquipmentType
	(*VolumeType)(nil),         // 4: beerproto.v1.VolumeType
	(*SpecificHeatType)(nil),   // 5: beerproto.v1.SpecificHeatType
	(*SpecificVolumeType)(nil), // 6: beerproto.v1.SpecificVolumeType
	(*MassType)(nil),           // 7: beerproto.v1.MassType
	(*PercentType)(nil),        // 8: beerproto.v1.PercentType
}
var file_beerproto_v1_equipment_proto_depIdxs = []int32{
	0,  // 0: beerproto.v1.EquipmentBase.form:type_name -> beerproto.v1.EquipmentBaseForm
	4,  // 1: beerproto.v1.EquipmentBase.maximum_volume:type_name -> beerproto.v1.VolumeType
	1,  // 2: beerproto.v1.EquipmentItemType.base:type_name -> beerproto.v1.EquipmentBase
	4,  // 3: beerproto.v1.EquipmentItemType.boil_rate_per_hour:type_name -> beerproto.v1.VolumeType
	4,  // 4: beerproto.v1.EquipmentItemType.drain_rate_per_minute:type_name -> beerproto.v1.VolumeType
	5,  // 5: beerproto.v1.EquipmentItemType.specific_heat:type_name -> beerproto.v1.SpecificHeatType
	6,  // 6: beerproto.v1.EquipmentItemType.grain_absorption_rate:type_name -> beerproto.v1.SpecificVolumeType
	7,  // 7: beerproto.v1.EquipmentItemType.weight:type_name -> beerproto.v1.MassType
	4,  // 8: beerproto.v1.EquipmentItemType.loss:type_name -> beerproto.v1.VolumeType
	8,  // 9: beerproto.v1.EquipmentItemType.efficiency:type_name -> beerproto.v1.PercentType
	2,  // 10: beerproto.v1.EquipmentType.equipment_items:type_name -> beerproto.v1.EquipmentItemType
	8,  // 11: beerproto.v1.EquipmentType.brewhouse_efficiency:type_name -> beerproto.v1.PercentType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_beerproto_v1_equipment_proto_init() }
func file_beerproto_v1_equipment_proto_init() {
	if File_beerproto_v1_equipment_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_equipment_proto_rawDesc), len(file_beerproto_v1_equipment_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_equipment_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_equipment_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_equipment_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_equipment_proto_msgTypes,
	}.Build()
	File_beerproto_v1_equipment_proto = out.File
	file_beerproto_v1_equipment_proto_goTypes = nil
	file_beerproto_v1_equipment_proto_depIdxs = nil
}
