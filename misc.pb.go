//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/misc.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiscellaneousBaseType int32

const (
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_UNSPECIFIED MiscellaneousBaseType = 0
	// spice
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_SPICE MiscellaneousBaseType = 1
	// fining
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_FINING MiscellaneousBaseType = 2
	// water agent
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_WATER_AGENT MiscellaneousBaseType = 3
	// herb
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_HERB MiscellaneousBaseType = 4
	// flavor
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_FLAVOR MiscellaneousBaseType = 5
	// wood
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_WOOD MiscellaneousBaseType = 6
	// other
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_OTHER MiscellaneousBaseType = 7
)

// Enum value maps for MiscellaneousBaseType.
var (
	MiscellaneousBaseType_name = map[int32]string{
		0: "MISCELLANEOUS_BASE_TYPE_UNSPECIFIED",
		1: "MISCELLANEOUS_BASE_TYPE_SPICE",
		2: "MISCELLANEOUS_BASE_TYPE_FINING",
		3: "MISCELLANEOUS_BASE_TYPE_WATER_AGENT",
		4: "MISCELLANEOUS_BASE_TYPE_HERB",
		5: "MISCELLANEOUS_BASE_TYPE_FLAVOR",
		6: "MISCELLANEOUS_BASE_TYPE_WOOD",
		7: "MISCELLANEOUS_BASE_TYPE_OTHER",
	}
	MiscellaneousBaseType_value = map[string]int32{
		"MISCELLANEOUS_BASE_TYPE_UNSPECIFIED": 0,
		"MISCELLANEOUS_BASE_TYPE_SPICE":       1,
		"MISCELLANEOUS_BASE_TYPE_FINING":      2,
		"MISCELLANEOUS_BASE_TYPE_WATER_AGENT": 3,
		"MISCELLANEOUS_BASE_TYPE_HERB":        4,
		"MISCELLANEOUS_BASE_TYPE_FLAVOR":      5,
		"MISCELLANEOUS_BASE_TYPE_WOOD":        6,
		"MISCELLANEOUS_BASE_TYPE_OTHER":       7,
	}
)

func (x MiscellaneousBaseType) Enum() *MiscellaneousBaseType {
	p := new(MiscellaneousBaseType)
	*p = x
	return p
}

func (x MiscellaneousBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiscellaneousBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_misc_proto_enumTypes[0].Descriptor()
}

func (MiscellaneousBaseType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_misc_proto_enumTypes[0]
}

func (x MiscellaneousBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiscellaneousBaseType.Descriptor instead.
func (MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{0}
}

// MiscellaneousBase provides unique properties to identify individual records of ingredients that are neither hops, nor provide a contribution to the gravity of wort.
type MiscellaneousBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Producer      string                 `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId     string                 `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type          MiscellaneousBaseType  `protobuf:"varint,4,opt,name=type,proto3,enum=beerproto.v1.MiscellaneousBaseType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiscellaneousBase) Reset() {
	*x = MiscellaneousBase{}
	mi := &file_beerproto_v1_misc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiscellaneousBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousBase) ProtoMessage() {}

func (x *MiscellaneousBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousBase.ProtoReflect.Descriptor instead.
func (*MiscellaneousBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{0}
}

func (x *MiscellaneousBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousBase) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousBase) GetType() MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_UNSPECIFIED
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
type MiscellaneousType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *MiscellaneousBase     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor        string                      `protobuf:"bytes,3,opt,name=use_for,json=useFor,proto3" json:"use_for,omitempty"`
	Notes         string                      `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Inventory     *MiscellaneousInventoryType `protobuf:"bytes,5,opt,name=inventory,proto3" json:"inventory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiscellaneousType) Reset() {
	*x = MiscellaneousType{}
	mi := &file_beerproto_v1_misc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiscellaneousType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousType) ProtoMessage() {}

func (x *MiscellaneousType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousType.ProtoReflect.Descriptor instead.
func (*MiscellaneousType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{1}
}

func (x *MiscellaneousType) GetBase() *MiscellaneousBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MiscellaneousType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousType) GetUseFor() string {
	if x != nil {
		return x.UseFor
	}
	return ""
}

func (x *MiscellaneousType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MiscellaneousType) GetInventory() *MiscellaneousInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
type MiscellaneousAdditionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *MiscellaneousBase     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are valid to be assigned to Amount:
	//
	//	*MiscellaneousAdditionType_Mass
	//	*MiscellaneousAdditionType_Unit
	//	*MiscellaneousAdditionType_Volume
	Amount        isMiscellaneousAdditionType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiscellaneousAdditionType) Reset() {
	*x = MiscellaneousAdditionType{}
	mi := &file_beerproto_v1_misc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiscellaneousAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousAdditionType) ProtoMessage() {}

func (x *MiscellaneousAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousAdditionType.ProtoReflect.Descriptor instead.
func (*MiscellaneousAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{2}
}

func (x *MiscellaneousAdditionType) GetBase() *MiscellaneousBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetAmount() isMiscellaneousAdditionType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousAdditionType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetUnit() *UnitType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousAdditionType_Unit); ok {
			return x.Unit
		}
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousAdditionType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isMiscellaneousAdditionType_Amount interface {
	isMiscellaneousAdditionType_Amount()
}

type MiscellaneousAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,4,opt,name=mass,proto3,oneof"`
}

type MiscellaneousAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,5,opt,name=unit,proto3,oneof"`
}

type MiscellaneousAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,6,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousAdditionType_Mass) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Unit) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Volume) isMiscellaneousAdditionType_Amount() {}

type MiscellaneousInventoryType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Amount:
	//
	//	*MiscellaneousInventoryType_Mass
	//	*MiscellaneousInventoryType_Unit
	//	*MiscellaneousInventoryType_Volume
	Amount        isMiscellaneousInventoryType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiscellaneousInventoryType) Reset() {
	*x = MiscellaneousInventoryType{}
	mi := &file_beerproto_v1_misc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiscellaneousInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousInventoryType) ProtoMessage() {}

func (x *MiscellaneousInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousInventoryType.ProtoReflect.Descriptor instead.
func (*MiscellaneousInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{3}
}

func (x *MiscellaneousInventoryType) GetAmount() isMiscellaneousInventoryType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousInventoryType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetUnit() *UnitType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousInventoryType_Unit); ok {
			return x.Unit
		}
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*MiscellaneousInventoryType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isMiscellaneousInventoryType_Amount interface {
	isMiscellaneousInventoryType_Amount()
}

type MiscellaneousInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type MiscellaneousInventoryType_Unit struct {
	Unit *UnitType `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type MiscellaneousInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,3,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousInventoryType_Mass) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Unit) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Volume) isMiscellaneousInventoryType_Amount() {}

var File_beerproto_v1_misc_proto protoreflect.FileDescriptor

const file_beerproto_v1_misc_proto_rawDesc = "" +
	"\n" +
	"\x17beerproto/v1/misc.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x19beerproto/v1/timing.proto\x1a\x1bbuf/validate/validate.proto\"\xb4\x01\n" +
	"\x11MiscellaneousBase\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12\x1a\n" +
	"\bproducer\x18\x02 \x01(\tR\bproducer\x12\x1d\n" +
	"\n" +
	"product_id\x18\x03 \x01(\tR\tproductId\x12D\n" +
	"\x04type\x18\x04 \x01(\x0e2#.beerproto.v1.MiscellaneousBaseTypeB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04type\"\xe4\x01\n" +
	"\x11MiscellaneousType\x12;\n" +
	"\x04base\x18\x01 \x01(\v2\x1f.beerproto.v1.MiscellaneousBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x17\n" +
	"\ause_for\x18\x03 \x01(\tR\x06useFor\x12\x14\n" +
	"\x05notes\x18\x04 \x01(\tR\x05notes\x12F\n" +
	"\tinventory\x18\x05 \x01(\v2(.beerproto.v1.MiscellaneousInventoryTypeR\tinventory\"\xc8\x02\n" +
	"\x19MiscellaneousAdditionType\x12;\n" +
	"\x04base\x18\x01 \x01(\v2\x1f.beerproto.v1.MiscellaneousBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x120\n" +
	"\x06timing\x18\x03 \x01(\v2\x18.beerproto.v1.TimingTypeR\x06timing\x12,\n" +
	"\x04mass\x18\x04 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x12,\n" +
	"\x04unit\x18\x05 \x01(\v2\x16.beerproto.v1.UnitTypeH\x00R\x04unit\x122\n" +
	"\x06volume\x18\x06 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01\"\xbd\x01\n" +
	"\x1aMiscellaneousInventoryType\x12,\n" +
	"\x04mass\x18\x01 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x12,\n" +
	"\x04unit\x18\x02 \x01(\v2\x16.beerproto.v1.UnitTypeH\x00R\x04unit\x122\n" +
	"\x06volume\x18\x03 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01*\xbb\x02\n" +
	"\x15MiscellaneousBaseType\x12'\n" +
	"#MISCELLANEOUS_BASE_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dMISCELLANEOUS_BASE_TYPE_SPICE\x10\x01\x12\"\n" +
	"\x1eMISCELLANEOUS_BASE_TYPE_FINING\x10\x02\x12'\n" +
	"#MISCELLANEOUS_BASE_TYPE_WATER_AGENT\x10\x03\x12 \n" +
	"\x1cMISCELLANEOUS_BASE_TYPE_HERB\x10\x04\x12\"\n" +
	"\x1eMISCELLANEOUS_BASE_TYPE_FLAVOR\x10\x05\x12 \n" +
	"\x1cMISCELLANEOUS_BASE_TYPE_WOOD\x10\x06\x12!\n" +
	"\x1dMISCELLANEOUS_BASE_TYPE_OTHER\x10\aB\xaa\x01\n" +
	"\x10com.beerproto.v1B\tMiscProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_misc_proto_rawDescOnce sync.Once
	file_beerproto_v1_misc_proto_rawDescData []byte
)

func file_beerproto_v1_misc_proto_rawDescGZIP() []byte {
	file_beerproto_v1_misc_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_misc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_misc_proto_rawDesc), len(file_beerproto_v1_misc_proto_rawDesc)))
	})
	return file_beerproto_v1_misc_proto_rawDescData
}

var file_beerproto_v1_misc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_misc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_beerproto_v1_misc_proto_goTypes = []any{
	(MiscellaneousBaseType)(0),         // 0: beerproto.v1.MiscellaneousBaseType
	(*MiscellaneousBase)(nil),          // 1: beerproto.v1.MiscellaneousBase
	(*MiscellaneousType)(nil),          // 2: beerproto.v1.MiscellaneousType
	(*MiscellaneousAdditionType)(nil),  // 3: beerproto.v1.MiscellaneousAdditionType
	(*MiscellaneousInventoryType)(nil), // 4: beerproto.v1.MiscellaneousInventoryType
	(*TimingType)(nil),                 // 5: beerproto.v1.TimingType
	(*MassType)(nil),                   // 6: beerproto.v1.MassType
	(*UnitType)(nil),                   // 7: beerproto.v1.UnitType
	(*VolumeType)(nil),                 // 8: beerproto.v1.VolumeType
}
var file_beerproto_v1_misc_proto_depIdxs = []int32{
	0,  // 0: beerproto.v1.MiscellaneousBase.type:type_name -> beerproto.v1.MiscellaneousBaseType
	1,  // 1: beerproto.v1.MiscellaneousType.base:type_name -> beerproto.v1.MiscellaneousBase
	4,  // 2: beerproto.v1.MiscellaneousType.inventory:type_name -> beerproto.v1.MiscellaneousInventoryType
	1,  // 3: beerproto.v1.MiscellaneousAdditionType.base:type_name -> beerproto.v1.MiscellaneousBase
	5,  // 4: beerproto.v1.MiscellaneousAdditionType.timing:type_name -> beerproto.v1.TimingType
	6,  // 5: beerproto.v1.MiscellaneousAdditionType.mass:type_name -> beerproto.v1.MassType
	7,  // 6: beerproto.v1.MiscellaneousAdditionType.unit:type_name -> beerproto.v1.UnitType
	8,  // 7: beerproto.v1.MiscellaneousAdditionType.volume:type_name -> beerproto.v1.VolumeType
	6,  // 8: beerproto.v1.MiscellaneousInventoryType.mass:type_name -> beerproto.v1.MassType
	7,  // 9: beerproto.v1.MiscellaneousInventoryType.unit:type_name -> beerproto.v1.UnitType
	8,  // 10: beerproto.v1.MiscellaneousInventoryType.volume:type_name -> beerproto.v1.VolumeType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_beerproto_v1_misc_proto_init() }
func file_beerproto_v1_misc_proto_init() {
	if File_beerproto_v1_misc_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	file_beerproto_v1_misc_proto_msgTypes[2].OneofWrappers = []any{
		(*MiscellaneousAdditionType_Mass)(nil),
		(*MiscellaneousAdditionType_Unit)(nil),
		(*MiscellaneousAdditionType_Volume)(nil),
	}
	file_beerproto_v1_misc_proto_msgTypes[3].OneofWrappers = []any{
		(*MiscellaneousInventoryType_Mass)(nil),
		(*MiscellaneousInventoryType_Unit)(nil),
		(*MiscellaneousInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_misc_proto_rawDesc), len(file_beerproto_v1_misc_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_misc_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_misc_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_misc_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_misc_proto_msgTypes,
	}.Build()
	File_beerproto_v1_misc_proto = out.File
	file_beerproto_v1_misc_proto_goTypes = nil
	file_beerproto_v1_misc_proto_depIdxs = nil
}
