//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/water.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WaterBase provides unique properties to identify individual records of  brewing water
type WaterBase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Calcium occurs naturally in most water sources and is the principle cause of hardness.
	Calcium *ConcentrationType `protobuf:"bytes,2,opt,name=calcium,proto3" json:"calcium,omitempty"`
	// Nitrite occurs naturally at low levels in some waters but is removed by treatment. It is sometime produced as a by-product when chloramine is used as a disinfectant.
	Nitrite *ConcentrationType `protobuf:"bytes,3,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	// Occurs naturally in water sources and is derived through contact with rocks
	Chloride  *ConcentrationType `protobuf:"bytes,4,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Name      string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Potassium *ConcentrationType `protobuf:"bytes,6,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Carbonate *ConcentrationType `protobuf:"bytes,7,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	// Iron occurs naturally in some water. High levels are treated to reduce the iron content. A number of water mains are made of iron. Brown discolouration complaints are associated with corroding iron mains. Iron is not harmful to health.
	Iron *ConcentrationType `protobuf:"bytes,8,opt,name=iron,proto3" json:"iron,omitempty"`
	// Fluoride salts typically have distinctive bitter tastes, and are odorless.
	Flouride *ConcentrationType `protobuf:"bytes,9,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate  *ConcentrationType `protobuf:"bytes,10,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	// At levels of 10-30mg/l it is an important yeast nutrient, but above 30mg/l it can cause a sour/bitter taste to the beer.
	Magnesium   *ConcentrationType `protobuf:"bytes,11,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Producer    string             `protobuf:"bytes,12,opt,name=producer,proto3" json:"producer,omitempty"`
	Bicarbonate *ConcentrationType `protobuf:"bytes,13,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	// Nitrate occurs naturally in most source waters but concentrations can be increased as a result of fertiliser use. Where necessary concentrations in drinking water can be reduced by diluting with sources where nitrate levels are low or through specific treatment.
	Nitrate *ConcentrationType `protobuf:"bytes,14,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	// Sodium is naturally present in many water sources. Domestic water softeners can increase the sodium concentration.
	Sodium        *ConcentrationType `protobuf:"bytes,15,opt,name=sodium,proto3" json:"sodium,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaterBase) Reset() {
	*x = WaterBase{}
	mi := &file_beerproto_v1_water_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaterBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterBase) ProtoMessage() {}

func (x *WaterBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_water_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterBase.ProtoReflect.Descriptor instead.
func (*WaterBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_water_proto_rawDescGZIP(), []int{0}
}

func (x *WaterBase) GetCalcium() *ConcentrationType {
	if x != nil {
		return x.Calcium
	}
	return nil
}

func (x *WaterBase) GetNitrite() *ConcentrationType {
	if x != nil {
		return x.Nitrite
	}
	return nil
}

func (x *WaterBase) GetChloride() *ConcentrationType {
	if x != nil {
		return x.Chloride
	}
	return nil
}

func (x *WaterBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaterBase) GetPotassium() *ConcentrationType {
	if x != nil {
		return x.Potassium
	}
	return nil
}

func (x *WaterBase) GetCarbonate() *ConcentrationType {
	if x != nil {
		return x.Carbonate
	}
	return nil
}

func (x *WaterBase) GetIron() *ConcentrationType {
	if x != nil {
		return x.Iron
	}
	return nil
}

func (x *WaterBase) GetFlouride() *ConcentrationType {
	if x != nil {
		return x.Flouride
	}
	return nil
}

func (x *WaterBase) GetSulfate() *ConcentrationType {
	if x != nil {
		return x.Sulfate
	}
	return nil
}

func (x *WaterBase) GetMagnesium() *ConcentrationType {
	if x != nil {
		return x.Magnesium
	}
	return nil
}

func (x *WaterBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *WaterBase) GetBicarbonate() *ConcentrationType {
	if x != nil {
		return x.Bicarbonate
	}
	return nil
}

func (x *WaterBase) GetNitrate() *ConcentrationType {
	if x != nil {
		return x.Nitrate
	}
	return nil
}

func (x *WaterBase) GetSodium() *ConcentrationType {
	if x != nil {
		return x.Sodium
	}
	return nil
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
type WaterType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *WaterBase             `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Notes         string                 `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Ph            *AcidityType           `protobuf:"bytes,4,opt,name=ph,proto3" json:"ph,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaterType) Reset() {
	*x = WaterType{}
	mi := &file_beerproto_v1_water_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterType) ProtoMessage() {}

func (x *WaterType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_water_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterType.ProtoReflect.Descriptor instead.
func (*WaterType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_water_proto_rawDescGZIP(), []int{1}
}

func (x *WaterType) GetBase() *WaterBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WaterType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaterType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *WaterType) GetPh() *AcidityType {
	if x != nil {
		return x.Ph
	}
	return nil
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
type WaterAdditionType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *WaterBase             `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount        *VolumeType            `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaterAdditionType) Reset() {
	*x = WaterAdditionType{}
	mi := &file_beerproto_v1_water_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaterAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterAdditionType) ProtoMessage() {}

func (x *WaterAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_water_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterAdditionType.ProtoReflect.Descriptor instead.
func (*WaterAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_water_proto_rawDescGZIP(), []int{2}
}

func (x *WaterAdditionType) GetBase() *WaterBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WaterAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaterAdditionType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

var File_beerproto_v1_water_proto protoreflect.FileDescriptor

const file_beerproto_v1_water_proto_rawDesc = "" +
	"\n" +
	"\x18beerproto/v1/water.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\xcb\x06\n" +
	"\tWaterBase\x12A\n" +
	"\acalcium\x18\x02 \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\acalcium\x129\n" +
	"\anitrite\x18\x03 \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\anitrite\x12C\n" +
	"\bchloride\x18\x04 \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\bchloride\x12\x1e\n" +
	"\x04name\x18\x05 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12=\n" +
	"\tpotassium\x18\x06 \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\tpotassium\x12=\n" +
	"\tcarbonate\x18\a \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\tcarbonate\x123\n" +
	"\x04iron\x18\b \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\x04iron\x12;\n" +
	"\bflouride\x18\t \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\bflouride\x12A\n" +
	"\asulfate\x18\n" +
	" \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\asulfate\x12E\n" +
	"\tmagnesium\x18\v \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\tmagnesium\x12\x1a\n" +
	"\bproducer\x18\f \x01(\tR\bproducer\x12I\n" +
	"\vbicarbonate\x18\r \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\vbicarbonate\x129\n" +
	"\anitrate\x18\x0e \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\anitrate\x12?\n" +
	"\x06sodium\x18\x0f \x01(\v2\x1f.beerproto.v1.ConcentrationTypeB\x06\xbaH\x03\xc8\x01\x01R\x06sodium\"\x9e\x01\n" +
	"\tWaterType\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x17.beerproto.v1.WaterBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x14\n" +
	"\x05notes\x18\x03 \x01(\tR\x05notes\x12)\n" +
	"\x02ph\x18\x04 \x01(\v2\x19.beerproto.v1.AcidityTypeR\x02ph\"\x97\x01\n" +
	"\x11WaterAdditionType\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x17.beerproto.v1.WaterBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x120\n" +
	"\x06amount\x18\x03 \x01(\v2\x18.beerproto.v1.VolumeTypeR\x06amountB\xab\x01\n" +
	"\x10com.beerproto.v1B\n" +
	"WaterProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_water_proto_rawDescOnce sync.Once
	file_beerproto_v1_water_proto_rawDescData []byte
)

func file_beerproto_v1_water_proto_rawDescGZIP() []byte {
	file_beerproto_v1_water_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_water_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_water_proto_rawDesc), len(file_beerproto_v1_water_proto_rawDesc)))
	})
	return file_beerproto_v1_water_proto_rawDescData
}

var file_beerproto_v1_water_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beerproto_v1_water_proto_goTypes = []any{
	(*WaterBase)(nil),         // 0: beerproto.v1.WaterBase
	(*WaterType)(nil),         // 1: beerproto.v1.WaterType
	(*WaterAdditionType)(nil), // 2: beerproto.v1.WaterAdditionType
	(*ConcentrationType)(nil), // 3: beerproto.v1.ConcentrationType
	(*AcidityType)(nil),       // 4: beerproto.v1.AcidityType
	(*VolumeType)(nil),        // 5: beerproto.v1.VolumeType
}
var file_beerproto_v1_water_proto_depIdxs = []int32{
	3,  // 0: beerproto.v1.WaterBase.calcium:type_name -> beerproto.v1.ConcentrationType
	3,  // 1: beerproto.v1.WaterBase.nitrite:type_name -> beerproto.v1.ConcentrationType
	3,  // 2: beerproto.v1.WaterBase.chloride:type_name -> beerproto.v1.ConcentrationType
	3,  // 3: beerproto.v1.WaterBase.potassium:type_name -> beerproto.v1.ConcentrationType
	3,  // 4: beerproto.v1.WaterBase.carbonate:type_name -> beerproto.v1.ConcentrationType
	3,  // 5: beerproto.v1.WaterBase.iron:type_name -> beerproto.v1.ConcentrationType
	3,  // 6: beerproto.v1.WaterBase.flouride:type_name -> beerproto.v1.ConcentrationType
	3,  // 7: beerproto.v1.WaterBase.sulfate:type_name -> beerproto.v1.ConcentrationType
	3,  // 8: beerproto.v1.WaterBase.magnesium:type_name -> beerproto.v1.ConcentrationType
	3,  // 9: beerproto.v1.WaterBase.bicarbonate:type_name -> beerproto.v1.ConcentrationType
	3,  // 10: beerproto.v1.WaterBase.nitrate:type_name -> beerproto.v1.ConcentrationType
	3,  // 11: beerproto.v1.WaterBase.sodium:type_name -> beerproto.v1.ConcentrationType
	0,  // 12: beerproto.v1.WaterType.base:type_name -> beerproto.v1.WaterBase
	4,  // 13: beerproto.v1.WaterType.ph:type_name -> beerproto.v1.AcidityType
	0,  // 14: beerproto.v1.WaterAdditionType.base:type_name -> beerproto.v1.WaterBase
	5,  // 15: beerproto.v1.WaterAdditionType.amount:type_name -> beerproto.v1.VolumeType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_beerproto_v1_water_proto_init() }
func file_beerproto_v1_water_proto_init() {
	if File_beerproto_v1_water_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_water_proto_rawDesc), len(file_beerproto_v1_water_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_water_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_water_proto_depIdxs,
		MessageInfos:      file_beerproto_v1_water_proto_msgTypes,
	}.Build()
	File_beerproto_v1_water_proto = out.File
	file_beerproto_v1_water_proto_goTypes = nil
	file_beerproto_v1_water_proto_depIdxs = nil
}
