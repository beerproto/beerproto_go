//
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: beerproto/v1/mash_step.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MashStepType_MashStepUnit int32

const (
	MashStepType_MASH_STEP_UNIT_UNSPECIFIED    MashStepType_MashStepUnit = 0
	MashStepType_MASH_STEP_UNIT_INFUSION       MashStepType_MashStepUnit = 1
	MashStepType_MASH_STEP_UNIT_TEMPERATURE    MashStepType_MashStepUnit = 2
	MashStepType_MASH_STEP_UNIT_DECOCTION      MashStepType_MashStepUnit = 3
	MashStepType_MASH_STEP_UNIT_SOURING_MASH   MashStepType_MashStepUnit = 4
	MashStepType_MASH_STEP_UNIT_SOURING_WORT   MashStepType_MashStepUnit = 5
	MashStepType_MASH_STEP_UNIT_DRAIN_MASH_TUN MashStepType_MashStepUnit = 6
	MashStepType_MASH_STEP_UNIT_SPARGE         MashStepType_MashStepUnit = 7
)

// Enum value maps for MashStepType_MashStepUnit.
var (
	MashStepType_MashStepUnit_name = map[int32]string{
		0: "MASH_STEP_UNIT_UNSPECIFIED",
		1: "MASH_STEP_UNIT_INFUSION",
		2: "MASH_STEP_UNIT_TEMPERATURE",
		3: "MASH_STEP_UNIT_DECOCTION",
		4: "MASH_STEP_UNIT_SOURING_MASH",
		5: "MASH_STEP_UNIT_SOURING_WORT",
		6: "MASH_STEP_UNIT_DRAIN_MASH_TUN",
		7: "MASH_STEP_UNIT_SPARGE",
	}
	MashStepType_MashStepUnit_value = map[string]int32{
		"MASH_STEP_UNIT_UNSPECIFIED":    0,
		"MASH_STEP_UNIT_INFUSION":       1,
		"MASH_STEP_UNIT_TEMPERATURE":    2,
		"MASH_STEP_UNIT_DECOCTION":      3,
		"MASH_STEP_UNIT_SOURING_MASH":   4,
		"MASH_STEP_UNIT_SOURING_WORT":   5,
		"MASH_STEP_UNIT_DRAIN_MASH_TUN": 6,
		"MASH_STEP_UNIT_SPARGE":         7,
	}
)

func (x MashStepType_MashStepUnit) Enum() *MashStepType_MashStepUnit {
	p := new(MashStepType_MashStepUnit)
	*p = x
	return p
}

func (x MashStepType_MashStepUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MashStepType_MashStepUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_mash_step_proto_enumTypes[0].Descriptor()
}

func (MashStepType_MashStepUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_mash_step_proto_enumTypes[0]
}

func (x MashStepType_MashStepUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MashStepType_MashStepUnit.Descriptor instead.
func (MashStepType_MashStepUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_mash_step_proto_rawDescGZIP(), []int{0, 0}
}

// MashStepType - a per step representation occurring during the mash
type MashStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StepTime *TimeType `protobuf:"bytes,2,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
	RampTime       *TimeType        `protobuf:"bytes,3,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,4,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	Description    string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Temperature of the water for an infusion step
	InfuseTemperature *TemperatureType          `protobuf:"bytes,6,opt,name=infuse_temperature,json=infuseTemperature,proto3" json:"infuse_temperature,omitempty"`
	StartPh           *AcidityType              `protobuf:"bytes,7,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh             *AcidityType              `protobuf:"bytes,8,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name              string                    `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Type              MashStepType_MashStepUnit `protobuf:"varint,10,opt,name=type,proto3,enum=beerproto.v1.MashStepType_MashStepUnit" json:"type,omitempty"`
	Amount            *VolumeType               `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	StepTemperature   *TemperatureType          `protobuf:"bytes,12,opt,name=step_temperature,json=stepTemperature,proto3" json:"step_temperature,omitempty"`
	// Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
	WaterGrainRatio *SpecificVolumeType `protobuf:"bytes,13,opt,name=water_grain_ratio,json=waterGrainRatio,proto3" json:"water_grain_ratio,omitempty"`
}

func (x *MashStepType) Reset() {
	*x = MashStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_mash_step_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MashStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashStepType) ProtoMessage() {}

func (x *MashStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_mash_step_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashStepType.ProtoReflect.Descriptor instead.
func (*MashStepType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_mash_step_proto_rawDescGZIP(), []int{0}
}

func (x *MashStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MashStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *MashStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *MashStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *MashStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MashStepType) GetInfuseTemperature() *TemperatureType {
	if x != nil {
		return x.InfuseTemperature
	}
	return nil
}

func (x *MashStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *MashStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *MashStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MashStepType) GetType() MashStepType_MashStepUnit {
	if x != nil {
		return x.Type
	}
	return MashStepType_MASH_STEP_UNIT_UNSPECIFIED
}

func (x *MashStepType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MashStepType) GetStepTemperature() *TemperatureType {
	if x != nil {
		return x.StepTemperature
	}
	return nil
}

func (x *MashStepType) GetWaterGrainRatio() *SpecificVolumeType {
	if x != nil {
		return x.WaterGrainRatio
	}
	return nil
}

var File_beerproto_v1_mash_step_proto protoreflect.FileDescriptor

var file_beerproto_v1_mash_step_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcf, 0x07, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x68,
	0x53, 0x74, 0x65, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x10, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x73,
	0x68, 0x53, 0x74, 0x65, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x53,
	0x48, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x53,
	0x48, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x53, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x53,
	0x48, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x07, 0x42, 0xae, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x61, 0x73, 0x68, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x2f, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_mash_step_proto_rawDescOnce sync.Once
	file_beerproto_v1_mash_step_proto_rawDescData = file_beerproto_v1_mash_step_proto_rawDesc
)

func file_beerproto_v1_mash_step_proto_rawDescGZIP() []byte {
	file_beerproto_v1_mash_step_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_mash_step_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_mash_step_proto_rawDescData)
	})
	return file_beerproto_v1_mash_step_proto_rawDescData
}

var file_beerproto_v1_mash_step_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_mash_step_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_mash_step_proto_goTypes = []interface{}{
	(MashStepType_MashStepUnit)(0), // 0: beerproto.v1.MashStepType.MashStepUnit
	(*MashStepType)(nil),           // 1: beerproto.v1.MashStepType
	(*TimeType)(nil),               // 2: beerproto.v1.TimeType
	(*TemperatureType)(nil),        // 3: beerproto.v1.TemperatureType
	(*AcidityType)(nil),            // 4: beerproto.v1.AcidityType
	(*VolumeType)(nil),             // 5: beerproto.v1.VolumeType
	(*SpecificVolumeType)(nil),     // 6: beerproto.v1.SpecificVolumeType
}
var file_beerproto_v1_mash_step_proto_depIdxs = []int32{
	2,  // 0: beerproto.v1.MashStepType.step_time:type_name -> beerproto.v1.TimeType
	2,  // 1: beerproto.v1.MashStepType.ramp_time:type_name -> beerproto.v1.TimeType
	3,  // 2: beerproto.v1.MashStepType.end_temperature:type_name -> beerproto.v1.TemperatureType
	3,  // 3: beerproto.v1.MashStepType.infuse_temperature:type_name -> beerproto.v1.TemperatureType
	4,  // 4: beerproto.v1.MashStepType.start_ph:type_name -> beerproto.v1.AcidityType
	4,  // 5: beerproto.v1.MashStepType.end_ph:type_name -> beerproto.v1.AcidityType
	0,  // 6: beerproto.v1.MashStepType.type:type_name -> beerproto.v1.MashStepType.MashStepUnit
	5,  // 7: beerproto.v1.MashStepType.amount:type_name -> beerproto.v1.VolumeType
	3,  // 8: beerproto.v1.MashStepType.step_temperature:type_name -> beerproto.v1.TemperatureType
	6,  // 9: beerproto.v1.MashStepType.water_grain_ratio:type_name -> beerproto.v1.SpecificVolumeType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_beerproto_v1_mash_step_proto_init() }
func file_beerproto_v1_mash_step_proto_init() {
	if File_beerproto_v1_mash_step_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_mash_step_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MashStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_mash_step_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_mash_step_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_mash_step_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_mash_step_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_mash_step_proto_msgTypes,
	}.Build()
	File_beerproto_v1_mash_step_proto = out.File
	file_beerproto_v1_mash_step_proto_rawDesc = nil
	file_beerproto_v1_mash_step_proto_goTypes = nil
	file_beerproto_v1_mash_step_proto_depIdxs = nil
}
