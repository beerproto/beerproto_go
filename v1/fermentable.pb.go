//
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: beerproto/v1/fermentable.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FermentableBaseType int32

const (
	FermentableBaseType_FERMENTABLE_BASE_TYPE_UNSPECIFIED FermentableBaseType = 0
	// dry extract
	FermentableBaseType_FERMENTABLE_BASE_TYPE_DRY_EXTRACT FermentableBaseType = 1
	// extract
	FermentableBaseType_FERMENTABLE_BASE_TYPE_EXTRACT FermentableBaseType = 2
	// grain
	FermentableBaseType_FERMENTABLE_BASE_TYPE_GRAIN FermentableBaseType = 3
	// sugar
	FermentableBaseType_FERMENTABLE_BASE_TYPE_SUGAR FermentableBaseType = 4
	// fruit
	FermentableBaseType_FERMENTABLE_BASE_TYPE_FRUIT FermentableBaseType = 5
	// juice
	FermentableBaseType_FERMENTABLE_BASE_TYPE_JUICE FermentableBaseType = 6
	// honey
	FermentableBaseType_FERMENTABLE_BASE_TYPE_HONEY FermentableBaseType = 7
	// other
	FermentableBaseType_FERMENTABLE_BASE_TYPE_OTHER FermentableBaseType = 8
)

// Enum value maps for FermentableBaseType.
var (
	FermentableBaseType_name = map[int32]string{
		0: "FERMENTABLE_BASE_TYPE_UNSPECIFIED",
		1: "FERMENTABLE_BASE_TYPE_DRY_EXTRACT",
		2: "FERMENTABLE_BASE_TYPE_EXTRACT",
		3: "FERMENTABLE_BASE_TYPE_GRAIN",
		4: "FERMENTABLE_BASE_TYPE_SUGAR",
		5: "FERMENTABLE_BASE_TYPE_FRUIT",
		6: "FERMENTABLE_BASE_TYPE_JUICE",
		7: "FERMENTABLE_BASE_TYPE_HONEY",
		8: "FERMENTABLE_BASE_TYPE_OTHER",
	}
	FermentableBaseType_value = map[string]int32{
		"FERMENTABLE_BASE_TYPE_UNSPECIFIED": 0,
		"FERMENTABLE_BASE_TYPE_DRY_EXTRACT": 1,
		"FERMENTABLE_BASE_TYPE_EXTRACT":     2,
		"FERMENTABLE_BASE_TYPE_GRAIN":       3,
		"FERMENTABLE_BASE_TYPE_SUGAR":       4,
		"FERMENTABLE_BASE_TYPE_FRUIT":       5,
		"FERMENTABLE_BASE_TYPE_JUICE":       6,
		"FERMENTABLE_BASE_TYPE_HONEY":       7,
		"FERMENTABLE_BASE_TYPE_OTHER":       8,
	}
)

func (x FermentableBaseType) Enum() *FermentableBaseType {
	p := new(FermentableBaseType)
	*p = x
	return p
}

func (x FermentableBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_fermentable_proto_enumTypes[0].Descriptor()
}

func (FermentableBaseType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_fermentable_proto_enumTypes[0]
}

func (x FermentableBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableBaseType.Descriptor instead.
func (FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{0}
}

type GrainGroup int32

const (
	GrainGroup_GRAIN_GROUP_UNSPECIFIED GrainGroup = 0
	// base
	GrainGroup_GRAIN_GROUP_BASE GrainGroup = 1
	// caramel
	GrainGroup_GRAIN_GROUP_CARAMEL GrainGroup = 2
	// flaked
	GrainGroup_GRAIN_GROUP_FLAKED GrainGroup = 3
	// roasted
	GrainGroup_GRAIN_GROUP_ROASTED GrainGroup = 4
	// specialty
	GrainGroup_GRAIN_GROUP_SPECIALTY GrainGroup = 5
	// smoked
	GrainGroup_GRAIN_GROUP_SMOKED GrainGroup = 6
	// adjunct
	GrainGroup_GRAIN_GROUP_ADJUNCT GrainGroup = 7
)

// Enum value maps for GrainGroup.
var (
	GrainGroup_name = map[int32]string{
		0: "GRAIN_GROUP_UNSPECIFIED",
		1: "GRAIN_GROUP_BASE",
		2: "GRAIN_GROUP_CARAMEL",
		3: "GRAIN_GROUP_FLAKED",
		4: "GRAIN_GROUP_ROASTED",
		5: "GRAIN_GROUP_SPECIALTY",
		6: "GRAIN_GROUP_SMOKED",
		7: "GRAIN_GROUP_ADJUNCT",
	}
	GrainGroup_value = map[string]int32{
		"GRAIN_GROUP_UNSPECIFIED": 0,
		"GRAIN_GROUP_BASE":        1,
		"GRAIN_GROUP_CARAMEL":     2,
		"GRAIN_GROUP_FLAKED":      3,
		"GRAIN_GROUP_ROASTED":     4,
		"GRAIN_GROUP_SPECIALTY":   5,
		"GRAIN_GROUP_SMOKED":      6,
		"GRAIN_GROUP_ADJUNCT":     7,
	}
)

func (x GrainGroup) Enum() *GrainGroup {
	p := new(GrainGroup)
	*p = x
	return p
}

func (x GrainGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrainGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_fermentable_proto_enumTypes[1].Descriptor()
}

func (GrainGroup) Type() protoreflect.EnumType {
	return &file_beerproto_v1_fermentable_proto_enumTypes[1]
}

func (x GrainGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrainGroup.Descriptor instead.
func (GrainGroup) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{1}
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
type FermentableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The recommended maximum percentage to use in a grain bill.
	MaxInBatch *PercentType `protobuf:"bytes,2,opt,name=max_in_batch,json=maxInBatch,proto3" json:"max_in_batch,omitempty"`
	// True if the fermentable must be mashed, false if it can be steeped.
	RecommendMash bool `protobuf:"varint,3,opt,name=recommend_mash,json=recommendMash,proto3" json:"recommend_mash,omitempty"`
	// The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
	Protein    *PercentType        `protobuf:"bytes,4,opt,name=protein,proto3" json:"protein,omitempty"`
	ProductId  string              `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,6,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.v1.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,7,opt,name=yield,proto3" json:"yield,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.v1.FermentableBaseType" json:"type,omitempty"`
	Producer   string              `protobuf:"bytes,9,opt,name=producer,proto3" json:"producer,omitempty"`
	// Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
	AlphaAmylase float64    `protobuf:"fixed64,10,opt,name=alpha_amylase,json=alphaAmylase,proto3" json:"alpha_amylase,omitempty"`
	Color        *ColorType `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	Name         string     `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
	DiastaticPower *DiastaticPowerType       `protobuf:"bytes,13,opt,name=diastatic_power,json=diastaticPower,proto3" json:"diastatic_power,omitempty"`
	Moisture       *PercentType              `protobuf:"bytes,14,opt,name=moisture,proto3" json:"moisture,omitempty"`
	Origin         string                    `protobuf:"bytes,15,opt,name=origin,proto3" json:"origin,omitempty"`
	Inventory      *FermentableInventoryType `protobuf:"bytes,16,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
	KolbachIndex *PercentType `protobuf:"bytes,17,opt,name=kolbach_index,json=kolbachIndex,proto3" json:"kolbach_index,omitempty"`
	// Used to indicate the 'crystallized' percentage of starches for crystal malts.
	Glassy *PercentType `protobuf:"bytes,18,opt,name=glassy,proto3" json:"glassy,omitempty"`
	// The percentage of grain that masses through sieves with gaps of 7/64 and 6/64, desired values of 80% or higher which indicate plump kernels.
	Plump *PercentType `protobuf:"bytes,19,opt,name=plump,proto3" json:"plump,omitempty"`
	Half  *PercentType `protobuf:"bytes,20,opt,name=half,proto3" json:"half,omitempty"`
	// The opposite of glassy, a mealy kernel is one that is not glassy. Base malt should be at least 90%, single step mashes generally require 95% or higher.
	Mealy *PercentType `protobuf:"bytes,21,opt,name=mealy,proto3" json:"mealy,omitempty"`
	// The Percentage of grain that makes it through a thin mesh screen, typically 5/64 inch. Values less than 3% are desired.
	Thru *PercentType `protobuf:"bytes,22,opt,name=thru,proto3" json:"thru,omitempty"`
	// Friability is the measure of a malts ability to crumble during the crush, and is used as an indicator for easy gelatinization of the grain and starches, as well as modification of the malt. Value of 85% of higher indicates a well modified malt and is suitable for single step mashes. Lower values may require a step mash.
	Friability *PercentType `protobuf:"bytes,23,opt,name=friability,proto3" json:"friability,omitempty"`
	// The pH of the resultant wort for 1 lb of grain mashed in 1 gallon of distilled water. Used in many water chemistry / mash pH prediction software.
	DiPh *AcidityType `protobuf:"bytes,24,opt,name=di_ph,json=diPh,proto3" json:"di_ph,omitempty"`
	// The measure of wort viscosity, typically associated with the breakdown of beta-glucans. The higher the viscosity, the greater the need for a glucan rest and the less suitable for a fly sparge.
	Viscosity *ViscosityType `protobuf:"bytes,25,opt,name=viscosity,proto3" json:"viscosity,omitempty"`
	// The amount of DMS precursors, namely S-methyl methionine (SMM) and dimethyl sulfoxide (DMSO) in the malt which convert to dimethyl sulfide (DMS).
	DmsP *ConcentrationType `protobuf:"bytes,26,opt,name=dms_p,json=dmsP,proto3" json:"dms_p,omitempty"`
	// Free Amino Nitrogen (FAN) is a critical yeast nutrient. Typical values for base malt is 170.
	Fan *ConcentrationType `protobuf:"bytes,27,opt,name=fan,proto3" json:"fan,omitempty"`
	// Fermentability - Used in Extracts to indicate a baseline typical attenuation for a typical medium attenuation yeast.
	Fermentability *PercentType `protobuf:"bytes,28,opt,name=fermentability,proto3" json:"fermentability,omitempty"`
	// Values of 180 or more may suggest a glucan rest and avoiding fly sparging.
	BetaGlucan *ConcentrationType `protobuf:"bytes,29,opt,name=beta_glucan,json=betaGlucan,proto3" json:"beta_glucan,omitempty"`
	Notes      string             `protobuf:"bytes,30,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *FermentableType) Reset() {
	*x = FermentableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_fermentable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableType) ProtoMessage() {}

func (x *FermentableType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableType.ProtoReflect.Descriptor instead.
func (*FermentableType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{0}
}

func (x *FermentableType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableType) GetMaxInBatch() *PercentType {
	if x != nil {
		return x.MaxInBatch
	}
	return nil
}

func (x *FermentableType) GetRecommendMash() bool {
	if x != nil {
		return x.RecommendMash
	}
	return false
}

func (x *FermentableType) GetProtein() *PercentType {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *FermentableType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableType) GetGrainGroup() GrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return GrainGroup_GRAIN_GROUP_UNSPECIFIED
}

func (x *FermentableType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableType) GetType() FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableBaseType_FERMENTABLE_BASE_TYPE_UNSPECIFIED
}

func (x *FermentableType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableType) GetAlphaAmylase() float64 {
	if x != nil {
		return x.AlphaAmylase
	}
	return 0
}

func (x *FermentableType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableType) GetDiastaticPower() *DiastaticPowerType {
	if x != nil {
		return x.DiastaticPower
	}
	return nil
}

func (x *FermentableType) GetMoisture() *PercentType {
	if x != nil {
		return x.Moisture
	}
	return nil
}

func (x *FermentableType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableType) GetInventory() *FermentableInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *FermentableType) GetKolbachIndex() *PercentType {
	if x != nil {
		return x.KolbachIndex
	}
	return nil
}

func (x *FermentableType) GetGlassy() *PercentType {
	if x != nil {
		return x.Glassy
	}
	return nil
}

func (x *FermentableType) GetPlump() *PercentType {
	if x != nil {
		return x.Plump
	}
	return nil
}

func (x *FermentableType) GetHalf() *PercentType {
	if x != nil {
		return x.Half
	}
	return nil
}

func (x *FermentableType) GetMealy() *PercentType {
	if x != nil {
		return x.Mealy
	}
	return nil
}

func (x *FermentableType) GetThru() *PercentType {
	if x != nil {
		return x.Thru
	}
	return nil
}

func (x *FermentableType) GetFriability() *PercentType {
	if x != nil {
		return x.Friability
	}
	return nil
}

func (x *FermentableType) GetDiPh() *AcidityType {
	if x != nil {
		return x.DiPh
	}
	return nil
}

func (x *FermentableType) GetViscosity() *ViscosityType {
	if x != nil {
		return x.Viscosity
	}
	return nil
}

func (x *FermentableType) GetDmsP() *ConcentrationType {
	if x != nil {
		return x.DmsP
	}
	return nil
}

func (x *FermentableType) GetFan() *ConcentrationType {
	if x != nil {
		return x.Fan
	}
	return nil
}

func (x *FermentableType) GetFermentability() *PercentType {
	if x != nil {
		return x.Fermentability
	}
	return nil
}

func (x *FermentableType) GetBetaGlucan() *ConcentrationType {
	if x != nil {
		return x.BetaGlucan
	}
	return nil
}

func (x *FermentableType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
type FermentableAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.v1.FermentableBaseType" json:"type,omitempty"`
	Origin     string              `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,4,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.v1.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,5,opt,name=yield,proto3" json:"yield,omitempty"`
	Color      *ColorType          `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	Name       string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Producer   string              `protobuf:"bytes,8,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId  string              `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,10,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to Amount:
	//	*FermentableAdditionType_Mass
	//	*FermentableAdditionType_Volume
	Amount isFermentableAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableAdditionType) Reset() {
	*x = FermentableAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_fermentable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableAdditionType) ProtoMessage() {}

func (x *FermentableAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableAdditionType.ProtoReflect.Descriptor instead.
func (*FermentableAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{1}
}

func (x *FermentableAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableAdditionType) GetType() FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableBaseType_FERMENTABLE_BASE_TYPE_UNSPECIFIED
}

func (x *FermentableAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableAdditionType) GetGrainGroup() GrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return GrainGroup_GRAIN_GROUP_UNSPECIFIED
}

func (x *FermentableAdditionType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableAdditionType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *FermentableAdditionType) GetAmount() isFermentableAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableAdditionType_Amount interface {
	isFermentableAdditionType_Amount()
}

type FermentableAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type FermentableAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*FermentableAdditionType_Mass) isFermentableAdditionType_Amount() {}

func (*FermentableAdditionType_Volume) isFermentableAdditionType_Amount() {}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
type YieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage yield compared to succrose of a fine grind. eg 80%
	FineGrind *PercentType `protobuf:"bytes,1,opt,name=fine_grind,json=fineGrind,proto3" json:"fine_grind,omitempty"`
	// Percentage yield compared to succrose of a coarse grind. eg 78%
	CoarseGrind *PercentType `protobuf:"bytes,2,opt,name=coarse_grind,json=coarseGrind,proto3" json:"coarse_grind,omitempty"`
	// The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
	FineCoarseDifference *PercentType `protobuf:"bytes,3,opt,name=fine_coarse_difference,json=fineCoarseDifference,proto3" json:"fine_coarse_difference,omitempty"`
	// The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
	Potential *GravityType `protobuf:"bytes,4,opt,name=potential,proto3" json:"potential,omitempty"`
}

func (x *YieldType) Reset() {
	*x = YieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_fermentable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldType) ProtoMessage() {}

func (x *YieldType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldType.ProtoReflect.Descriptor instead.
func (*YieldType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{2}
}

func (x *YieldType) GetFineGrind() *PercentType {
	if x != nil {
		return x.FineGrind
	}
	return nil
}

func (x *YieldType) GetCoarseGrind() *PercentType {
	if x != nil {
		return x.CoarseGrind
	}
	return nil
}

func (x *YieldType) GetFineCoarseDifference() *PercentType {
	if x != nil {
		return x.FineCoarseDifference
	}
	return nil
}

func (x *YieldType) GetPotential() *GravityType {
	if x != nil {
		return x.Potential
	}
	return nil
}

type FermentableInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*FermentableInventoryType_Mass
	//	*FermentableInventoryType_Volume
	Amount isFermentableInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableInventoryType) Reset() {
	*x = FermentableInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_fermentable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableInventoryType) ProtoMessage() {}

func (x *FermentableInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableInventoryType.ProtoReflect.Descriptor instead.
func (*FermentableInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{3}
}

func (m *FermentableInventoryType) GetAmount() isFermentableInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableInventoryType_Amount interface {
	isFermentableInventoryType_Amount()
}

type FermentableInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type FermentableInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*FermentableInventoryType_Mass) isFermentableInventoryType_Amount() {}

func (*FermentableInventoryType_Volume) isFermentableInventoryType_Amount() {}

var File_beerproto_v1_fermentable_proto protoreflect.FileDescriptor

var file_beerproto_v1_fermentable_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x0b, 0x0a, 0x0f, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5f, 0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x69, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x3e, 0x0a, 0x0d, 0x6b, 0x6f, 0x6c, 0x62, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x6b, 0x6f, 0x6c, 0x62, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x31, 0x0a, 0x06, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6c, 0x75, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70,
	0x6c, 0x75, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x68,
	0x61, 0x6c, 0x66, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x65, 0x61, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d,
	0x65, 0x61, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x68, 0x72, 0x75, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x68, 0x72, 0x75, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x64, 0x69, 0x5f, 0x70, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x69, 0x50, 0x68, 0x12, 0x39,
	0x0a, 0x09, 0x76, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x76, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x6d, 0x73,
	0x5f, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x6d, 0x73, 0x50, 0x12,
	0x31, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x66,
	0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x67, 0x6c,
	0x75, 0x63, 0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x65, 0x74,
	0x61, 0x47, 0x6c, 0x75, 0x63, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xfe, 0x03,
	0x0a, 0x17, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d,
	0x02, 0x0a, 0x09, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x69, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65,
	0x5f, 0x67, 0x72, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x47,
	0x72, 0x69, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x86,
	0x01, 0x0a, 0x18, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xcc, 0x02, 0x0a, 0x13, 0x46, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x21, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x47, 0x41, 0x52,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x55, 0x49,
	0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x55, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x4e, 0x45, 0x59, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x2a, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x49,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x4c, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41,
	0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4d, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x10, 0x07, 0x42, 0xa4,
	0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_fermentable_proto_rawDescOnce sync.Once
	file_beerproto_v1_fermentable_proto_rawDescData = file_beerproto_v1_fermentable_proto_rawDesc
)

func file_beerproto_v1_fermentable_proto_rawDescGZIP() []byte {
	file_beerproto_v1_fermentable_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_fermentable_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_fermentable_proto_rawDescData)
	})
	return file_beerproto_v1_fermentable_proto_rawDescData
}

var file_beerproto_v1_fermentable_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beerproto_v1_fermentable_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_beerproto_v1_fermentable_proto_goTypes = []interface{}{
	(FermentableBaseType)(0),         // 0: beerproto.v1.FermentableBaseType
	(GrainGroup)(0),                  // 1: beerproto.v1.GrainGroup
	(*FermentableType)(nil),          // 2: beerproto.v1.FermentableType
	(*FermentableAdditionType)(nil),  // 3: beerproto.v1.FermentableAdditionType
	(*YieldType)(nil),                // 4: beerproto.v1.YieldType
	(*FermentableInventoryType)(nil), // 5: beerproto.v1.FermentableInventoryType
	(*PercentType)(nil),              // 6: beerproto.v1.PercentType
	(*ColorType)(nil),                // 7: beerproto.v1.ColorType
	(*DiastaticPowerType)(nil),       // 8: beerproto.v1.DiastaticPowerType
	(*AcidityType)(nil),              // 9: beerproto.v1.AcidityType
	(*ViscosityType)(nil),            // 10: beerproto.v1.ViscosityType
	(*ConcentrationType)(nil),        // 11: beerproto.v1.ConcentrationType
	(*TimingType)(nil),               // 12: beerproto.v1.TimingType
	(*MassType)(nil),                 // 13: beerproto.v1.MassType
	(*VolumeType)(nil),               // 14: beerproto.v1.VolumeType
	(*GravityType)(nil),              // 15: beerproto.v1.GravityType
}
var file_beerproto_v1_fermentable_proto_depIdxs = []int32{
	6,  // 0: beerproto.v1.FermentableType.max_in_batch:type_name -> beerproto.v1.PercentType
	6,  // 1: beerproto.v1.FermentableType.protein:type_name -> beerproto.v1.PercentType
	1,  // 2: beerproto.v1.FermentableType.grain_group:type_name -> beerproto.v1.GrainGroup
	4,  // 3: beerproto.v1.FermentableType.yield:type_name -> beerproto.v1.YieldType
	0,  // 4: beerproto.v1.FermentableType.type:type_name -> beerproto.v1.FermentableBaseType
	7,  // 5: beerproto.v1.FermentableType.color:type_name -> beerproto.v1.ColorType
	8,  // 6: beerproto.v1.FermentableType.diastatic_power:type_name -> beerproto.v1.DiastaticPowerType
	6,  // 7: beerproto.v1.FermentableType.moisture:type_name -> beerproto.v1.PercentType
	5,  // 8: beerproto.v1.FermentableType.inventory:type_name -> beerproto.v1.FermentableInventoryType
	6,  // 9: beerproto.v1.FermentableType.kolbach_index:type_name -> beerproto.v1.PercentType
	6,  // 10: beerproto.v1.FermentableType.glassy:type_name -> beerproto.v1.PercentType
	6,  // 11: beerproto.v1.FermentableType.plump:type_name -> beerproto.v1.PercentType
	6,  // 12: beerproto.v1.FermentableType.half:type_name -> beerproto.v1.PercentType
	6,  // 13: beerproto.v1.FermentableType.mealy:type_name -> beerproto.v1.PercentType
	6,  // 14: beerproto.v1.FermentableType.thru:type_name -> beerproto.v1.PercentType
	6,  // 15: beerproto.v1.FermentableType.friability:type_name -> beerproto.v1.PercentType
	9,  // 16: beerproto.v1.FermentableType.di_ph:type_name -> beerproto.v1.AcidityType
	10, // 17: beerproto.v1.FermentableType.viscosity:type_name -> beerproto.v1.ViscosityType
	11, // 18: beerproto.v1.FermentableType.dms_p:type_name -> beerproto.v1.ConcentrationType
	11, // 19: beerproto.v1.FermentableType.fan:type_name -> beerproto.v1.ConcentrationType
	6,  // 20: beerproto.v1.FermentableType.fermentability:type_name -> beerproto.v1.PercentType
	11, // 21: beerproto.v1.FermentableType.beta_glucan:type_name -> beerproto.v1.ConcentrationType
	0,  // 22: beerproto.v1.FermentableAdditionType.type:type_name -> beerproto.v1.FermentableBaseType
	1,  // 23: beerproto.v1.FermentableAdditionType.grain_group:type_name -> beerproto.v1.GrainGroup
	4,  // 24: beerproto.v1.FermentableAdditionType.yield:type_name -> beerproto.v1.YieldType
	7,  // 25: beerproto.v1.FermentableAdditionType.color:type_name -> beerproto.v1.ColorType
	12, // 26: beerproto.v1.FermentableAdditionType.timing:type_name -> beerproto.v1.TimingType
	13, // 27: beerproto.v1.FermentableAdditionType.mass:type_name -> beerproto.v1.MassType
	14, // 28: beerproto.v1.FermentableAdditionType.volume:type_name -> beerproto.v1.VolumeType
	6,  // 29: beerproto.v1.YieldType.fine_grind:type_name -> beerproto.v1.PercentType
	6,  // 30: beerproto.v1.YieldType.coarse_grind:type_name -> beerproto.v1.PercentType
	6,  // 31: beerproto.v1.YieldType.fine_coarse_difference:type_name -> beerproto.v1.PercentType
	15, // 32: beerproto.v1.YieldType.potential:type_name -> beerproto.v1.GravityType
	13, // 33: beerproto.v1.FermentableInventoryType.mass:type_name -> beerproto.v1.MassType
	14, // 34: beerproto.v1.FermentableInventoryType.volume:type_name -> beerproto.v1.VolumeType
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_beerproto_v1_fermentable_proto_init() }
func file_beerproto_v1_fermentable_proto_init() {
	if File_beerproto_v1_fermentable_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_fermentable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_fermentable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_fermentable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_fermentable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beerproto_v1_fermentable_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FermentableAdditionType_Mass)(nil),
		(*FermentableAdditionType_Volume)(nil),
	}
	file_beerproto_v1_fermentable_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FermentableInventoryType_Mass)(nil),
		(*FermentableInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_fermentable_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_fermentable_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_fermentable_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_fermentable_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_fermentable_proto_msgTypes,
	}.Build()
	File_beerproto_v1_fermentable_proto = out.File
	file_beerproto_v1_fermentable_proto_rawDesc = nil
	file_beerproto_v1_fermentable_proto_goTypes = nil
	file_beerproto_v1_fermentable_proto_depIdxs = nil
}
