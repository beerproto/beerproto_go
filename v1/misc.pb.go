//
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: beerproto/v1/misc.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiscellaneousBaseType int32

const (
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_UNSPECIFIED MiscellaneousBaseType = 0
	// spice
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_SPICE MiscellaneousBaseType = 1
	// fining
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_FINING MiscellaneousBaseType = 2
	// water agent
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_WATER_AGENT MiscellaneousBaseType = 3
	// herb
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_HERB MiscellaneousBaseType = 4
	// flavor
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_FLAVOR MiscellaneousBaseType = 5
	// wood
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_WOOD MiscellaneousBaseType = 6
	// other
	MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_OTHER MiscellaneousBaseType = 7
)

// Enum value maps for MiscellaneousBaseType.
var (
	MiscellaneousBaseType_name = map[int32]string{
		0: "MISCELLANEOUS_BASE_TYPE_UNSPECIFIED",
		1: "MISCELLANEOUS_BASE_TYPE_SPICE",
		2: "MISCELLANEOUS_BASE_TYPE_FINING",
		3: "MISCELLANEOUS_BASE_TYPE_WATER_AGENT",
		4: "MISCELLANEOUS_BASE_TYPE_HERB",
		5: "MISCELLANEOUS_BASE_TYPE_FLAVOR",
		6: "MISCELLANEOUS_BASE_TYPE_WOOD",
		7: "MISCELLANEOUS_BASE_TYPE_OTHER",
	}
	MiscellaneousBaseType_value = map[string]int32{
		"MISCELLANEOUS_BASE_TYPE_UNSPECIFIED": 0,
		"MISCELLANEOUS_BASE_TYPE_SPICE":       1,
		"MISCELLANEOUS_BASE_TYPE_FINING":      2,
		"MISCELLANEOUS_BASE_TYPE_WATER_AGENT": 3,
		"MISCELLANEOUS_BASE_TYPE_HERB":        4,
		"MISCELLANEOUS_BASE_TYPE_FLAVOR":      5,
		"MISCELLANEOUS_BASE_TYPE_WOOD":        6,
		"MISCELLANEOUS_BASE_TYPE_OTHER":       7,
	}
)

func (x MiscellaneousBaseType) Enum() *MiscellaneousBaseType {
	p := new(MiscellaneousBaseType)
	*p = x
	return p
}

func (x MiscellaneousBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiscellaneousBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_misc_proto_enumTypes[0].Descriptor()
}

func (MiscellaneousBaseType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_misc_proto_enumTypes[0]
}

func (x MiscellaneousBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiscellaneousBaseType.Descriptor instead.
func (MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{0}
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
type MiscellaneousType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor    string                      `protobuf:"bytes,2,opt,name=use_for,json=useFor,proto3" json:"use_for,omitempty"`
	Notes     string                      `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Name      string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Producer  string                      `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId string                      `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousBaseType       `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.v1.MiscellaneousBaseType" json:"type,omitempty"`
	Inventory *MiscellaneousInventoryType `protobuf:"bytes,8,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *MiscellaneousType) Reset() {
	*x = MiscellaneousType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_misc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousType) ProtoMessage() {}

func (x *MiscellaneousType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousType.ProtoReflect.Descriptor instead.
func (*MiscellaneousType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{0}
}

func (x *MiscellaneousType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousType) GetUseFor() string {
	if x != nil {
		return x.UseFor
	}
	return ""
}

func (x *MiscellaneousType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MiscellaneousType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousType) GetType() MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_UNSPECIFIED
}

func (x *MiscellaneousType) GetInventory() *MiscellaneousInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
type MiscellaneousAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Producer string `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing    *TimingType           `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	ProductId string                `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousBaseType `protobuf:"varint,6,opt,name=type,proto3,enum=beerproto.v1.MiscellaneousBaseType" json:"type,omitempty"`
	// Types that are assignable to Amount:
	//	*MiscellaneousAdditionType_Mass
	//	*MiscellaneousAdditionType_Unit
	//	*MiscellaneousAdditionType_Volume
	Amount isMiscellaneousAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousAdditionType) Reset() {
	*x = MiscellaneousAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_misc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousAdditionType) ProtoMessage() {}

func (x *MiscellaneousAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousAdditionType.ProtoReflect.Descriptor instead.
func (*MiscellaneousAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{1}
}

func (x *MiscellaneousAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetType() MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousBaseType_MISCELLANEOUS_BASE_TYPE_UNSPECIFIED
}

func (m *MiscellaneousAdditionType) GetAmount() isMiscellaneousAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousAdditionType_Amount interface {
	isMiscellaneousAdditionType_Amount()
}

type MiscellaneousAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,7,opt,name=mass,proto3,oneof"`
}

type MiscellaneousAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,8,opt,name=unit,proto3,oneof"`
}

type MiscellaneousAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,9,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousAdditionType_Mass) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Unit) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Volume) isMiscellaneousAdditionType_Amount() {}

type MiscellaneousInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*MiscellaneousInventoryType_Mass
	//	*MiscellaneousInventoryType_Unit
	//	*MiscellaneousInventoryType_Volume
	Amount isMiscellaneousInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousInventoryType) Reset() {
	*x = MiscellaneousInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_misc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousInventoryType) ProtoMessage() {}

func (x *MiscellaneousInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_misc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousInventoryType.ProtoReflect.Descriptor instead.
func (*MiscellaneousInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_misc_proto_rawDescGZIP(), []int{2}
}

func (m *MiscellaneousInventoryType) GetAmount() isMiscellaneousInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousInventoryType_Amount interface {
	isMiscellaneousInventoryType_Amount()
}

type MiscellaneousInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type MiscellaneousInventoryType_Unit struct {
	Unit *UnitType `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type MiscellaneousInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,3,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousInventoryType_Mass) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Unit) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Volume) isMiscellaneousInventoryType_Amount() {}

var File_beerproto_v1_misc_proto protoreflect.FileDescriptor

var file_beerproto_v1_misc_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x69, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x4d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xff, 0x02,
	0x0a, 0x19, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x1a, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xbb, 0x02, 0x0a, 0x15, 0x4d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45,
	0x4f, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x42, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f,
	0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x4f,
	0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e,
	0x45, 0x4f, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x42, 0xaa, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x4d, 0x69, 0x73,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_misc_proto_rawDescOnce sync.Once
	file_beerproto_v1_misc_proto_rawDescData = file_beerproto_v1_misc_proto_rawDesc
)

func file_beerproto_v1_misc_proto_rawDescGZIP() []byte {
	file_beerproto_v1_misc_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_misc_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_misc_proto_rawDescData)
	})
	return file_beerproto_v1_misc_proto_rawDescData
}

var file_beerproto_v1_misc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_misc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beerproto_v1_misc_proto_goTypes = []interface{}{
	(MiscellaneousBaseType)(0),         // 0: beerproto.v1.MiscellaneousBaseType
	(*MiscellaneousType)(nil),          // 1: beerproto.v1.MiscellaneousType
	(*MiscellaneousAdditionType)(nil),  // 2: beerproto.v1.MiscellaneousAdditionType
	(*MiscellaneousInventoryType)(nil), // 3: beerproto.v1.MiscellaneousInventoryType
	(*TimingType)(nil),                 // 4: beerproto.v1.TimingType
	(*MassType)(nil),                   // 5: beerproto.v1.MassType
	(*UnitType)(nil),                   // 6: beerproto.v1.UnitType
	(*VolumeType)(nil),                 // 7: beerproto.v1.VolumeType
}
var file_beerproto_v1_misc_proto_depIdxs = []int32{
	0,  // 0: beerproto.v1.MiscellaneousType.type:type_name -> beerproto.v1.MiscellaneousBaseType
	3,  // 1: beerproto.v1.MiscellaneousType.inventory:type_name -> beerproto.v1.MiscellaneousInventoryType
	4,  // 2: beerproto.v1.MiscellaneousAdditionType.timing:type_name -> beerproto.v1.TimingType
	0,  // 3: beerproto.v1.MiscellaneousAdditionType.type:type_name -> beerproto.v1.MiscellaneousBaseType
	5,  // 4: beerproto.v1.MiscellaneousAdditionType.mass:type_name -> beerproto.v1.MassType
	6,  // 5: beerproto.v1.MiscellaneousAdditionType.unit:type_name -> beerproto.v1.UnitType
	7,  // 6: beerproto.v1.MiscellaneousAdditionType.volume:type_name -> beerproto.v1.VolumeType
	5,  // 7: beerproto.v1.MiscellaneousInventoryType.mass:type_name -> beerproto.v1.MassType
	6,  // 8: beerproto.v1.MiscellaneousInventoryType.unit:type_name -> beerproto.v1.UnitType
	7,  // 9: beerproto.v1.MiscellaneousInventoryType.volume:type_name -> beerproto.v1.VolumeType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_beerproto_v1_misc_proto_init() }
func file_beerproto_v1_misc_proto_init() {
	if File_beerproto_v1_misc_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_misc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_misc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_misc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beerproto_v1_misc_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MiscellaneousAdditionType_Mass)(nil),
		(*MiscellaneousAdditionType_Unit)(nil),
		(*MiscellaneousAdditionType_Volume)(nil),
	}
	file_beerproto_v1_misc_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MiscellaneousInventoryType_Mass)(nil),
		(*MiscellaneousInventoryType_Unit)(nil),
		(*MiscellaneousInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_misc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_misc_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_misc_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_misc_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_misc_proto_msgTypes,
	}.Build()
	File_beerproto_v1_misc_proto = out.File
	file_beerproto_v1_misc_proto_rawDesc = nil
	file_beerproto_v1_misc_proto_goTypes = nil
	file_beerproto_v1_misc_proto_depIdxs = nil
}
