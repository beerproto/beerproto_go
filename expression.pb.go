//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: beerproto/v1/expression.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BinaryArithmetic int32

const (
	BinaryArithmetic_BINARY_ARITHMETIC_UNSPECIFIED    BinaryArithmetic = 0
	BinaryArithmetic_BINARY_ARITHMETIC_ADDITION       BinaryArithmetic = 1
	BinaryArithmetic_BINARY_ARITHMETIC_SUBTRACTION    BinaryArithmetic = 2
	BinaryArithmetic_BINARY_ARITHMETIC_MULTIPLICATION BinaryArithmetic = 3
	BinaryArithmetic_BINARY_ARITHMETIC_DIVISION       BinaryArithmetic = 4
)

// Enum value maps for BinaryArithmetic.
var (
	BinaryArithmetic_name = map[int32]string{
		0: "BINARY_ARITHMETIC_UNSPECIFIED",
		1: "BINARY_ARITHMETIC_ADDITION",
		2: "BINARY_ARITHMETIC_SUBTRACTION",
		3: "BINARY_ARITHMETIC_MULTIPLICATION",
		4: "BINARY_ARITHMETIC_DIVISION",
	}
	BinaryArithmetic_value = map[string]int32{
		"BINARY_ARITHMETIC_UNSPECIFIED":    0,
		"BINARY_ARITHMETIC_ADDITION":       1,
		"BINARY_ARITHMETIC_SUBTRACTION":    2,
		"BINARY_ARITHMETIC_MULTIPLICATION": 3,
		"BINARY_ARITHMETIC_DIVISION":       4,
	}
)

func (x BinaryArithmetic) Enum() *BinaryArithmetic {
	p := new(BinaryArithmetic)
	*p = x
	return p
}

func (x BinaryArithmetic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryArithmetic) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_expression_proto_enumTypes[0].Descriptor()
}

func (BinaryArithmetic) Type() protoreflect.EnumType {
	return &file_beerproto_v1_expression_proto_enumTypes[0]
}

func (x BinaryArithmetic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryArithmetic.Descriptor instead.
func (BinaryArithmetic) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_expression_proto_rawDescGZIP(), []int{0}
}

type UnaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*UnaryExpression_Double
	//	*UnaryExpression_Float
	//	*UnaryExpression_Int32
	//	*UnaryExpression_Int64
	//	*UnaryExpression_Uint32
	//	*UnaryExpression_Uint64
	//	*UnaryExpression_Bool
	//	*UnaryExpression_String_
	//	*UnaryExpression_Bytes
	Value isUnaryExpression_Value `protobuf_oneof:"value"`
}

func (x *UnaryExpression) Reset() {
	*x = UnaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_expression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpression) ProtoMessage() {}

func (x *UnaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_expression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpression.ProtoReflect.Descriptor instead.
func (*UnaryExpression) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_expression_proto_rawDescGZIP(), []int{0}
}

func (m *UnaryExpression) GetValue() isUnaryExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UnaryExpression) GetDouble() float64 {
	if x, ok := x.GetValue().(*UnaryExpression_Double); ok {
		return x.Double
	}
	return 0
}

func (x *UnaryExpression) GetFloat() float32 {
	if x, ok := x.GetValue().(*UnaryExpression_Float); ok {
		return x.Float
	}
	return 0
}

func (x *UnaryExpression) GetInt32() int32 {
	if x, ok := x.GetValue().(*UnaryExpression_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *UnaryExpression) GetInt64() int64 {
	if x, ok := x.GetValue().(*UnaryExpression_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *UnaryExpression) GetUint32() uint32 {
	if x, ok := x.GetValue().(*UnaryExpression_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *UnaryExpression) GetUint64() uint64 {
	if x, ok := x.GetValue().(*UnaryExpression_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *UnaryExpression) GetBool() bool {
	if x, ok := x.GetValue().(*UnaryExpression_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *UnaryExpression) GetString_() string {
	if x, ok := x.GetValue().(*UnaryExpression_String_); ok {
		return x.String_
	}
	return ""
}

func (x *UnaryExpression) GetBytes() []byte {
	if x, ok := x.GetValue().(*UnaryExpression_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isUnaryExpression_Value interface {
	isUnaryExpression_Value()
}

type UnaryExpression_Double struct {
	Double float64 `protobuf:"fixed64,1,opt,name=double,proto3,oneof"`
}

type UnaryExpression_Float struct {
	Float float32 `protobuf:"fixed32,2,opt,name=float,proto3,oneof"`
}

type UnaryExpression_Int32 struct {
	Int32 int32 `protobuf:"varint,3,opt,name=int32,proto3,oneof"`
}

type UnaryExpression_Int64 struct {
	Int64 int64 `protobuf:"varint,4,opt,name=int64,proto3,oneof"`
}

type UnaryExpression_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,5,opt,name=uint32,proto3,oneof"`
}

type UnaryExpression_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,6,opt,name=uint64,proto3,oneof"`
}

type UnaryExpression_Bool struct {
	Bool bool `protobuf:"varint,7,opt,name=bool,proto3,oneof"`
}

type UnaryExpression_String_ struct {
	String_ string `protobuf:"bytes,8,opt,name=string,proto3,oneof"`
}

type UnaryExpression_Bytes struct {
	Bytes []byte `protobuf:"bytes,9,opt,name=bytes,proto3,oneof"`
}

func (*UnaryExpression_Double) isUnaryExpression_Value() {}

func (*UnaryExpression_Float) isUnaryExpression_Value() {}

func (*UnaryExpression_Int32) isUnaryExpression_Value() {}

func (*UnaryExpression_Int64) isUnaryExpression_Value() {}

func (*UnaryExpression_Uint32) isUnaryExpression_Value() {}

func (*UnaryExpression_Uint64) isUnaryExpression_Value() {}

func (*UnaryExpression_Bool) isUnaryExpression_Value() {}

func (*UnaryExpression_String_) isUnaryExpression_Value() {}

func (*UnaryExpression_Bytes) isUnaryExpression_Value() {}

type BinaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator BinaryArithmetic `protobuf:"varint,1,opt,name=operator,proto3,enum=beerproto.v1.BinaryArithmetic" json:"operator,omitempty"`
	// Types that are assignable to Left:
	//
	//	*BinaryExpression_BinaryLeft
	//	*BinaryExpression_UnaryLeft
	//	*BinaryExpression_ValueLeft
	Left isBinaryExpression_Left `protobuf_oneof:"left"`
	// Types that are assignable to Right:
	//
	//	*BinaryExpression_BinaryRight
	//	*BinaryExpression_UnaryRight
	//	*BinaryExpression_ValueRight
	Right isBinaryExpression_Right `protobuf_oneof:"right"`
}

func (x *BinaryExpression) Reset() {
	*x = BinaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_expression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpression) ProtoMessage() {}

func (x *BinaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_expression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpression.ProtoReflect.Descriptor instead.
func (*BinaryExpression) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_expression_proto_rawDescGZIP(), []int{1}
}

func (x *BinaryExpression) GetOperator() BinaryArithmetic {
	if x != nil {
		return x.Operator
	}
	return BinaryArithmetic_BINARY_ARITHMETIC_UNSPECIFIED
}

func (m *BinaryExpression) GetLeft() isBinaryExpression_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *BinaryExpression) GetBinaryLeft() *BinaryExpression {
	if x, ok := x.GetLeft().(*BinaryExpression_BinaryLeft); ok {
		return x.BinaryLeft
	}
	return nil
}

func (x *BinaryExpression) GetUnaryLeft() *UnaryExpression {
	if x, ok := x.GetLeft().(*BinaryExpression_UnaryLeft); ok {
		return x.UnaryLeft
	}
	return nil
}

func (x *BinaryExpression) GetValueLeft() *ValueExpression {
	if x, ok := x.GetLeft().(*BinaryExpression_ValueLeft); ok {
		return x.ValueLeft
	}
	return nil
}

func (m *BinaryExpression) GetRight() isBinaryExpression_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *BinaryExpression) GetBinaryRight() *BinaryExpression {
	if x, ok := x.GetRight().(*BinaryExpression_BinaryRight); ok {
		return x.BinaryRight
	}
	return nil
}

func (x *BinaryExpression) GetUnaryRight() *UnaryExpression {
	if x, ok := x.GetRight().(*BinaryExpression_UnaryRight); ok {
		return x.UnaryRight
	}
	return nil
}

func (x *BinaryExpression) GetValueRight() *ValueExpression {
	if x, ok := x.GetRight().(*BinaryExpression_ValueRight); ok {
		return x.ValueRight
	}
	return nil
}

type isBinaryExpression_Left interface {
	isBinaryExpression_Left()
}

type BinaryExpression_BinaryLeft struct {
	BinaryLeft *BinaryExpression `protobuf:"bytes,10,opt,name=binary_left,json=binaryLeft,proto3,oneof"`
}

type BinaryExpression_UnaryLeft struct {
	UnaryLeft *UnaryExpression `protobuf:"bytes,11,opt,name=unary_left,json=unaryLeft,proto3,oneof"`
}

type BinaryExpression_ValueLeft struct {
	ValueLeft *ValueExpression `protobuf:"bytes,12,opt,name=value_left,json=valueLeft,proto3,oneof"`
}

func (*BinaryExpression_BinaryLeft) isBinaryExpression_Left() {}

func (*BinaryExpression_UnaryLeft) isBinaryExpression_Left() {}

func (*BinaryExpression_ValueLeft) isBinaryExpression_Left() {}

type isBinaryExpression_Right interface {
	isBinaryExpression_Right()
}

type BinaryExpression_BinaryRight struct {
	BinaryRight *BinaryExpression `protobuf:"bytes,20,opt,name=binary_right,json=binaryRight,proto3,oneof"`
}

type BinaryExpression_UnaryRight struct {
	UnaryRight *UnaryExpression `protobuf:"bytes,21,opt,name=unary_right,json=unaryRight,proto3,oneof"`
}

type BinaryExpression_ValueRight struct {
	ValueRight *ValueExpression `protobuf:"bytes,22,opt,name=value_right,json=valueRight,proto3,oneof"`
}

func (*BinaryExpression_BinaryRight) isBinaryExpression_Right() {}

func (*BinaryExpression_UnaryRight) isBinaryExpression_Right() {}

func (*BinaryExpression_ValueRight) isBinaryExpression_Right() {}

type ValueExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValueExpression) Reset() {
	*x = ValueExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_expression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueExpression) ProtoMessage() {}

func (x *ValueExpression) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_expression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueExpression.ProtoReflect.Descriptor instead.
func (*ValueExpression) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_expression_proto_rawDescGZIP(), []int{2}
}

var File_beerproto_v1_expression_proto protoreflect.FileDescriptor

var file_beerproto_v1_expression_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x22, 0xf8, 0x01,
	0x0a, 0x0f, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x10, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0a,
	0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x0c,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xbe, 0x01, 0x0a, 0x10, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x12, 0x21,
	0x0a, 0x1d, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45,
	0x54, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f,
	0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0xb0, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x42,
	0x0f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d,
	0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_expression_proto_rawDescOnce sync.Once
	file_beerproto_v1_expression_proto_rawDescData = file_beerproto_v1_expression_proto_rawDesc
)

func file_beerproto_v1_expression_proto_rawDescGZIP() []byte {
	file_beerproto_v1_expression_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_expression_proto_rawDescData)
	})
	return file_beerproto_v1_expression_proto_rawDescData
}

var file_beerproto_v1_expression_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beerproto_v1_expression_proto_goTypes = []interface{}{
	(BinaryArithmetic)(0),    // 0: beerproto.v1.BinaryArithmetic
	(*UnaryExpression)(nil),  // 1: beerproto.v1.UnaryExpression
	(*BinaryExpression)(nil), // 2: beerproto.v1.BinaryExpression
	(*ValueExpression)(nil),  // 3: beerproto.v1.ValueExpression
}
var file_beerproto_v1_expression_proto_depIdxs = []int32{
	0, // 0: beerproto.v1.BinaryExpression.operator:type_name -> beerproto.v1.BinaryArithmetic
	2, // 1: beerproto.v1.BinaryExpression.binary_left:type_name -> beerproto.v1.BinaryExpression
	1, // 2: beerproto.v1.BinaryExpression.unary_left:type_name -> beerproto.v1.UnaryExpression
	3, // 3: beerproto.v1.BinaryExpression.value_left:type_name -> beerproto.v1.ValueExpression
	2, // 4: beerproto.v1.BinaryExpression.binary_right:type_name -> beerproto.v1.BinaryExpression
	1, // 5: beerproto.v1.BinaryExpression.unary_right:type_name -> beerproto.v1.UnaryExpression
	3, // 6: beerproto.v1.BinaryExpression.value_right:type_name -> beerproto.v1.ValueExpression
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_beerproto_v1_expression_proto_init() }
func file_beerproto_v1_expression_proto_init() {
	if File_beerproto_v1_expression_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_expression_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_expression_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beerproto_v1_expression_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beerproto_v1_expression_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UnaryExpression_Double)(nil),
		(*UnaryExpression_Float)(nil),
		(*UnaryExpression_Int32)(nil),
		(*UnaryExpression_Int64)(nil),
		(*UnaryExpression_Uint32)(nil),
		(*UnaryExpression_Uint64)(nil),
		(*UnaryExpression_Bool)(nil),
		(*UnaryExpression_String_)(nil),
		(*UnaryExpression_Bytes)(nil),
	}
	file_beerproto_v1_expression_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BinaryExpression_BinaryLeft)(nil),
		(*BinaryExpression_UnaryLeft)(nil),
		(*BinaryExpression_ValueLeft)(nil),
		(*BinaryExpression_BinaryRight)(nil),
		(*BinaryExpression_UnaryRight)(nil),
		(*BinaryExpression_ValueRight)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_expression_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_expression_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_expression_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_expression_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_expression_proto_msgTypes,
	}.Build()
	File_beerproto_v1_expression_proto = out.File
	file_beerproto_v1_expression_proto_rawDesc = nil
	file_beerproto_v1_expression_proto_goTypes = nil
	file_beerproto_v1_expression_proto_depIdxs = nil
}
