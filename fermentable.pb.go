//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/fermentable.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FermentableBaseType int32

const (
	FermentableBaseType_FERMENTABLE_BASE_TYPE_UNSPECIFIED FermentableBaseType = 0
	// dry extract
	FermentableBaseType_FERMENTABLE_BASE_TYPE_DRY_EXTRACT FermentableBaseType = 1
	// extract
	FermentableBaseType_FERMENTABLE_BASE_TYPE_EXTRACT FermentableBaseType = 2
	// grain
	FermentableBaseType_FERMENTABLE_BASE_TYPE_GRAIN FermentableBaseType = 3
	// sugar
	FermentableBaseType_FERMENTABLE_BASE_TYPE_SUGAR FermentableBaseType = 4
	// fruit
	FermentableBaseType_FERMENTABLE_BASE_TYPE_FRUIT FermentableBaseType = 5
	// juice
	FermentableBaseType_FERMENTABLE_BASE_TYPE_JUICE FermentableBaseType = 6
	// honey
	FermentableBaseType_FERMENTABLE_BASE_TYPE_HONEY FermentableBaseType = 7
	// other
	FermentableBaseType_FERMENTABLE_BASE_TYPE_OTHER FermentableBaseType = 8
)

// Enum value maps for FermentableBaseType.
var (
	FermentableBaseType_name = map[int32]string{
		0: "FERMENTABLE_BASE_TYPE_UNSPECIFIED",
		1: "FERMENTABLE_BASE_TYPE_DRY_EXTRACT",
		2: "FERMENTABLE_BASE_TYPE_EXTRACT",
		3: "FERMENTABLE_BASE_TYPE_GRAIN",
		4: "FERMENTABLE_BASE_TYPE_SUGAR",
		5: "FERMENTABLE_BASE_TYPE_FRUIT",
		6: "FERMENTABLE_BASE_TYPE_JUICE",
		7: "FERMENTABLE_BASE_TYPE_HONEY",
		8: "FERMENTABLE_BASE_TYPE_OTHER",
	}
	FermentableBaseType_value = map[string]int32{
		"FERMENTABLE_BASE_TYPE_UNSPECIFIED": 0,
		"FERMENTABLE_BASE_TYPE_DRY_EXTRACT": 1,
		"FERMENTABLE_BASE_TYPE_EXTRACT":     2,
		"FERMENTABLE_BASE_TYPE_GRAIN":       3,
		"FERMENTABLE_BASE_TYPE_SUGAR":       4,
		"FERMENTABLE_BASE_TYPE_FRUIT":       5,
		"FERMENTABLE_BASE_TYPE_JUICE":       6,
		"FERMENTABLE_BASE_TYPE_HONEY":       7,
		"FERMENTABLE_BASE_TYPE_OTHER":       8,
	}
)

func (x FermentableBaseType) Enum() *FermentableBaseType {
	p := new(FermentableBaseType)
	*p = x
	return p
}

func (x FermentableBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_fermentable_proto_enumTypes[0].Descriptor()
}

func (FermentableBaseType) Type() protoreflect.EnumType {
	return &file_beerproto_v1_fermentable_proto_enumTypes[0]
}

func (x FermentableBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableBaseType.Descriptor instead.
func (FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{0}
}

type GrainGroup int32

const (
	GrainGroup_GRAIN_GROUP_UNSPECIFIED GrainGroup = 0
	// base
	GrainGroup_GRAIN_GROUP_BASE GrainGroup = 1
	// caramel
	GrainGroup_GRAIN_GROUP_CARAMEL GrainGroup = 2
	// flaked
	GrainGroup_GRAIN_GROUP_FLAKED GrainGroup = 3
	// roasted
	GrainGroup_GRAIN_GROUP_ROASTED GrainGroup = 4
	// specialty
	GrainGroup_GRAIN_GROUP_SPECIALTY GrainGroup = 5
	// smoked
	GrainGroup_GRAIN_GROUP_SMOKED GrainGroup = 6
	// adjunct
	GrainGroup_GRAIN_GROUP_ADJUNCT GrainGroup = 7
)

// Enum value maps for GrainGroup.
var (
	GrainGroup_name = map[int32]string{
		0: "GRAIN_GROUP_UNSPECIFIED",
		1: "GRAIN_GROUP_BASE",
		2: "GRAIN_GROUP_CARAMEL",
		3: "GRAIN_GROUP_FLAKED",
		4: "GRAIN_GROUP_ROASTED",
		5: "GRAIN_GROUP_SPECIALTY",
		6: "GRAIN_GROUP_SMOKED",
		7: "GRAIN_GROUP_ADJUNCT",
	}
	GrainGroup_value = map[string]int32{
		"GRAIN_GROUP_UNSPECIFIED": 0,
		"GRAIN_GROUP_BASE":        1,
		"GRAIN_GROUP_CARAMEL":     2,
		"GRAIN_GROUP_FLAKED":      3,
		"GRAIN_GROUP_ROASTED":     4,
		"GRAIN_GROUP_SPECIALTY":   5,
		"GRAIN_GROUP_SMOKED":      6,
		"GRAIN_GROUP_ADJUNCT":     7,
	}
)

func (x GrainGroup) Enum() *GrainGroup {
	p := new(GrainGroup)
	*p = x
	return p
}

func (x GrainGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrainGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_fermentable_proto_enumTypes[1].Descriptor()
}

func (GrainGroup) Type() protoreflect.EnumType {
	return &file_beerproto_v1_fermentable_proto_enumTypes[1]
}

func (x GrainGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrainGroup.Descriptor instead.
func (GrainGroup) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{1}
}

// FermentableBase provides unique properties to identify individual records of fermentable ingredients.
type FermentableBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          FermentableBaseType    `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.v1.FermentableBaseType" json:"type,omitempty"`
	Origin        string                 `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	GrainGroup    GrainGroup             `protobuf:"varint,3,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.v1.GrainGroup" json:"grain_group,omitempty"`
	Yield         *YieldType             `protobuf:"bytes,4,opt,name=yield,proto3" json:"yield,omitempty"`
	Color         *ColorType             `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Producer      string                 `protobuf:"bytes,7,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId     string                 `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FermentableBase) Reset() {
	*x = FermentableBase{}
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentableBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableBase) ProtoMessage() {}

func (x *FermentableBase) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableBase.ProtoReflect.Descriptor instead.
func (*FermentableBase) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{0}
}

func (x *FermentableBase) GetType() FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableBaseType_FERMENTABLE_BASE_TYPE_UNSPECIFIED
}

func (x *FermentableBase) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableBase) GetGrainGroup() GrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return GrainGroup_GRAIN_GROUP_UNSPECIFIED
}

func (x *FermentableBase) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableBase) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableBase) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
type FermentableType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *FermentableBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The recommended maximum percentage to use in a grain bill.
	MaxInBatch *PercentType `protobuf:"bytes,3,opt,name=max_in_batch,json=maxInBatch,proto3" json:"max_in_batch,omitempty"`
	// True if the fermentable must be mashed, false if it can be steeped.
	RecommendMash bool `protobuf:"varint,4,opt,name=recommend_mash,json=recommendMash,proto3" json:"recommend_mash,omitempty"`
	// The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
	Protein *PercentType `protobuf:"bytes,5,opt,name=protein,proto3" json:"protein,omitempty"`
	// Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
	AlphaAmylase float64 `protobuf:"fixed64,11,opt,name=alpha_amylase,json=alphaAmylase,proto3" json:"alpha_amylase,omitempty"`
	// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
	DiastaticPower *DiastaticPowerType       `protobuf:"bytes,14,opt,name=diastatic_power,json=diastaticPower,proto3" json:"diastatic_power,omitempty"`
	Moisture       *PercentType              `protobuf:"bytes,15,opt,name=moisture,proto3" json:"moisture,omitempty"`
	Inventory      *FermentableInventoryType `protobuf:"bytes,17,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
	KolbachIndex *PercentType `protobuf:"bytes,18,opt,name=kolbach_index,json=kolbachIndex,proto3" json:"kolbach_index,omitempty"`
	// Used to indicate the 'crystallized' percentage of starches for crystal malts.
	Glassy *PercentType `protobuf:"bytes,19,opt,name=glassy,proto3" json:"glassy,omitempty"`
	// The percentage of grain that masses through sieves with gaps of 7/64 and 6/64, desired values of 80% or higher which indicate plump kernels.
	Plump *PercentType `protobuf:"bytes,20,opt,name=plump,proto3" json:"plump,omitempty"`
	Half  *PercentType `protobuf:"bytes,21,opt,name=half,proto3" json:"half,omitempty"`
	// The opposite of glassy, a mealy kernel is one that is not glassy. Base malt should be at least 90%, single step mashes generally require 95% or higher.
	Mealy *PercentType `protobuf:"bytes,22,opt,name=mealy,proto3" json:"mealy,omitempty"`
	// The Percentage of grain that makes it through a thin mesh screen, typically 5/64 inch. Values less than 3% are desired.
	Thru *PercentType `protobuf:"bytes,23,opt,name=thru,proto3" json:"thru,omitempty"`
	// Friability is the measure of a malts ability to crumble during the crush, and is used as an indicator for easy gelatinization of the grain and starches, as well as modification of the malt. Value of 85% of higher indicates a well modified malt and is suitable for single step mashes. Lower values may require a step mash.
	Friability *PercentType `protobuf:"bytes,24,opt,name=friability,proto3" json:"friability,omitempty"`
	// The pH of the resultant wort for 1 lb of grain mashed in 1 gallon of distilled water. Used in many water chemistry / mash pH prediction software.
	DiPh *AcidityType `protobuf:"bytes,25,opt,name=di_ph,json=diPh,proto3" json:"di_ph,omitempty"`
	// The measure of wort viscosity, typically associated with the breakdown of beta-glucans. The higher the viscosity, the greater the need for a glucan rest and the less suitable for a fly sparge.
	Viscosity *ViscosityType `protobuf:"bytes,26,opt,name=viscosity,proto3" json:"viscosity,omitempty"`
	// The amount of DMS precursors, namely S-methyl methionine (SMM) and dimethyl sulfoxide (DMSO) in the malt which convert to dimethyl sulfide (DMS).
	DmsP *ConcentrationType `protobuf:"bytes,27,opt,name=dms_p,json=dmsP,proto3" json:"dms_p,omitempty"`
	// Free Amino Nitrogen (FAN) is a critical yeast nutrient. Typical values for base malt is 170.
	Fan *ConcentrationType `protobuf:"bytes,28,opt,name=fan,proto3" json:"fan,omitempty"`
	// Fermentability - Used in Extracts to indicate a baseline typical attenuation for a typical medium attenuation yeast.
	Fermentability *PercentType `protobuf:"bytes,29,opt,name=fermentability,proto3" json:"fermentability,omitempty"`
	// Values of 180 or more may suggest a glucan rest and avoiding fly sparging.
	BetaGlucan    *ConcentrationType `protobuf:"bytes,30,opt,name=beta_glucan,json=betaGlucan,proto3" json:"beta_glucan,omitempty"`
	Notes         string             `protobuf:"bytes,31,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FermentableType) Reset() {
	*x = FermentableType{}
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableType) ProtoMessage() {}

func (x *FermentableType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableType.ProtoReflect.Descriptor instead.
func (*FermentableType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{1}
}

func (x *FermentableType) GetBase() *FermentableBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FermentableType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableType) GetMaxInBatch() *PercentType {
	if x != nil {
		return x.MaxInBatch
	}
	return nil
}

func (x *FermentableType) GetRecommendMash() bool {
	if x != nil {
		return x.RecommendMash
	}
	return false
}

func (x *FermentableType) GetProtein() *PercentType {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *FermentableType) GetAlphaAmylase() float64 {
	if x != nil {
		return x.AlphaAmylase
	}
	return 0
}

func (x *FermentableType) GetDiastaticPower() *DiastaticPowerType {
	if x != nil {
		return x.DiastaticPower
	}
	return nil
}

func (x *FermentableType) GetMoisture() *PercentType {
	if x != nil {
		return x.Moisture
	}
	return nil
}

func (x *FermentableType) GetInventory() *FermentableInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *FermentableType) GetKolbachIndex() *PercentType {
	if x != nil {
		return x.KolbachIndex
	}
	return nil
}

func (x *FermentableType) GetGlassy() *PercentType {
	if x != nil {
		return x.Glassy
	}
	return nil
}

func (x *FermentableType) GetPlump() *PercentType {
	if x != nil {
		return x.Plump
	}
	return nil
}

func (x *FermentableType) GetHalf() *PercentType {
	if x != nil {
		return x.Half
	}
	return nil
}

func (x *FermentableType) GetMealy() *PercentType {
	if x != nil {
		return x.Mealy
	}
	return nil
}

func (x *FermentableType) GetThru() *PercentType {
	if x != nil {
		return x.Thru
	}
	return nil
}

func (x *FermentableType) GetFriability() *PercentType {
	if x != nil {
		return x.Friability
	}
	return nil
}

func (x *FermentableType) GetDiPh() *AcidityType {
	if x != nil {
		return x.DiPh
	}
	return nil
}

func (x *FermentableType) GetViscosity() *ViscosityType {
	if x != nil {
		return x.Viscosity
	}
	return nil
}

func (x *FermentableType) GetDmsP() *ConcentrationType {
	if x != nil {
		return x.DmsP
	}
	return nil
}

func (x *FermentableType) GetFan() *ConcentrationType {
	if x != nil {
		return x.Fan
	}
	return nil
}

func (x *FermentableType) GetFermentability() *PercentType {
	if x != nil {
		return x.Fermentability
	}
	return nil
}

func (x *FermentableType) GetBetaGlucan() *ConcentrationType {
	if x != nil {
		return x.BetaGlucan
	}
	return nil
}

func (x *FermentableType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
type FermentableAdditionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *FermentableBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are valid to be assigned to Amount:
	//
	//	*FermentableAdditionType_Mass
	//	*FermentableAdditionType_Volume
	Amount        isFermentableAdditionType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FermentableAdditionType) Reset() {
	*x = FermentableAdditionType{}
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentableAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableAdditionType) ProtoMessage() {}

func (x *FermentableAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableAdditionType.ProtoReflect.Descriptor instead.
func (*FermentableAdditionType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{2}
}

func (x *FermentableAdditionType) GetBase() *FermentableBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FermentableAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *FermentableAdditionType) GetAmount() isFermentableAdditionType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *FermentableAdditionType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*FermentableAdditionType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *FermentableAdditionType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*FermentableAdditionType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isFermentableAdditionType_Amount interface {
	isFermentableAdditionType_Amount()
}

type FermentableAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,4,opt,name=mass,proto3,oneof"`
}

type FermentableAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,5,opt,name=volume,proto3,oneof"`
}

func (*FermentableAdditionType_Mass) isFermentableAdditionType_Amount() {}

func (*FermentableAdditionType_Volume) isFermentableAdditionType_Amount() {}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
type YieldType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Percentage yield compared to succrose of a fine grind. eg 80%
	FineGrind *PercentType `protobuf:"bytes,1,opt,name=fine_grind,json=fineGrind,proto3" json:"fine_grind,omitempty"`
	// Percentage yield compared to succrose of a coarse grind. eg 78%
	CoarseGrind *PercentType `protobuf:"bytes,2,opt,name=coarse_grind,json=coarseGrind,proto3" json:"coarse_grind,omitempty"`
	// The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
	FineCoarseDifference *PercentType `protobuf:"bytes,3,opt,name=fine_coarse_difference,json=fineCoarseDifference,proto3" json:"fine_coarse_difference,omitempty"`
	// The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
	Potential     *GravityType `protobuf:"bytes,4,opt,name=potential,proto3" json:"potential,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YieldType) Reset() {
	*x = YieldType{}
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldType) ProtoMessage() {}

func (x *YieldType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldType.ProtoReflect.Descriptor instead.
func (*YieldType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{3}
}

func (x *YieldType) GetFineGrind() *PercentType {
	if x != nil {
		return x.FineGrind
	}
	return nil
}

func (x *YieldType) GetCoarseGrind() *PercentType {
	if x != nil {
		return x.CoarseGrind
	}
	return nil
}

func (x *YieldType) GetFineCoarseDifference() *PercentType {
	if x != nil {
		return x.FineCoarseDifference
	}
	return nil
}

func (x *YieldType) GetPotential() *GravityType {
	if x != nil {
		return x.Potential
	}
	return nil
}

type FermentableInventoryType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Amount:
	//
	//	*FermentableInventoryType_Mass
	//	*FermentableInventoryType_Volume
	Amount        isFermentableInventoryType_Amount `protobuf_oneof:"amount"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FermentableInventoryType) Reset() {
	*x = FermentableInventoryType{}
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentableInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableInventoryType) ProtoMessage() {}

func (x *FermentableInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentable_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableInventoryType.ProtoReflect.Descriptor instead.
func (*FermentableInventoryType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentable_proto_rawDescGZIP(), []int{4}
}

func (x *FermentableInventoryType) GetAmount() isFermentableInventoryType_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *FermentableInventoryType) GetMass() *MassType {
	if x != nil {
		if x, ok := x.Amount.(*FermentableInventoryType_Mass); ok {
			return x.Mass
		}
	}
	return nil
}

func (x *FermentableInventoryType) GetVolume() *VolumeType {
	if x != nil {
		if x, ok := x.Amount.(*FermentableInventoryType_Volume); ok {
			return x.Volume
		}
	}
	return nil
}

type isFermentableInventoryType_Amount interface {
	isFermentableInventoryType_Amount()
}

type FermentableInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type FermentableInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*FermentableInventoryType_Mass) isFermentableInventoryType_Amount() {}

func (*FermentableInventoryType_Volume) isFermentableInventoryType_Amount() {}

var File_beerproto_v1_fermentable_proto protoreflect.FileDescriptor

const file_beerproto_v1_fermentable_proto_rawDesc = "" +
	"\n" +
	"\x1ebeerproto/v1/fermentable.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x19beerproto/v1/timing.proto\x1a\x1bbuf/validate/validate.proto\"\xfb\x02\n" +
	"\x0fFermentableBase\x12B\n" +
	"\x04type\x18\x01 \x01(\x0e2!.beerproto.v1.FermentableBaseTypeB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04type\x12\x16\n" +
	"\x06origin\x18\x02 \x01(\tR\x06origin\x12C\n" +
	"\vgrain_group\x18\x03 \x01(\x0e2\x18.beerproto.v1.GrainGroupB\b\xbaH\x05\x82\x01\x02\x10\x01R\n" +
	"grainGroup\x125\n" +
	"\x05yield\x18\x04 \x01(\v2\x17.beerproto.v1.YieldTypeB\x06\xbaH\x03\xc8\x01\x01R\x05yield\x125\n" +
	"\x05color\x18\x05 \x01(\v2\x17.beerproto.v1.ColorTypeB\x06\xbaH\x03\xc8\x01\x01R\x05color\x12\x1e\n" +
	"\x04name\x18\x06 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12\x1a\n" +
	"\bproducer\x18\a \x01(\tR\bproducer\x12\x1d\n" +
	"\n" +
	"product_id\x18\b \x01(\tR\tproductId\"\xcc\t\n" +
	"\x0fFermentableType\x129\n" +
	"\x04base\x18\x01 \x01(\v2\x1d.beerproto.v1.FermentableBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12;\n" +
	"\fmax_in_batch\x18\x03 \x01(\v2\x19.beerproto.v1.PercentTypeR\n" +
	"maxInBatch\x12%\n" +
	"\x0erecommend_mash\x18\x04 \x01(\bR\rrecommendMash\x123\n" +
	"\aprotein\x18\x05 \x01(\v2\x19.beerproto.v1.PercentTypeR\aprotein\x12#\n" +
	"\ralpha_amylase\x18\v \x01(\x01R\falphaAmylase\x12I\n" +
	"\x0fdiastatic_power\x18\x0e \x01(\v2 .beerproto.v1.DiastaticPowerTypeR\x0ediastaticPower\x125\n" +
	"\bmoisture\x18\x0f \x01(\v2\x19.beerproto.v1.PercentTypeR\bmoisture\x12D\n" +
	"\tinventory\x18\x11 \x01(\v2&.beerproto.v1.FermentableInventoryTypeR\tinventory\x12>\n" +
	"\rkolbach_index\x18\x12 \x01(\v2\x19.beerproto.v1.PercentTypeR\fkolbachIndex\x121\n" +
	"\x06glassy\x18\x13 \x01(\v2\x19.beerproto.v1.PercentTypeR\x06glassy\x12/\n" +
	"\x05plump\x18\x14 \x01(\v2\x19.beerproto.v1.PercentTypeR\x05plump\x12-\n" +
	"\x04half\x18\x15 \x01(\v2\x19.beerproto.v1.PercentTypeR\x04half\x12/\n" +
	"\x05mealy\x18\x16 \x01(\v2\x19.beerproto.v1.PercentTypeR\x05mealy\x12-\n" +
	"\x04thru\x18\x17 \x01(\v2\x19.beerproto.v1.PercentTypeR\x04thru\x129\n" +
	"\n" +
	"friability\x18\x18 \x01(\v2\x19.beerproto.v1.PercentTypeR\n" +
	"friability\x12.\n" +
	"\x05di_ph\x18\x19 \x01(\v2\x19.beerproto.v1.AcidityTypeR\x04diPh\x129\n" +
	"\tviscosity\x18\x1a \x01(\v2\x1b.beerproto.v1.ViscosityTypeR\tviscosity\x124\n" +
	"\x05dms_p\x18\x1b \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\x04dmsP\x121\n" +
	"\x03fan\x18\x1c \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\x03fan\x12A\n" +
	"\x0efermentability\x18\x1d \x01(\v2\x19.beerproto.v1.PercentTypeR\x0efermentability\x12@\n" +
	"\vbeta_glucan\x18\x1e \x01(\v2\x1f.beerproto.v1.ConcentrationTypeR\n" +
	"betaGlucan\x12\x14\n" +
	"\x05notes\x18\x1f \x01(\tR\x05notes\"\x96\x02\n" +
	"\x17FermentableAdditionType\x129\n" +
	"\x04base\x18\x01 \x01(\v2\x1d.beerproto.v1.FermentableBaseB\x06\xbaH\x03\xc8\x01\x01R\x04base\x12\x1b\n" +
	"\x02id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x120\n" +
	"\x06timing\x18\x03 \x01(\v2\x18.beerproto.v1.TimingTypeR\x06timing\x12,\n" +
	"\x04mass\x18\x04 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x122\n" +
	"\x06volume\x18\x05 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01\"\x8d\x02\n" +
	"\tYieldType\x128\n" +
	"\n" +
	"fine_grind\x18\x01 \x01(\v2\x19.beerproto.v1.PercentTypeR\tfineGrind\x12<\n" +
	"\fcoarse_grind\x18\x02 \x01(\v2\x19.beerproto.v1.PercentTypeR\vcoarseGrind\x12O\n" +
	"\x16fine_coarse_difference\x18\x03 \x01(\v2\x19.beerproto.v1.PercentTypeR\x14fineCoarseDifference\x127\n" +
	"\tpotential\x18\x04 \x01(\v2\x19.beerproto.v1.GravityTypeR\tpotential\"\x8d\x01\n" +
	"\x18FermentableInventoryType\x12,\n" +
	"\x04mass\x18\x01 \x01(\v2\x16.beerproto.v1.MassTypeH\x00R\x04mass\x122\n" +
	"\x06volume\x18\x02 \x01(\v2\x18.beerproto.v1.VolumeTypeH\x00R\x06volumeB\x0f\n" +
	"\x06amount\x12\x05\xbaH\x02\b\x01*\xcc\x02\n" +
	"\x13FermentableBaseType\x12%\n" +
	"!FERMENTABLE_BASE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!FERMENTABLE_BASE_TYPE_DRY_EXTRACT\x10\x01\x12!\n" +
	"\x1dFERMENTABLE_BASE_TYPE_EXTRACT\x10\x02\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_GRAIN\x10\x03\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_SUGAR\x10\x04\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_FRUIT\x10\x05\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_JUICE\x10\x06\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_HONEY\x10\a\x12\x1f\n" +
	"\x1bFERMENTABLE_BASE_TYPE_OTHER\x10\b*\xd5\x01\n" +
	"\n" +
	"GrainGroup\x12\x1b\n" +
	"\x17GRAIN_GROUP_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10GRAIN_GROUP_BASE\x10\x01\x12\x17\n" +
	"\x13GRAIN_GROUP_CARAMEL\x10\x02\x12\x16\n" +
	"\x12GRAIN_GROUP_FLAKED\x10\x03\x12\x17\n" +
	"\x13GRAIN_GROUP_ROASTED\x10\x04\x12\x19\n" +
	"\x15GRAIN_GROUP_SPECIALTY\x10\x05\x12\x16\n" +
	"\x12GRAIN_GROUP_SMOKED\x10\x06\x12\x17\n" +
	"\x13GRAIN_GROUP_ADJUNCT\x10\aB\xb1\x01\n" +
	"\x10com.beerproto.v1B\x10FermentableProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_fermentable_proto_rawDescOnce sync.Once
	file_beerproto_v1_fermentable_proto_rawDescData []byte
)

func file_beerproto_v1_fermentable_proto_rawDescGZIP() []byte {
	file_beerproto_v1_fermentable_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_fermentable_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_fermentable_proto_rawDesc), len(file_beerproto_v1_fermentable_proto_rawDesc)))
	})
	return file_beerproto_v1_fermentable_proto_rawDescData
}

var file_beerproto_v1_fermentable_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beerproto_v1_fermentable_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_beerproto_v1_fermentable_proto_goTypes = []any{
	(FermentableBaseType)(0),         // 0: beerproto.v1.FermentableBaseType
	(GrainGroup)(0),                  // 1: beerproto.v1.GrainGroup
	(*FermentableBase)(nil),          // 2: beerproto.v1.FermentableBase
	(*FermentableType)(nil),          // 3: beerproto.v1.FermentableType
	(*FermentableAdditionType)(nil),  // 4: beerproto.v1.FermentableAdditionType
	(*YieldType)(nil),                // 5: beerproto.v1.YieldType
	(*FermentableInventoryType)(nil), // 6: beerproto.v1.FermentableInventoryType
	(*ColorType)(nil),                // 7: beerproto.v1.ColorType
	(*PercentType)(nil),              // 8: beerproto.v1.PercentType
	(*DiastaticPowerType)(nil),       // 9: beerproto.v1.DiastaticPowerType
	(*AcidityType)(nil),              // 10: beerproto.v1.AcidityType
	(*ViscosityType)(nil),            // 11: beerproto.v1.ViscosityType
	(*ConcentrationType)(nil),        // 12: beerproto.v1.ConcentrationType
	(*TimingType)(nil),               // 13: beerproto.v1.TimingType
	(*MassType)(nil),                 // 14: beerproto.v1.MassType
	(*VolumeType)(nil),               // 15: beerproto.v1.VolumeType
	(*GravityType)(nil),              // 16: beerproto.v1.GravityType
}
var file_beerproto_v1_fermentable_proto_depIdxs = []int32{
	0,  // 0: beerproto.v1.FermentableBase.type:type_name -> beerproto.v1.FermentableBaseType
	1,  // 1: beerproto.v1.FermentableBase.grain_group:type_name -> beerproto.v1.GrainGroup
	5,  // 2: beerproto.v1.FermentableBase.yield:type_name -> beerproto.v1.YieldType
	7,  // 3: beerproto.v1.FermentableBase.color:type_name -> beerproto.v1.ColorType
	2,  // 4: beerproto.v1.FermentableType.base:type_name -> beerproto.v1.FermentableBase
	8,  // 5: beerproto.v1.FermentableType.max_in_batch:type_name -> beerproto.v1.PercentType
	8,  // 6: beerproto.v1.FermentableType.protein:type_name -> beerproto.v1.PercentType
	9,  // 7: beerproto.v1.FermentableType.diastatic_power:type_name -> beerproto.v1.DiastaticPowerType
	8,  // 8: beerproto.v1.FermentableType.moisture:type_name -> beerproto.v1.PercentType
	6,  // 9: beerproto.v1.FermentableType.inventory:type_name -> beerproto.v1.FermentableInventoryType
	8,  // 10: beerproto.v1.FermentableType.kolbach_index:type_name -> beerproto.v1.PercentType
	8,  // 11: beerproto.v1.FermentableType.glassy:type_name -> beerproto.v1.PercentType
	8,  // 12: beerproto.v1.FermentableType.plump:type_name -> beerproto.v1.PercentType
	8,  // 13: beerproto.v1.FermentableType.half:type_name -> beerproto.v1.PercentType
	8,  // 14: beerproto.v1.FermentableType.mealy:type_name -> beerproto.v1.PercentType
	8,  // 15: beerproto.v1.FermentableType.thru:type_name -> beerproto.v1.PercentType
	8,  // 16: beerproto.v1.FermentableType.friability:type_name -> beerproto.v1.PercentType
	10, // 17: beerproto.v1.FermentableType.di_ph:type_name -> beerproto.v1.AcidityType
	11, // 18: beerproto.v1.FermentableType.viscosity:type_name -> beerproto.v1.ViscosityType
	12, // 19: beerproto.v1.FermentableType.dms_p:type_name -> beerproto.v1.ConcentrationType
	12, // 20: beerproto.v1.FermentableType.fan:type_name -> beerproto.v1.ConcentrationType
	8,  // 21: beerproto.v1.FermentableType.fermentability:type_name -> beerproto.v1.PercentType
	12, // 22: beerproto.v1.FermentableType.beta_glucan:type_name -> beerproto.v1.ConcentrationType
	2,  // 23: beerproto.v1.FermentableAdditionType.base:type_name -> beerproto.v1.FermentableBase
	13, // 24: beerproto.v1.FermentableAdditionType.timing:type_name -> beerproto.v1.TimingType
	14, // 25: beerproto.v1.FermentableAdditionType.mass:type_name -> beerproto.v1.MassType
	15, // 26: beerproto.v1.FermentableAdditionType.volume:type_name -> beerproto.v1.VolumeType
	8,  // 27: beerproto.v1.YieldType.fine_grind:type_name -> beerproto.v1.PercentType
	8,  // 28: beerproto.v1.YieldType.coarse_grind:type_name -> beerproto.v1.PercentType
	8,  // 29: beerproto.v1.YieldType.fine_coarse_difference:type_name -> beerproto.v1.PercentType
	16, // 30: beerproto.v1.YieldType.potential:type_name -> beerproto.v1.GravityType
	14, // 31: beerproto.v1.FermentableInventoryType.mass:type_name -> beerproto.v1.MassType
	15, // 32: beerproto.v1.FermentableInventoryType.volume:type_name -> beerproto.v1.VolumeType
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_beerproto_v1_fermentable_proto_init() }
func file_beerproto_v1_fermentable_proto_init() {
	if File_beerproto_v1_fermentable_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_timing_proto_init()
	file_beerproto_v1_fermentable_proto_msgTypes[2].OneofWrappers = []any{
		(*FermentableAdditionType_Mass)(nil),
		(*FermentableAdditionType_Volume)(nil),
	}
	file_beerproto_v1_fermentable_proto_msgTypes[4].OneofWrappers = []any{
		(*FermentableInventoryType_Mass)(nil),
		(*FermentableInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_fermentable_proto_rawDesc), len(file_beerproto_v1_fermentable_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_fermentable_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_fermentable_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_fermentable_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_fermentable_proto_msgTypes,
	}.Build()
	File_beerproto_v1_fermentable_proto = out.File
	file_beerproto_v1_fermentable_proto_goTypes = nil
	file_beerproto_v1_fermentable_proto_depIdxs = nil
}
