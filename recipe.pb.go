//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/recipe.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecipeUnit int32

const (
	RecipeUnit_RECIPE_UNIT_UNSPECIFIED RecipeUnit = 0
	// cider
	RecipeUnit_RECIPE_UNIT_CIDER RecipeUnit = 1
	// kombucha
	RecipeUnit_RECIPE_UNIT_KOMBUCHA RecipeUnit = 2
	// soda
	RecipeUnit_RECIPE_UNIT_SODA RecipeUnit = 3
	// other
	RecipeUnit_RECIPE_UNIT_OTHER RecipeUnit = 4
	// mead
	RecipeUnit_RECIPE_UNIT_MEAD RecipeUnit = 5
	// wine
	RecipeUnit_RECIPE_UNIT_WINE RecipeUnit = 6
	// extract
	RecipeUnit_RECIPE_UNIT_EXTRACT RecipeUnit = 7
	// partial mash
	RecipeUnit_RECIPE_UNIT_PARTIAL_MASH RecipeUnit = 8
	// all grain
	RecipeUnit_RECIPE_UNIT_ALL_GRAIN RecipeUnit = 9
)

// Enum value maps for RecipeUnit.
var (
	RecipeUnit_name = map[int32]string{
		0: "RECIPE_UNIT_UNSPECIFIED",
		1: "RECIPE_UNIT_CIDER",
		2: "RECIPE_UNIT_KOMBUCHA",
		3: "RECIPE_UNIT_SODA",
		4: "RECIPE_UNIT_OTHER",
		5: "RECIPE_UNIT_MEAD",
		6: "RECIPE_UNIT_WINE",
		7: "RECIPE_UNIT_EXTRACT",
		8: "RECIPE_UNIT_PARTIAL_MASH",
		9: "RECIPE_UNIT_ALL_GRAIN",
	}
	RecipeUnit_value = map[string]int32{
		"RECIPE_UNIT_UNSPECIFIED":  0,
		"RECIPE_UNIT_CIDER":        1,
		"RECIPE_UNIT_KOMBUCHA":     2,
		"RECIPE_UNIT_SODA":         3,
		"RECIPE_UNIT_OTHER":        4,
		"RECIPE_UNIT_MEAD":         5,
		"RECIPE_UNIT_WINE":         6,
		"RECIPE_UNIT_EXTRACT":      7,
		"RECIPE_UNIT_PARTIAL_MASH": 8,
		"RECIPE_UNIT_ALL_GRAIN":    9,
	}
)

func (x RecipeUnit) Enum() *RecipeUnit {
	p := new(RecipeUnit)
	*p = x
	return p
}

func (x RecipeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_beerproto_v1_recipe_proto_enumTypes[0].Descriptor()
}

func (RecipeUnit) Type() protoreflect.EnumType {
	return &file_beerproto_v1_recipe_proto_enumTypes[0]
}

func (x RecipeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeUnit.Descriptor instead.
func (RecipeUnit) EnumDescriptor() ([]byte, []int) {
	return file_beerproto_v1_recipe_proto_rawDescGZIP(), []int{0}
}

// RecipeType composes the information stored in a recipe
type RecipeType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used to store each efficiency component, including conversion, and brewhouse
	Efficiency *EfficiencyType  `protobuf:"bytes,2,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Style      *RecipeStyleType `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// Used to differentiate the which IBU formula is being used in a recipe. If the formula is modified in any way, e.g. to support whirlpool/flameout additions, then please use `Other` for transparency
	IbuEstimate *IBUEstimateType `protobuf:"bytes,4,opt,name=ibu_estimate,json=ibuEstimate,proto3" json:"ibu_estimate,omitempty"`
	// The color of the finished beer, using SRM or EBC
	ColorEstimate *ColorType `protobuf:"bytes,5,opt,name=color_estimate,json=colorEstimate,proto3" json:"color_estimate,omitempty"`
	// The final beer pH at the end of fermentation
	BeerPh   *AcidityType `protobuf:"bytes,6,opt,name=beer_ph,json=beerPh,proto3" json:"beer_ph,omitempty"`
	Name     string       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Type     RecipeUnit   `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.v1.RecipeUnit" json:"type,omitempty"`
	Coauthor string       `protobuf:"bytes,9,opt,name=coauthor,proto3" json:"coauthor,omitempty"`
	// The gravity of wort when transffered to the fermenter
	OriginalGravity *GravityType `protobuf:"bytes,10,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	// The gravity of beer at the end of fermentation
	FinalGravity *GravityType `protobuf:"bytes,11,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	// The final carbonation of the beer when packaged or served
	Carbonation float64 `protobuf:"fixed64,12,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	// FermentationProcedureType defines the procedure for performing fermentation
	Fermentation *FermentationProcedureType `protobuf:"bytes,13,opt,name=fermentation,proto3" json:"fermentation,omitempty"`
	Author       string                     `protobuf:"bytes,14,opt,name=author,proto3" json:"author,omitempty"`
	// A collection of all ingredients used for the recipe
	Ingredients *IngredientsType `protobuf:"bytes,15,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	// This defines the procedure for performing unique mashing processes
	Mash *MashProcedureType `protobuf:"bytes,16,opt,name=mash,proto3" json:"mash,omitempty"`
	// Describes the procedure for packaging your beverage
	Packaging *PackagingProcedureType `protobuf:"bytes,17,opt,name=packaging,proto3" json:"packaging,omitempty"`
	// Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
	Boil *BoilProcedureType `protobuf:"bytes,18,opt,name=boil,proto3" json:"boil,omitempty"`
	// Used to store subjective tasting notes, and rating
	Taste           *TasteType `protobuf:"bytes,19,opt,name=taste,proto3" json:"taste,omitempty"`
	CaloriesPerPint float64    `protobuf:"fixed64,20,opt,name=calories_per_pint,json=caloriesPerPint,proto3" json:"calories_per_pint,omitempty"`
	Created         string     `protobuf:"bytes,21,opt,name=created,proto3" json:"created,omitempty"`
	// The volume into the fermenter
	BatchSize       *VolumeType  `protobuf:"bytes,22,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Notes           string       `protobuf:"bytes,23,opt,name=notes,proto3" json:"notes,omitempty"`
	AlcoholByVolume *PercentType `protobuf:"bytes,24,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	// The total apparent attenuation of the finished beer after fermentation
	ApparentAttenuation *PercentType `protobuf:"bytes,25,opt,name=apparent_attenuation,json=apparentAttenuation,proto3" json:"apparent_attenuation,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeType) Reset() {
	*x = RecipeType{}
	mi := &file_beerproto_v1_recipe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeType) ProtoMessage() {}

func (x *RecipeType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_recipe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeType.ProtoReflect.Descriptor instead.
func (*RecipeType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_recipe_proto_rawDescGZIP(), []int{0}
}

func (x *RecipeType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecipeType) GetEfficiency() *EfficiencyType {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

func (x *RecipeType) GetStyle() *RecipeStyleType {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *RecipeType) GetIbuEstimate() *IBUEstimateType {
	if x != nil {
		return x.IbuEstimate
	}
	return nil
}

func (x *RecipeType) GetColorEstimate() *ColorType {
	if x != nil {
		return x.ColorEstimate
	}
	return nil
}

func (x *RecipeType) GetBeerPh() *AcidityType {
	if x != nil {
		return x.BeerPh
	}
	return nil
}

func (x *RecipeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeType) GetType() RecipeUnit {
	if x != nil {
		return x.Type
	}
	return RecipeUnit_RECIPE_UNIT_UNSPECIFIED
}

func (x *RecipeType) GetCoauthor() string {
	if x != nil {
		return x.Coauthor
	}
	return ""
}

func (x *RecipeType) GetOriginalGravity() *GravityType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *RecipeType) GetFinalGravity() *GravityType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *RecipeType) GetCarbonation() float64 {
	if x != nil {
		return x.Carbonation
	}
	return 0
}

func (x *RecipeType) GetFermentation() *FermentationProcedureType {
	if x != nil {
		return x.Fermentation
	}
	return nil
}

func (x *RecipeType) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RecipeType) GetIngredients() *IngredientsType {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeType) GetMash() *MashProcedureType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *RecipeType) GetPackaging() *PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *RecipeType) GetBoil() *BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *RecipeType) GetTaste() *TasteType {
	if x != nil {
		return x.Taste
	}
	return nil
}

func (x *RecipeType) GetCaloriesPerPint() float64 {
	if x != nil {
		return x.CaloriesPerPint
	}
	return 0
}

func (x *RecipeType) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RecipeType) GetBatchSize() *VolumeType {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *RecipeType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeType) GetAlcoholByVolume() *PercentType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *RecipeType) GetApparentAttenuation() *PercentType {
	if x != nil {
		return x.ApparentAttenuation
	}
	return nil
}

// The efficiencyType stores each efficiency component
type EfficiencyType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The percentage of sugar from the grain yield that is extracted and converted during the mash
	Conversion *PercentType `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// The percentage of sugar that makes it from the mash tun to the kettle
	Lauter *PercentType `protobuf:"bytes,2,opt,name=lauter,proto3" json:"lauter,omitempty"`
	// The percentage of sugar that makes it from the grain to the kettle
	Mash *PercentType `protobuf:"bytes,3,opt,name=mash,proto3" json:"mash,omitempty"`
	// The percentage of sugar that makes it from the grain to the fermenter
	Brewhouse     *PercentType `protobuf:"bytes,4,opt,name=brewhouse,proto3" json:"brewhouse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EfficiencyType) Reset() {
	*x = EfficiencyType{}
	mi := &file_beerproto_v1_recipe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EfficiencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfficiencyType) ProtoMessage() {}

func (x *EfficiencyType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_recipe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfficiencyType.ProtoReflect.Descriptor instead.
func (*EfficiencyType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_recipe_proto_rawDescGZIP(), []int{1}
}

func (x *EfficiencyType) GetConversion() *PercentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *EfficiencyType) GetLauter() *PercentType {
	if x != nil {
		return x.Lauter
	}
	return nil
}

func (x *EfficiencyType) GetMash() *PercentType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *EfficiencyType) GetBrewhouse() *PercentType {
	if x != nil {
		return x.Brewhouse
	}
	return nil
}

type IngredientsType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// miscellaneous_additions collects all the miscellaneous items for use in a recipe
	MiscellaneousAdditions []*MiscellaneousAdditionType `protobuf:"bytes,1,rep,name=miscellaneous_additions,json=miscellaneousAdditions,proto3" json:"miscellaneous_additions,omitempty"`
	// culture_additions collects all the culture items for use in a recipe
	CultureAdditions []*CultureAdditionType `protobuf:"bytes,2,rep,name=culture_additions,json=cultureAdditions,proto3" json:"culture_additions,omitempty"`
	// water_additions collects all the water items for use in a recipe
	WaterAdditions []*WaterAdditionType `protobuf:"bytes,3,rep,name=water_additions,json=waterAdditions,proto3" json:"water_additions,omitempty"`
	// fermentable_additions collects all the fermentable ingredients for use in a recipe
	FermentableAdditions []*FermentableAdditionType `protobuf:"bytes,4,rep,name=fermentable_additions,json=fermentableAdditions,proto3" json:"fermentable_additions,omitempty"`
	// hop_additions collects all the hops for use in a recipe
	HopAdditions  []*HopAdditionType `protobuf:"bytes,5,rep,name=hop_additions,json=hopAdditions,proto3" json:"hop_additions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngredientsType) Reset() {
	*x = IngredientsType{}
	mi := &file_beerproto_v1_recipe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngredientsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientsType) ProtoMessage() {}

func (x *IngredientsType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_recipe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientsType.ProtoReflect.Descriptor instead.
func (*IngredientsType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_recipe_proto_rawDescGZIP(), []int{2}
}

func (x *IngredientsType) GetMiscellaneousAdditions() []*MiscellaneousAdditionType {
	if x != nil {
		return x.MiscellaneousAdditions
	}
	return nil
}

func (x *IngredientsType) GetCultureAdditions() []*CultureAdditionType {
	if x != nil {
		return x.CultureAdditions
	}
	return nil
}

func (x *IngredientsType) GetWaterAdditions() []*WaterAdditionType {
	if x != nil {
		return x.WaterAdditions
	}
	return nil
}

func (x *IngredientsType) GetFermentableAdditions() []*FermentableAdditionType {
	if x != nil {
		return x.FermentableAdditions
	}
	return nil
}

func (x *IngredientsType) GetHopAdditions() []*HopAdditionType {
	if x != nil {
		return x.HopAdditions
	}
	return nil
}

type TasteType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notes         string                 `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	Rating        float64                `protobuf:"fixed64,2,opt,name=rating,proto3" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TasteType) Reset() {
	*x = TasteType{}
	mi := &file_beerproto_v1_recipe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasteType) ProtoMessage() {}

func (x *TasteType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_recipe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasteType.ProtoReflect.Descriptor instead.
func (*TasteType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_recipe_proto_rawDescGZIP(), []int{3}
}

func (x *TasteType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *TasteType) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

var File_beerproto_v1_recipe_proto protoreflect.FileDescriptor

const file_beerproto_v1_recipe_proto_rawDesc = "" +
	"\n" +
	"\x19beerproto/v1/recipe.proto\x12\fbeerproto.v1\x1a\x17beerproto/v1/boil.proto\x1a\x1abeerproto/v1/culture.proto\x1a\x1ebeerproto/v1/fermentable.proto\x1a\x1fbeerproto/v1/fermentation.proto\x1a\x16beerproto/v1/hop.proto\x1a\x17beerproto/v1/mash.proto\x1a$beerproto/v1/measureable_units.proto\x1a\x17beerproto/v1/misc.proto\x1a\x1cbeerproto/v1/packaging.proto\x1a\x18beerproto/v1/style.proto\x1a\x18beerproto/v1/water.proto\x1a\x1bbuf/validate/validate.proto\"\xbe\n" +
	"\n" +
	"\n" +
	"RecipeType\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12D\n" +
	"\n" +
	"efficiency\x18\x02 \x01(\v2\x1c.beerproto.v1.EfficiencyTypeB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"efficiency\x123\n" +
	"\x05style\x18\x03 \x01(\v2\x1d.beerproto.v1.RecipeStyleTypeR\x05style\x12@\n" +
	"\fibu_estimate\x18\x04 \x01(\v2\x1d.beerproto.v1.IBUEstimateTypeR\vibuEstimate\x12>\n" +
	"\x0ecolor_estimate\x18\x05 \x01(\v2\x17.beerproto.v1.ColorTypeR\rcolorEstimate\x122\n" +
	"\abeer_ph\x18\x06 \x01(\v2\x19.beerproto.v1.AcidityTypeR\x06beerPh\x12\x1e\n" +
	"\x04name\x18\a \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x129\n" +
	"\x04type\x18\b \x01(\x0e2\x18.beerproto.v1.RecipeUnitB\v\xbaH\b\xc8\x01\x01\x82\x01\x02 \x00R\x04type\x12\x1a\n" +
	"\bcoauthor\x18\t \x01(\tR\bcoauthor\x12D\n" +
	"\x10original_gravity\x18\n" +
	" \x01(\v2\x19.beerproto.v1.GravityTypeR\x0foriginalGravity\x12>\n" +
	"\rfinal_gravity\x18\v \x01(\v2\x19.beerproto.v1.GravityTypeR\ffinalGravity\x12 \n" +
	"\vcarbonation\x18\f \x01(\x01R\vcarbonation\x12K\n" +
	"\ffermentation\x18\r \x01(\v2'.beerproto.v1.FermentationProcedureTypeR\ffermentation\x12\x1e\n" +
	"\x06author\x18\x0e \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06author\x12G\n" +
	"\vingredients\x18\x0f \x01(\v2\x1d.beerproto.v1.IngredientsTypeB\x06\xbaH\x03\xc8\x01\x01R\vingredients\x123\n" +
	"\x04mash\x18\x10 \x01(\v2\x1f.beerproto.v1.MashProcedureTypeR\x04mash\x12B\n" +
	"\tpackaging\x18\x11 \x01(\v2$.beerproto.v1.PackagingProcedureTypeR\tpackaging\x123\n" +
	"\x04boil\x18\x12 \x01(\v2\x1f.beerproto.v1.BoilProcedureTypeR\x04boil\x12-\n" +
	"\x05taste\x18\x13 \x01(\v2\x17.beerproto.v1.TasteTypeR\x05taste\x12*\n" +
	"\x11calories_per_pint\x18\x14 \x01(\x01R\x0fcaloriesPerPint\x12\x18\n" +
	"\acreated\x18\x15 \x01(\tR\acreated\x12?\n" +
	"\n" +
	"batch_size\x18\x16 \x01(\v2\x18.beerproto.v1.VolumeTypeB\x06\xbaH\x03\xc8\x01\x01R\tbatchSize\x12\x14\n" +
	"\x05notes\x18\x17 \x01(\tR\x05notes\x12E\n" +
	"\x11alcohol_by_volume\x18\x18 \x01(\v2\x19.beerproto.v1.PercentTypeR\x0falcoholByVolume\x12L\n" +
	"\x14apparent_attenuation\x18\x19 \x01(\v2\x19.beerproto.v1.PercentTypeR\x13apparentAttenuation\"\xee\x01\n" +
	"\x0eEfficiencyType\x129\n" +
	"\n" +
	"conversion\x18\x01 \x01(\v2\x19.beerproto.v1.PercentTypeR\n" +
	"conversion\x121\n" +
	"\x06lauter\x18\x02 \x01(\v2\x19.beerproto.v1.PercentTypeR\x06lauter\x12-\n" +
	"\x04mash\x18\x03 \x01(\v2\x19.beerproto.v1.PercentTypeR\x04mash\x12?\n" +
	"\tbrewhouse\x18\x04 \x01(\v2\x19.beerproto.v1.PercentTypeB\x06\xbaH\x03\xc8\x01\x01R\tbrewhouse\"\xb7\x03\n" +
	"\x0fIngredientsType\x12`\n" +
	"\x17miscellaneous_additions\x18\x01 \x03(\v2'.beerproto.v1.MiscellaneousAdditionTypeR\x16miscellaneousAdditions\x12N\n" +
	"\x11culture_additions\x18\x02 \x03(\v2!.beerproto.v1.CultureAdditionTypeR\x10cultureAdditions\x12H\n" +
	"\x0fwater_additions\x18\x03 \x03(\v2\x1f.beerproto.v1.WaterAdditionTypeR\x0ewaterAdditions\x12d\n" +
	"\x15fermentable_additions\x18\x04 \x03(\v2%.beerproto.v1.FermentableAdditionTypeB\b\xbaH\x05\x92\x01\x02\b\x01R\x14fermentableAdditions\x12B\n" +
	"\rhop_additions\x18\x05 \x03(\v2\x1d.beerproto.v1.HopAdditionTypeR\fhopAdditions\"I\n" +
	"\tTasteType\x12\x1c\n" +
	"\x05notes\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x05notes\x12\x1e\n" +
	"\x06rating\x18\x02 \x01(\x01B\x06\xbaH\x03\xc8\x01\x01R\x06rating*\x85\x02\n" +
	"\n" +
	"RecipeUnit\x12\x1b\n" +
	"\x17RECIPE_UNIT_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11RECIPE_UNIT_CIDER\x10\x01\x12\x18\n" +
	"\x14RECIPE_UNIT_KOMBUCHA\x10\x02\x12\x14\n" +
	"\x10RECIPE_UNIT_SODA\x10\x03\x12\x15\n" +
	"\x11RECIPE_UNIT_OTHER\x10\x04\x12\x14\n" +
	"\x10RECIPE_UNIT_MEAD\x10\x05\x12\x14\n" +
	"\x10RECIPE_UNIT_WINE\x10\x06\x12\x17\n" +
	"\x13RECIPE_UNIT_EXTRACT\x10\a\x12\x1c\n" +
	"\x18RECIPE_UNIT_PARTIAL_MASH\x10\b\x12\x19\n" +
	"\x15RECIPE_UNIT_ALL_GRAIN\x10\tB\xac\x01\n" +
	"\x10com.beerproto.v1B\vRecipeProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_recipe_proto_rawDescOnce sync.Once
	file_beerproto_v1_recipe_proto_rawDescData []byte
)

func file_beerproto_v1_recipe_proto_rawDescGZIP() []byte {
	file_beerproto_v1_recipe_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_recipe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_recipe_proto_rawDesc), len(file_beerproto_v1_recipe_proto_rawDesc)))
	})
	return file_beerproto_v1_recipe_proto_rawDescData
}

var file_beerproto_v1_recipe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beerproto_v1_recipe_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_beerproto_v1_recipe_proto_goTypes = []any{
	(RecipeUnit)(0),                   // 0: beerproto.v1.RecipeUnit
	(*RecipeType)(nil),                // 1: beerproto.v1.RecipeType
	(*EfficiencyType)(nil),            // 2: beerproto.v1.EfficiencyType
	(*IngredientsType)(nil),           // 3: beerproto.v1.IngredientsType
	(*TasteType)(nil),                 // 4: beerproto.v1.TasteType
	(*RecipeStyleType)(nil),           // 5: beerproto.v1.RecipeStyleType
	(*IBUEstimateType)(nil),           // 6: beerproto.v1.IBUEstimateType
	(*ColorType)(nil),                 // 7: beerproto.v1.ColorType
	(*AcidityType)(nil),               // 8: beerproto.v1.AcidityType
	(*GravityType)(nil),               // 9: beerproto.v1.GravityType
	(*FermentationProcedureType)(nil), // 10: beerproto.v1.FermentationProcedureType
	(*MashProcedureType)(nil),         // 11: beerproto.v1.MashProcedureType
	(*PackagingProcedureType)(nil),    // 12: beerproto.v1.PackagingProcedureType
	(*BoilProcedureType)(nil),         // 13: beerproto.v1.BoilProcedureType
	(*VolumeType)(nil),                // 14: beerproto.v1.VolumeType
	(*PercentType)(nil),               // 15: beerproto.v1.PercentType
	(*MiscellaneousAdditionType)(nil), // 16: beerproto.v1.MiscellaneousAdditionType
	(*CultureAdditionType)(nil),       // 17: beerproto.v1.CultureAdditionType
	(*WaterAdditionType)(nil),         // 18: beerproto.v1.WaterAdditionType
	(*FermentableAdditionType)(nil),   // 19: beerproto.v1.FermentableAdditionType
	(*HopAdditionType)(nil),           // 20: beerproto.v1.HopAdditionType
}
var file_beerproto_v1_recipe_proto_depIdxs = []int32{
	2,  // 0: beerproto.v1.RecipeType.efficiency:type_name -> beerproto.v1.EfficiencyType
	5,  // 1: beerproto.v1.RecipeType.style:type_name -> beerproto.v1.RecipeStyleType
	6,  // 2: beerproto.v1.RecipeType.ibu_estimate:type_name -> beerproto.v1.IBUEstimateType
	7,  // 3: beerproto.v1.RecipeType.color_estimate:type_name -> beerproto.v1.ColorType
	8,  // 4: beerproto.v1.RecipeType.beer_ph:type_name -> beerproto.v1.AcidityType
	0,  // 5: beerproto.v1.RecipeType.type:type_name -> beerproto.v1.RecipeUnit
	9,  // 6: beerproto.v1.RecipeType.original_gravity:type_name -> beerproto.v1.GravityType
	9,  // 7: beerproto.v1.RecipeType.final_gravity:type_name -> beerproto.v1.GravityType
	10, // 8: beerproto.v1.RecipeType.fermentation:type_name -> beerproto.v1.FermentationProcedureType
	3,  // 9: beerproto.v1.RecipeType.ingredients:type_name -> beerproto.v1.IngredientsType
	11, // 10: beerproto.v1.RecipeType.mash:type_name -> beerproto.v1.MashProcedureType
	12, // 11: beerproto.v1.RecipeType.packaging:type_name -> beerproto.v1.PackagingProcedureType
	13, // 12: beerproto.v1.RecipeType.boil:type_name -> beerproto.v1.BoilProcedureType
	4,  // 13: beerproto.v1.RecipeType.taste:type_name -> beerproto.v1.TasteType
	14, // 14: beerproto.v1.RecipeType.batch_size:type_name -> beerproto.v1.VolumeType
	15, // 15: beerproto.v1.RecipeType.alcohol_by_volume:type_name -> beerproto.v1.PercentType
	15, // 16: beerproto.v1.RecipeType.apparent_attenuation:type_name -> beerproto.v1.PercentType
	15, // 17: beerproto.v1.EfficiencyType.conversion:type_name -> beerproto.v1.PercentType
	15, // 18: beerproto.v1.EfficiencyType.lauter:type_name -> beerproto.v1.PercentType
	15, // 19: beerproto.v1.EfficiencyType.mash:type_name -> beerproto.v1.PercentType
	15, // 20: beerproto.v1.EfficiencyType.brewhouse:type_name -> beerproto.v1.PercentType
	16, // 21: beerproto.v1.IngredientsType.miscellaneous_additions:type_name -> beerproto.v1.MiscellaneousAdditionType
	17, // 22: beerproto.v1.IngredientsType.culture_additions:type_name -> beerproto.v1.CultureAdditionType
	18, // 23: beerproto.v1.IngredientsType.water_additions:type_name -> beerproto.v1.WaterAdditionType
	19, // 24: beerproto.v1.IngredientsType.fermentable_additions:type_name -> beerproto.v1.FermentableAdditionType
	20, // 25: beerproto.v1.IngredientsType.hop_additions:type_name -> beerproto.v1.HopAdditionType
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_beerproto_v1_recipe_proto_init() }
func file_beerproto_v1_recipe_proto_init() {
	if File_beerproto_v1_recipe_proto != nil {
		return
	}
	file_beerproto_v1_boil_proto_init()
	file_beerproto_v1_culture_proto_init()
	file_beerproto_v1_fermentable_proto_init()
	file_beerproto_v1_fermentation_proto_init()
	file_beerproto_v1_hop_proto_init()
	file_beerproto_v1_mash_proto_init()
	file_beerproto_v1_measureable_units_proto_init()
	file_beerproto_v1_misc_proto_init()
	file_beerproto_v1_packaging_proto_init()
	file_beerproto_v1_style_proto_init()
	file_beerproto_v1_water_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_recipe_proto_rawDesc), len(file_beerproto_v1_recipe_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_recipe_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_recipe_proto_depIdxs,
		EnumInfos:         file_beerproto_v1_recipe_proto_enumTypes,
		MessageInfos:      file_beerproto_v1_recipe_proto_msgTypes,
	}.Build()
	File_beerproto_v1_recipe_proto = out.File
	file_beerproto_v1_recipe_proto_goTypes = nil
	file_beerproto_v1_recipe_proto_depIdxs = nil
}
