//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: beerproto/v1/fermentation_step.proto

package beerprotov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FermentationStepType - a per step representation of a fermentation action
type FermentationStepType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EndTemperature *TemperatureType       `protobuf:"bytes,3,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	StepTime       *TimeType              `protobuf:"bytes,4,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
	FreeRise         bool             `protobuf:"varint,5,opt,name=free_rise,json=freeRise,proto3" json:"free_rise,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,6,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	EndGravity       *GravityType     `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,8,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Description      string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,10,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,11,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Vessel           string           `protobuf:"bytes,12,opt,name=vessel,proto3" json:"vessel,omitempty"`
	// Vessel pressure indicates the pressure applied within the fermentation vessel.
	VesselPressure *PercentType `protobuf:"bytes,13,opt,name=vessel_pressure,json=vesselPressure,proto3" json:"vessel_pressure,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FermentationStepType) Reset() {
	*x = FermentationStepType{}
	mi := &file_beerproto_v1_fermentation_step_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentationStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationStepType) ProtoMessage() {}

func (x *FermentationStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentation_step_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationStepType.ProtoReflect.Descriptor instead.
func (*FermentationStepType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentation_step_proto_rawDescGZIP(), []int{0}
}

func (x *FermentationStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentationStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentationStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *FermentationStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *FermentationStepType) GetFreeRise() bool {
	if x != nil {
		return x.FreeRise
	}
	return false
}

func (x *FermentationStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *FermentationStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *FermentationStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *FermentationStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *FermentationStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *FermentationStepType) GetVessel() string {
	if x != nil {
		return x.Vessel
	}
	return ""
}

func (x *FermentationStepType) GetVesselPressure() *PercentType {
	if x != nil {
		return x.VesselPressure
	}
	return nil
}

var File_beerproto_v1_fermentation_step_proto protoreflect.FileDescriptor

const file_beerproto_v1_fermentation_step_proto_rawDesc = "" +
	"\n" +
	"$beerproto/v1/fermentation_step.proto\x12\fbeerproto.v1\x1a$beerproto/v1/measureable_units.proto\x1a\x1bbuf/validate/validate.proto\"\x9b\x05\n" +
	"\x14FermentationStepType\x12\x1b\n" +
	"\x02id\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x04name\x12F\n" +
	"\x0fend_temperature\x18\x03 \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x0eendTemperature\x123\n" +
	"\tstep_time\x18\x04 \x01(\v2\x16.beerproto.v1.TimeTypeR\bstepTime\x12\x1b\n" +
	"\tfree_rise\x18\x05 \x01(\bR\bfreeRise\x12>\n" +
	"\rstart_gravity\x18\x06 \x01(\v2\x19.beerproto.v1.GravityTypeR\fstartGravity\x12:\n" +
	"\vend_gravity\x18\a \x01(\v2\x19.beerproto.v1.GravityTypeR\n" +
	"endGravity\x124\n" +
	"\bstart_ph\x18\b \x01(\v2\x19.beerproto.v1.AcidityTypeR\astartPh\x12 \n" +
	"\vdescription\x18\t \x01(\tR\vdescription\x12J\n" +
	"\x11start_temperature\x18\n" +
	" \x01(\v2\x1d.beerproto.v1.TemperatureTypeR\x10startTemperature\x120\n" +
	"\x06end_ph\x18\v \x01(\v2\x19.beerproto.v1.AcidityTypeR\x05endPh\x12\x16\n" +
	"\x06vessel\x18\f \x01(\tR\x06vessel\x12B\n" +
	"\x0fvessel_pressure\x18\r \x01(\v2\x19.beerproto.v1.PercentTypeR\x0evesselPressureB\xb6\x01\n" +
	"\x10com.beerproto.v1B\x15FermentationStepProtoP\x01Z:github.com/beerproto/beerproto_go/beerproto/v1;beerprotov1\xa2\x02\x03BXX\xaa\x02\fBeerproto.V1\xca\x02\fBeerproto\\V1\xe2\x02\x18Beerproto\\V1\\GPBMetadata\xea\x02\rBeerproto::V1b\x06proto3"

var (
	file_beerproto_v1_fermentation_step_proto_rawDescOnce sync.Once
	file_beerproto_v1_fermentation_step_proto_rawDescData []byte
)

func file_beerproto_v1_fermentation_step_proto_rawDescGZIP() []byte {
	file_beerproto_v1_fermentation_step_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_fermentation_step_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_beerproto_v1_fermentation_step_proto_rawDesc), len(file_beerproto_v1_fermentation_step_proto_rawDesc)))
	})
	return file_beerproto_v1_fermentation_step_proto_rawDescData
}

var file_beerproto_v1_fermentation_step_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_fermentation_step_proto_goTypes = []any{
	(*FermentationStepType)(nil), // 0: beerproto.v1.FermentationStepType
	(*TemperatureType)(nil),      // 1: beerproto.v1.TemperatureType
	(*TimeType)(nil),             // 2: beerproto.v1.TimeType
	(*GravityType)(nil),          // 3: beerproto.v1.GravityType
	(*AcidityType)(nil),          // 4: beerproto.v1.AcidityType
	(*PercentType)(nil),          // 5: beerproto.v1.PercentType
}
var file_beerproto_v1_fermentation_step_proto_depIdxs = []int32{
	1, // 0: beerproto.v1.FermentationStepType.end_temperature:type_name -> beerproto.v1.TemperatureType
	2, // 1: beerproto.v1.FermentationStepType.step_time:type_name -> beerproto.v1.TimeType
	3, // 2: beerproto.v1.FermentationStepType.start_gravity:type_name -> beerproto.v1.GravityType
	3, // 3: beerproto.v1.FermentationStepType.end_gravity:type_name -> beerproto.v1.GravityType
	4, // 4: beerproto.v1.FermentationStepType.start_ph:type_name -> beerproto.v1.AcidityType
	1, // 5: beerproto.v1.FermentationStepType.start_temperature:type_name -> beerproto.v1.TemperatureType
	4, // 6: beerproto.v1.FermentationStepType.end_ph:type_name -> beerproto.v1.AcidityType
	5, // 7: beerproto.v1.FermentationStepType.vessel_pressure:type_name -> beerproto.v1.PercentType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_beerproto_v1_fermentation_step_proto_init() }
func file_beerproto_v1_fermentation_step_proto_init() {
	if File_beerproto_v1_fermentation_step_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_beerproto_v1_fermentation_step_proto_rawDesc), len(file_beerproto_v1_fermentation_step_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_fermentation_step_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_fermentation_step_proto_depIdxs,
		MessageInfos:      file_beerproto_v1_fermentation_step_proto_msgTypes,
	}.Build()
	File_beerproto_v1_fermentation_step_proto = out.File
	file_beerproto_v1_fermentation_step_proto_goTypes = nil
	file_beerproto_v1_fermentation_step_proto_depIdxs = nil
}
