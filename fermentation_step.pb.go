//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: beerproto/v1/fermentation_step.proto

package beerprotov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FermentationStepType - a per step representation of a fermentation action
type FermentationStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,3,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	StepTime       *TimeType        `protobuf:"bytes,4,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
	FreeRise         bool             `protobuf:"varint,5,opt,name=free_rise,json=freeRise,proto3" json:"free_rise,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,6,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	EndGravity       *GravityType     `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,8,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Description      string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,10,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,11,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Vessel           string           `protobuf:"bytes,12,opt,name=vessel,proto3" json:"vessel,omitempty"`
	// Vessel pressure indicates the pressure applied within the fermentation vessel.
	VesselPressure *PercentType `protobuf:"bytes,13,opt,name=vessel_pressure,json=vesselPressure,proto3" json:"vessel_pressure,omitempty"`
}

func (x *FermentationStepType) Reset() {
	*x = FermentationStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beerproto_v1_fermentation_step_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentationStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationStepType) ProtoMessage() {}

func (x *FermentationStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beerproto_v1_fermentation_step_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationStepType.ProtoReflect.Descriptor instead.
func (*FermentationStepType) Descriptor() ([]byte, []int) {
	return file_beerproto_v1_fermentation_step_proto_rawDescGZIP(), []int{0}
}

func (x *FermentationStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentationStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentationStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *FermentationStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *FermentationStepType) GetFreeRise() bool {
	if x != nil {
		return x.FreeRise
	}
	return false
}

func (x *FermentationStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *FermentationStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *FermentationStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *FermentationStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *FermentationStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *FermentationStepType) GetVessel() string {
	if x != nil {
		return x.Vessel
	}
	return ""
}

func (x *FermentationStepType) GetVesselPressure() *PercentType {
	if x != nil {
		return x.VesselPressure
	}
	return nil
}

var File_beerproto_v1_fermentation_step_proto protoreflect.FileDescriptor

var file_beerproto_v1_fermentation_step_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x05, 0x0a, 0x14, 0x46,
	0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x69, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x52, 0x69, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x50, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x42,
	0xb6, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f,
	0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa,
	0x02, 0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0c, 0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18,
	0x42, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beerproto_v1_fermentation_step_proto_rawDescOnce sync.Once
	file_beerproto_v1_fermentation_step_proto_rawDescData = file_beerproto_v1_fermentation_step_proto_rawDesc
)

func file_beerproto_v1_fermentation_step_proto_rawDescGZIP() []byte {
	file_beerproto_v1_fermentation_step_proto_rawDescOnce.Do(func() {
		file_beerproto_v1_fermentation_step_proto_rawDescData = protoimpl.X.CompressGZIP(file_beerproto_v1_fermentation_step_proto_rawDescData)
	})
	return file_beerproto_v1_fermentation_step_proto_rawDescData
}

var file_beerproto_v1_fermentation_step_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_beerproto_v1_fermentation_step_proto_goTypes = []interface{}{
	(*FermentationStepType)(nil), // 0: beerproto.v1.FermentationStepType
	(*TemperatureType)(nil),      // 1: beerproto.v1.TemperatureType
	(*TimeType)(nil),             // 2: beerproto.v1.TimeType
	(*GravityType)(nil),          // 3: beerproto.v1.GravityType
	(*AcidityType)(nil),          // 4: beerproto.v1.AcidityType
	(*PercentType)(nil),          // 5: beerproto.v1.PercentType
}
var file_beerproto_v1_fermentation_step_proto_depIdxs = []int32{
	1, // 0: beerproto.v1.FermentationStepType.end_temperature:type_name -> beerproto.v1.TemperatureType
	2, // 1: beerproto.v1.FermentationStepType.step_time:type_name -> beerproto.v1.TimeType
	3, // 2: beerproto.v1.FermentationStepType.start_gravity:type_name -> beerproto.v1.GravityType
	3, // 3: beerproto.v1.FermentationStepType.end_gravity:type_name -> beerproto.v1.GravityType
	4, // 4: beerproto.v1.FermentationStepType.start_ph:type_name -> beerproto.v1.AcidityType
	1, // 5: beerproto.v1.FermentationStepType.start_temperature:type_name -> beerproto.v1.TemperatureType
	4, // 6: beerproto.v1.FermentationStepType.end_ph:type_name -> beerproto.v1.AcidityType
	5, // 7: beerproto.v1.FermentationStepType.vessel_pressure:type_name -> beerproto.v1.PercentType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_beerproto_v1_fermentation_step_proto_init() }
func file_beerproto_v1_fermentation_step_proto_init() {
	if File_beerproto_v1_fermentation_step_proto != nil {
		return
	}
	file_beerproto_v1_measureable_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_beerproto_v1_fermentation_step_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentationStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beerproto_v1_fermentation_step_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beerproto_v1_fermentation_step_proto_goTypes,
		DependencyIndexes: file_beerproto_v1_fermentation_step_proto_depIdxs,
		MessageInfos:      file_beerproto_v1_fermentation_step_proto_msgTypes,
	}.Build()
	File_beerproto_v1_fermentation_step_proto = out.File
	file_beerproto_v1_fermentation_step_proto_rawDesc = nil
	file_beerproto_v1_fermentation_step_proto_goTypes = nil
	file_beerproto_v1_fermentation_step_proto_depIdxs = nil
}
